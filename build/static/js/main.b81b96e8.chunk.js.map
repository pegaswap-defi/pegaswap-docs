{"version":3,"sources":["contexts/LocalStorage.js","Theme/index.js","apollo/client.js","constants/index.js","apollo/queries.js","utils/tokenLists.ts","contexts/Application.js","utils/index.js","utils/data.ts","contexts/PairData.js","contexts/GlobalData.js","contexts/TokenData.js","contexts/User.js","components/Header/components/Logo.jsx","components/Header/components/ListIcon.jsx","components/Header/components/Search.jsx","components/SideBar/components/Nav.jsx","components/ButtonMenu/ButtonMenu.jsx","components/Header/Header.jsx","components/SideBar/SideBar.jsx","components/TitleChild/TitleChild.jsx","views/Home/Home.jsx","components/ButtonTotop/ButtonTotop.jsx","views/TrustWallet/TrustWallet.jsx","components/Thumb/Thumb.jsx","views/BinanceSmartChange/components/Introduction.jsx","views/BinanceSmartChange/components/Closing.jsx","views/BinanceSmartChange/components/Decentralized.jsx","views/BinanceSmartChange/components/Howdoes.jsx","views/BinanceSmartChange/components/Whatis.jsx","views/BinanceSmartChange/BinanceSmartChange.jsx","views/Amm/components/Closing.jsx","views/Amm/components/Liquidity.jsx","views/Amm/components/Howdoes.jsx","views/Amm/components/ImpermanentLost.jsx","views/Amm/Amm.jsx","views/Welcome/components/Intro.jsx","views/Welcome/components/Community.jsx","views/Welcome/components/PegaOnSC.jsx","views/Welcome/components/Whatcan.jsx","views/Welcome/components/Whatis.jsx","views/Welcome/components/Roadmap.jsx","views/Welcome/Welcome.jsx","views/Swap/components/HowToTrade.jsx","views/Swap/components/AddLiquid.jsx","views/Swap/Swap.jsx","views/YieldFarming/components/Yield.jsx","views/YieldFarming/YieldFarming.jsx","components/Title/Title.jsx","views/Staking/Staking.jsx","views/NFTs/NFTs.jsx","views/Gaming/Game.jsx","views/Governance/Governance.jsx","App.jsx","index.js"],"names":["UPDATABLE_KEYS","LocalStorageContext","createContext","useLocalStorageContext","useContext","reducer","state","type","payload","key","value","some","k","Error","init","defaultLocalStorage","parsed","JSON","parse","window","localStorage","getItem","Provider","children","useReducer","undefined","dispatch","updateKey","useCallback","useMemo","Updater","useEffect","setItem","stringify","Math","floor","Date","now","ThemeProvider","isDarkMode","toggleDarkMode","useDarkModeManager","darkMode","theme","color","customColor","textColor","panelColor","backgroundColor","uniswapPink","concreteGray","inputBackground","shadowColor","mercuryGray","text1","text2","text3","text4","text5","white","bg1","bg2","bg3","bg4","bg5","bg6","modalBG","advancedBG","onlyLight","divider","primary1","primary2","primary3","primary4","primary5","primaryText1","secondary1","secondary2","secondary3","shadow1","red1","green1","yellow1","yellow2","link","blue","background","GlobalStyle","styled","Text","div","a","attrs","target","rel","createGlobalStyle","client","ApolloClient","HttpLink","uri","cache","InMemoryCache","shouldBatch","blockClient","timeframeOptions","WEEK","MONTH","ALL_TIME","GET_BLOCK","gql","GET_BLOCKS","timestamps","queryString","map","timestamp","ETH_PRICE","block","PairFields","PAIRS_CURRENT","PAIR_DATA","pairAddress","PAIRS_BULK","PAIRS_HISTORICAL_BULK","pairs","pairsString","pair","TokenFields","TOKENS_CURRENT","TOKENS_DYNAMIC","TOKEN_DATA","tokenAddress","Ajv","allErrors","compile","schema","dayjs","extend","utc","ApplicationContext","currency","newTimeFrame","supportedTokens","INITIAL_STATE","CURRENCY","TIME_KEY","update","updateTimeframe","updateSessionStart","updateSupportedTokens","updateLatestBlock","updateHeadBlock","toFormat","_Decimal","BigNumber","set","EXPONENTIAL_AT","getTimestampsForChanges","utcCurrentTime","subtract","startOf","unix","splitQuery","query","localClient","vars","list","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","fetchPolicy","result","data","Object","keys","getBlockFromTimestamp","variables","timestampFrom","timestampTo","blocks","number","getBlocksFromTimestamps","t","push","split","get2DayPercentChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","parseFloat","previousChange","adjustedPercentChange","isNaN","isFinite","getPercentChange","TOKEN_OVERRIDES","name","symbol","updateNameData","token0","id","includes","token1","safeAccess","object","path","reduce","accumulator","currentValue","PairDataContext","usePairDataContext","topPairs","added","address","transactions","txns","chartData","hourlyData","timeWindow","updateTopPairs","updatePairTxns","updateChartData","updateHourlyData","getBulkPairData","pairList","ethPrice","t1","t2","tWeek","b1","b2","bWeek","allPairs","current","Promise","all","oneDayResult","twoDayResult","oneWeekResult","oneDayData","obj","cur","i","twoDayData","oneWeekData","oneDayHistory","newData","twoDayHistory","oneWeekHistory","parseData","pairData","console","log","oneDayBlock","volumeUSD","oneDayVolumeUSD","volumeChangeUSD","untrackedVolumeUSD","oneDayVolumeUntracked","volumeChangeUntracked","oneWeekVolumeUSD","trackedReserveUSD","trackedReserveETH","liquidityChangeUSD","reserveUSD","createdAtBlockNumber","useEthPrice","formattedPairs","getData","weekOfYear","GlobalDataContext","useGlobalDataContext","globalData","daily","weekly","oneDayPrice","ethPriceChange","allTokens","topLps","updateTransactions","updateChart","updateEthPrice","updateAllPairsInUniswap","updateAllTokensInUniswap","updateTopLps","getEthPrice","utcOneDayBack","ethPriceOneDay","priceChangeETH","resultOneDay","currentPrice","bundles","oneDayBackPrice","ethPriceOld","newPrice","priceChange","checkForEthPrice","TokenDataContext","useTokenDataContext","topTokens","token","interval","updateTopTokens","updateTokenTxns","updateAllPairs","updatePriceData","getTopTokens","utcTwoDaysBack","twoDayBlock","tokens","tradeVolumeUSD","txCount","oneDayTxns","txnChange","currentLiquidityUSD","totalLiquidity","derivedETH","oldLiquidityUSD","priceChangeUSD","priceUSD","totalLiquidityUSD","oneDayVolumeETH","tradeVolume","aaveData","bulkResults","UserContext","account","positions","miningPositions","historyData","updatePositions","updateMiningPositions","updateUserSnapshots","updateUserPairReturns","StyledLink","nav","NavLink","Logo","className","to","src","alt","BoxIcon","ListIcon","href","class","GroupNav","SearchPage","Search","method","action","required","maxLength","WrapperWelcomeLink","TitleMenuDropdown","DropdownMenu","StyledDropdownLink","Flex","FlexSwap","BoxSidebar","TitleSide","h3","Nav","addEventListener","scrollY","document","body","classList","add","remove","useState","binance","setBinance","amm","setAmm","welcome","setWelcome","swap","setSwap","style","marginTop","onClick","fontWeight","fontSize","display","justifyContent","alignItems","activeClassName","transform","transition","maxHeight","exact","StyledMainNav","StyledBlock","StyledHover","StyledBg","StyledCard","ButtonMenu","status","onClose","viewBox","width","xmlns","d","StyledButtonMenu","StyleHeader","header","HeaderItem","HeaderTop","section","Header","Status","setStatus","preserveAspectRatio","height","fill","stroke-width","stroke-linecap","stroke-linejoin","stroke","x1","y1","x2","y2","StyledSideBar","SideBar","ContentTitle","TitleChild","title","Box_home","Thumb","ThumPage","p","H2","h2","Home","ToTop","ButtonTotop","isVisible","setIsVisible","toggleVisibility","pageYOffset","scrollTo","top","behavior","StyledPage","TrustWallet","StyledThumb","Introduction","props","BinanceSmartChange","Whatis","Howdoes","Decentralized","Closing","Amm","Liquidity","ImpermanentLost","Community","Roadmap","Intro","Whatcan","ThumbMobile","Howto","AddLiquid","Swap","Yield","YieldFarming","Title","image","Staking","NFTs","Game","Governance","StyledScreen","Layout","BoxContent","App","Welcome","GOOGLE_ANALYTICS_ID","process","REACT_APP_GOOGLE_ANALYTICS_ID","ContextProviders","Updaters","ReactGA","initialize","customBrowserType","isMobile","testMode","debug","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b81b96e8.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\r\n\r\nconst UNISWAP = 'UNISWAP'\r\n\r\nconst VERSION = 'VERSION'\r\nconst CURRENT_VERSION = 0\r\nconst LAST_SAVED = 'LAST_SAVED'\r\nconst DISMISSED_PATHS = 'DISMISSED_PATHS'\r\nconst SAVED_ACCOUNTS = 'SAVED_ACCOUNTS'\r\nconst SAVED_TOKENS = 'SAVED_TOKENS'\r\nconst SAVED_PAIRS = 'SAVED_PAIRS'\r\n\r\nconst DARK_MODE = 'DARK_MODE'\r\n\r\nconst UPDATABLE_KEYS = [DARK_MODE, DISMISSED_PATHS, SAVED_ACCOUNTS, SAVED_PAIRS, SAVED_TOKENS]\r\n\r\nconst UPDATE_KEY = 'UPDATE_KEY'\r\n\r\nconst LocalStorageContext = createContext()\r\n\r\nfunction useLocalStorageContext() {\r\n  return useContext(LocalStorageContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE_KEY: {\r\n      const { key, value } = payload\r\n      if (!UPDATABLE_KEYS.some((k) => k === key)) {\r\n        throw Error(`Unexpected key in LocalStorageContext reducer: '${key}'.`)\r\n      } else {\r\n        return {\r\n          ...state,\r\n          [key]: value,\r\n        }\r\n      }\r\n    }\r\n    default: {\r\n      throw Error(`Unexpected action type in LocalStorageContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nfunction init() {\r\n  const defaultLocalStorage = {\r\n    [VERSION]: CURRENT_VERSION,\r\n    [DARK_MODE]: true,\r\n    [DISMISSED_PATHS]: {},\r\n    [SAVED_ACCOUNTS]: [],\r\n    [SAVED_TOKENS]: {},\r\n    [SAVED_PAIRS]: {},\r\n  }\r\n\r\n  try {\r\n    const parsed = JSON.parse(window.localStorage.getItem(UNISWAP))\r\n    if (parsed[VERSION] !== CURRENT_VERSION) {\r\n      // this is where we could run migration logic\r\n      return defaultLocalStorage\r\n    } else {\r\n      return { ...defaultLocalStorage, ...parsed }\r\n    }\r\n  } catch {\r\n    return defaultLocalStorage\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, undefined, init)\r\n\r\n  const updateKey = useCallback((key, value) => {\r\n    dispatch({ type: UPDATE_KEY, payload: { key, value } })\r\n  }, [])\r\n\r\n  return (\r\n    <LocalStorageContext.Provider value={useMemo(() => [state, { updateKey }], [state, updateKey])}>\r\n      {children}\r\n    </LocalStorageContext.Provider>\r\n  )\r\n}\r\n\r\nexport function Updater() {\r\n  const [state] = useLocalStorageContext()\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(UNISWAP, JSON.stringify({ ...state, [LAST_SAVED]: Math.floor(Date.now() / 1000) }))\r\n  })\r\n\r\n  return null\r\n}\r\n\r\nexport function useDarkModeManager() {\r\n  const [state, { updateKey }] = useLocalStorageContext()\r\n  let isDarkMode = state[DARK_MODE]\r\n  const toggleDarkMode = useCallback(\r\n    (value) => {\r\n      updateKey(DARK_MODE, value === false || value === true ? value : !isDarkMode)\r\n    },\r\n    [updateKey, isDarkMode]\r\n  )\r\n  return [isDarkMode, toggleDarkMode]\r\n}\r\n\r\nexport function usePathDismissed(path) {\r\n  const [state, { updateKey }] = useLocalStorageContext()\r\n  const pathDismissed = state?.[DISMISSED_PATHS]?.[path]\r\n  function dismiss() {\r\n    let newPaths = state?.[DISMISSED_PATHS]\r\n    newPaths[path] = true\r\n    updateKey(DISMISSED_PATHS, newPaths)\r\n  }\r\n\r\n  return [pathDismissed, dismiss]\r\n}\r\n\r\nexport function useSavedAccounts() {\r\n  const [state, { updateKey }] = useLocalStorageContext()\r\n  const savedAccounts = state?.[SAVED_ACCOUNTS]\r\n\r\n  const addAccount = useCallback(\r\n    (account) => {\r\n      updateKey(SAVED_ACCOUNTS, [...(savedAccounts ?? []), account])\r\n    },\r\n    [savedAccounts, updateKey]\r\n  )\r\n\r\n  const removeAccount = useCallback(\r\n    (account) => {\r\n      let index = savedAccounts?.indexOf(account) ?? -1\r\n      if (index > -1) {\r\n        updateKey(SAVED_ACCOUNTS, [\r\n          ...savedAccounts.slice(0, index),\r\n          ...savedAccounts.slice(index + 1, savedAccounts.length),\r\n        ])\r\n      }\r\n    },\r\n    [savedAccounts, updateKey]\r\n  )\r\n\r\n  return [savedAccounts, addAccount, removeAccount]\r\n}\r\n\r\nexport function useSavedPairs() {\r\n  const [state, { updateKey }] = useLocalStorageContext()\r\n  const savedPairs = state?.[SAVED_PAIRS]\r\n\r\n  function addPair(address, token0Address, token1Address, token0Symbol, token1Symbol) {\r\n    let newList = state?.[SAVED_PAIRS]\r\n    newList[address] = {\r\n      address,\r\n      token0Address,\r\n      token1Address,\r\n      token0Symbol,\r\n      token1Symbol,\r\n    }\r\n    updateKey(SAVED_PAIRS, newList)\r\n  }\r\n\r\n  function removePair(address) {\r\n    let newList = state?.[SAVED_PAIRS]\r\n    newList[address] = null\r\n    updateKey(SAVED_PAIRS, newList)\r\n  }\r\n\r\n  return [savedPairs, addPair, removePair]\r\n}\r\n\r\nexport function useSavedTokens() {\r\n  const [state, { updateKey }] = useLocalStorageContext()\r\n  const savedTokens = state?.[SAVED_TOKENS]\r\n\r\n  function addToken(address, symbol) {\r\n    let newList = state?.[SAVED_TOKENS]\r\n    newList[address] = {\r\n      symbol,\r\n    }\r\n    updateKey(SAVED_TOKENS, newList)\r\n  }\r\n\r\n  function removeToken(address) {\r\n    let newList = state?.[SAVED_TOKENS]\r\n    newList[address] = null\r\n    updateKey(SAVED_TOKENS, newList)\r\n  }\r\n\r\n  return [savedTokens, addToken, removeToken]\r\n}\r\n","import React from 'react'\r\nimport { ThemeProvider as StyledComponentsThemeProvider, createGlobalStyle } from 'styled-components'\r\nimport { useDarkModeManager } from '../contexts/LocalStorage'\r\nimport styled from 'styled-components'\r\nimport { Text } from 'rebass'\r\n\r\nexport default function ThemeProvider({ children }) {\r\n  const [darkMode] = useDarkModeManager()\r\n\r\n  return <StyledComponentsThemeProvider theme={theme(darkMode)}>{children}</StyledComponentsThemeProvider>\r\n}\r\n\r\nconst theme = (darkMode, color) => ({\r\n  customColor: color,\r\n  textColor: darkMode ? color : 'black',\r\n\r\n  panelColor: darkMode ? 'rgba(255, 255, 255, 0)' : 'rgba(255, 255, 255, 0)',\r\n  backgroundColor: darkMode ? '#212429' : '#F7F8FA',\r\n\r\n  uniswapPink: darkMode ? '#ff007a' : 'black',\r\n\r\n  concreteGray: darkMode ? '#292C2F' : '#FAFAFA',\r\n  inputBackground: darkMode ? '#1F1F1F' : '#FAFAFA',\r\n  shadowColor: darkMode ? '#000' : '#2F80ED',\r\n  mercuryGray: darkMode ? '#333333' : '#E1E1E1',\r\n\r\n  text1: darkMode ? '#FAFAFA' : '#1F1F1F',\r\n  text2: darkMode ? '#C3C5CB' : '#565A69',\r\n  text3: darkMode ? '#6C7284' : '#888D9B',\r\n  text4: darkMode ? '#565A69' : '#C3C5CB',\r\n  text5: darkMode ? '#2C2F36' : '#EDEEF2',\r\n\r\n  // special case text types\r\n  white: '#FFFFFF',\r\n\r\n  // backgrounds / greys\r\n  bg1: darkMode ? '#212429' : '#FAFAFA',\r\n  bg2: darkMode ? '#2C2F36' : '#F7F8FA',\r\n  bg3: darkMode ? '#40444F' : '#EDEEF2',\r\n  bg4: darkMode ? '#565A69' : '#CED0D9',\r\n  bg5: darkMode ? '#565A69' : '#888D9B',\r\n  bg6: darkMode ? '#000' : '#FFFFFF',\r\n\r\n  //specialty colors\r\n  modalBG: darkMode ? 'rgba(0,0,0,0.85)' : 'rgba(0,0,0,0.6)',\r\n  advancedBG: darkMode ? 'rgba(0,0,0,0.1)' : 'rgba(255,255,255,0.4)',\r\n  onlyLight: darkMode ? '#22242a' : 'transparent',\r\n  divider: darkMode ? 'rgba(43, 43, 43, 0.435)' : 'rgba(43, 43, 43, 0.035)',\r\n\r\n  //primary colors\r\n  primary1: darkMode ? '#2172E5' : '#ff007a',\r\n  primary2: darkMode ? '#3680E7' : '#FF8CC3',\r\n  primary3: darkMode ? '#4D8FEA' : '#FF99C9',\r\n  primary4: darkMode ? '#376bad70' : '#F6DDE8',\r\n  primary5: darkMode ? '#153d6f70' : '#FDEAF1',\r\n\r\n  // color text\r\n  primaryText1: darkMode ? '#6da8ff' : '#ff007a',\r\n\r\n  // secondary colors\r\n  secondary1: darkMode ? '#2172E5' : '#ff007a',\r\n  secondary2: darkMode ? '#17000b26' : '#F6DDE8',\r\n  secondary3: darkMode ? '#17000b26' : '#FDEAF1',\r\n\r\n  shadow1: darkMode ? '#000' : '#2F80ED',\r\n\r\n  // other\r\n  red1: '#FF6871',\r\n  green1: '#27AE60',\r\n  yellow1: '#FFE270',\r\n  yellow2: '#F3841E',\r\n  link: '#2172E5',\r\n  blue: '2f80ed',\r\n\r\n  background: darkMode ? 'black' : `radial-gradient(50% 50% at 50% 50%, #ff007a30 0%, #fff 0%)`,\r\n})\r\n\r\nconst TextWrapper = styled(Text)`\r\n  color: ${({ color, theme }) => theme[color]};\r\n`\r\n\r\nexport const TYPE = {\r\n  main(props) {\r\n    return <TextWrapper fontWeight={500} fontSize={14} color={'text1'} {...props} />\r\n  },\r\n\r\n  body(props) {\r\n    return <TextWrapper fontWeight={400} fontSize={14} color={'text1'} {...props} />\r\n  },\r\n\r\n  small(props) {\r\n    return <TextWrapper fontWeight={500} fontSize={11} color={'text1'} {...props} />\r\n  },\r\n\r\n  header(props) {\r\n    return <TextWrapper fontWeight={600} color={'text1'} {...props} />\r\n  },\r\n\r\n  largeHeader(props) {\r\n    return <TextWrapper fontWeight={500} color={'text1'} fontSize={24} {...props} />\r\n  },\r\n\r\n  light(props) {\r\n    return <TextWrapper fontWeight={400} color={'text3'} fontSize={14} {...props} />\r\n  },\r\n\r\n  pink(props) {\r\n    return <TextWrapper fontWeight={props.faded ? 400 : 600} color={props.faded ? 'text1' : 'text1'} {...props} />\r\n  },\r\n}\r\n\r\nexport const Hover = styled.div`\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nexport const Link = styled.a.attrs({\r\n  target: '_blank',\r\n  rel: 'noopener noreferrer',\r\n})`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.primary1};\r\n  font-weight: 500;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport const ThemedBackground = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  pointer-events: none;\r\n  max-width: 100vw !important;\r\n  height: 200vh;\r\n  mix-blend-mode: color;\r\n  background: ${({ backgroundColor }) =>\r\n    `radial-gradient(50% 50% at 50% 50%, ${backgroundColor} 0%, rgba(255, 255, 255, 0) 100%)`};\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  z-index: 9999;\r\n\r\n  transform: translateY(-110vh);\r\n`\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  @import url('https://rsms.me/inter/inter.css');\r\n  html { font-family: 'Inter', sans-serif; }\r\n  @supports (font-variation-settings: normal) {\r\n    html { font-family: 'Inter var', sans-serif; }\r\n  }\r\n  \r\n  html,\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    font-size: 14px;    \r\n    ${'' /* background-color: ${({ theme }) => theme.bg6}; */}\r\n    background:#fff;\r\n  }\r\n\r\n  .main{\r\n    height:100%;\r\n    margin-top:40px;\r\n  }\r\n  body.fix .side-bar{\r\n    position:fixed;\r\n    top:0;\r\n    z-index:99;\r\n    width:30%;\r\n\r\n    @media (max-width: 1025px){\r\n      width: inherit;\r\n    }\r\n    \r\n  }\r\n\r\n  a {\r\n    text-decoration: none;\r\n\r\n    :hover {\r\n      text-decoration: none\r\n    }\r\n  }\r\n\r\n  \r\n.three-line-legend {\r\n\twidth: 100%;\r\n\theight: 70px;\r\n\tposition: absolute;\r\n\tpadding: 8px;\r\n\tfont-size: 12px;\r\n\tcolor: #20262E;\r\n\tbackground-color: rgba(255, 255, 255, 0.23);\r\n\ttext-align: left;\r\n\tz-index: 10;\r\n  pointer-events: none;\r\n}\r\n\r\n.three-line-legend-dark {\r\n\twidth: 100%;\r\n\theight: 70px;\r\n\tposition: absolute;\r\n\tpadding: 8px;\r\n\tfont-size: 12px;\r\n\tcolor: white;\r\n\tbackground-color: rgba(255, 255, 255, 0.23);\r\n\ttext-align: left;\r\n\tz-index: 10;\r\n  pointer-events: none;\r\n}\r\n\r\n@media screen and (max-width: 800px) {\r\n  .three-line-legend {\r\n    display: none !important;\r\n  }\r\n}\r\n\r\n.tv-lightweight-charts{\r\n  width: 100% !important;\r\n  \r\n\r\n  & > * {\r\n    width: 100% !important;\r\n  }\r\n}\r\n\r\n\r\n  html {\r\n    font-size: 1rem;\r\n    font-variant: none;\r\n    color: 'black';\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    height: 100%;\r\n  }\r\n`\r\n","import { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\n\r\nexport const client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2',\r\n  }),\r\n  cache: new InMemoryCache(),\r\n  shouldBatch: true,\r\n})\r\n\r\nexport const healthClient = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/index-node/graphql',\r\n  }),\r\n  cache: new InMemoryCache(),\r\n  shouldBatch: true,\r\n})\r\n\r\nexport const v1Client = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap',\r\n  }),\r\n  cache: new InMemoryCache(),\r\n  shouldBatch: true,\r\n})\r\n\r\nexport const stakingClient = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/subgraphs/name/way2rach/talisman',\r\n  }),\r\n  cache: new InMemoryCache(),\r\n  shouldBatch: true,\r\n})\r\n\r\nexport const blockClient = new ApolloClient({\r\n  link: new HttpLink({\r\n    uri: 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks',\r\n  }),\r\n  cache: new InMemoryCache(),\r\n})\r\n","export const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\r\n\r\nexport const BUNDLE_ID = '1'\r\n\r\nexport const timeframeOptions = {\r\n  WEEK: '1 week',\r\n  MONTH: '1 month',\r\n  // THREE_MONTHS: '3 months',\r\n  // YEAR: '1 year',\r\n  ALL_TIME: 'All time',\r\n}\r\n\r\n// token list urls to fetch tokens from - use for warnings on tokens and pairs\r\nexport const SUPPORTED_LIST_URLS__NO_ENS = [\r\n  'https://gateway.ipfs.io/ipns/tokens.uniswap.org',\r\n  'https://www.coingecko.com/tokens_list/uniswap/defi_100/v_0_0_0.json',\r\n]\r\n\r\n// hide from overview list\r\nexport const OVERVIEW_TOKEN_BLACKLIST = [\r\n  '0x495c7f3a713870f68f8b418b355c085dfdc412c3',\r\n  '0xc3761eb917cd790b30dad99f6cc5b4ff93c4f9ea',\r\n  '0xe31debd7abff90b06bca21010dd860d8701fd901',\r\n  '0xfc989fbb6b3024de5ca0144dc23c18a063942ac1',\r\n]\r\n\r\n// pair blacklist\r\nexport const PAIR_BLACKLIST = ['0xb6a741f37d6e455ebcc9f17e2c16d0586c3f57a5']\r\n\r\n/**\r\n * For tokens that cause erros on fee calculations\r\n */\r\nexport const FEE_WARNING_TOKENS = ['0xd46ba6d942050d489dbd938a2c909a5d5039a161']\r\n\r\n\r\n\r\n\r\n// PAGINATION PAGE\r\nexport const pagi = [\r\n  '../../home',\r\n  '../../Migrating',\r\n  '../../faq',\r\n  '../../Amm',\r\n  '../../Impermanent',\r\n  '../../Amm/PageChild/Liquidity',\r\n  '../../Amm/PageChild/Swapping',\r\n  '../../Yield',\r\n  '../../Lending',\r\n  '../../Orders'\r\n]\r\n","import gql from 'graphql-tag'\r\nimport { FACTORY_ADDRESS, BUNDLE_ID } from '../constants'\r\n\r\nexport const SUBGRAPH_HEALTH = gql`\r\n  query health {\r\n    indexingStatusForCurrentVersion(subgraphName: \"uniswap/uniswap-v2\") {\r\n      synced\r\n      health\r\n      chains {\r\n        chainHeadBlock {\r\n          number\r\n        }\r\n        latestBlock {\r\n          number\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const V1_DATA_QUERY = gql`\r\n  query uniswap($date: Int!, $date2: Int!) {\r\n    current: uniswap(id: \"1\") {\r\n      totalVolumeUSD\r\n      totalLiquidityUSD\r\n      txCount\r\n    }\r\n    oneDay: uniswapHistoricalDatas(where: { timestamp_lt: $date }, first: 1, orderBy: timestamp, orderDirection: desc) {\r\n      totalVolumeUSD\r\n      totalLiquidityUSD\r\n      txCount\r\n    }\r\n    twoDay: uniswapHistoricalDatas(\r\n      where: { timestamp_lt: $date2 }\r\n      first: 1\r\n      orderBy: timestamp\r\n      orderDirection: desc\r\n    ) {\r\n      totalVolumeUSD\r\n      totalLiquidityUSD\r\n      txCount\r\n    }\r\n    exchanges(first: 200, orderBy: ethBalance, orderDirection: desc) {\r\n      ethBalance\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_BLOCK = gql`\r\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\r\n    blocks(\r\n      first: 1\r\n      orderBy: timestamp\r\n      orderDirection: asc\r\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\r\n    ) {\r\n      id\r\n      number\r\n      timestamp\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_BLOCKS = (timestamps) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += timestamps.map((timestamp) => {\r\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\r\n      timestamp + 600\r\n    } }) {\r\n      number\r\n    }`\r\n  })\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const POSITIONS_BY_BLOCK = (account, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}:liquidityPositions(where: {user: \"${account}\"}, block: { number: ${block.number} }) { \r\n        liquidityTokenBalance\r\n        pair  {\r\n          id\r\n          totalSupply\r\n          reserveUSD\r\n        }\r\n      }\r\n    `\r\n  )\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \r\n        derivedETH\r\n      }\r\n    `\r\n  )\r\n  queryString += ','\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        ethPrice\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const TOP_LPS_PER_PAIRS = gql`\r\n  query lps($pair: Bytes!) {\r\n    liquidityPositions(where: { pair: $pair }, orderBy: liquidityTokenBalance, orderDirection: desc, first: 10) {\r\n      user {\r\n        id\r\n      }\r\n      pair {\r\n        id\r\n      }\r\n      liquidityTokenBalance\r\n    }\r\n  }\r\n`\r\n\r\nexport const HOURLY_PAIR_RATES = (pairAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \r\n        token0Price\r\n        token1Price\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const SHARE_VALUE = (pairAddress, blocks) => {\r\n  let queryString = 'query blocks {'\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      t${block.timestamp}:pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \r\n        reserve0\r\n        reserve1\r\n        reserveUSD\r\n        totalSupply \r\n        token0{\r\n          derivedETH\r\n        }\r\n        token1{\r\n          derivedETH\r\n        }\r\n      }\r\n    `\r\n  )\r\n  queryString += ','\r\n  queryString += blocks.map(\r\n    (block) => `\r\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \r\n        ethPrice\r\n      }\r\n    `\r\n  )\r\n\r\n  queryString += '}'\r\n  return gql(queryString)\r\n}\r\n\r\nexport const ETH_PRICE = (block) => {\r\n  const queryString = block\r\n    ? `\r\n    query bundles {\r\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\r\n        id\r\n        ethPrice\r\n      }\r\n    }\r\n  `\r\n    : ` query bundles {\r\n      bundles(where: { id: ${BUNDLE_ID} }) {\r\n        id\r\n        ethPrice\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const USER = (block, account) => {\r\n  const queryString = `\r\n    query users {\r\n      user(id: \"${account}\", block: {number: ${block}}) {\r\n        liquidityPositions\r\n      }\r\n    }\r\n`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const USER_MINTS_BUNRS_PER_PAIR = gql`\r\n  query events($user: Bytes!, $pair: Bytes!) {\r\n    mints(where: { to: $user, pair: $pair }) {\r\n      amountUSD\r\n      amount0\r\n      amount1\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n        }\r\n        token1 {\r\n          id\r\n        }\r\n      }\r\n    }\r\n    burns(where: { sender: $user, pair: $pair }) {\r\n      amountUSD\r\n      amount0\r\n      amount1\r\n      timestamp\r\n      pair {\r\n        token0 {\r\n          id\r\n        }\r\n        token1 {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const FIRST_SNAPSHOT = gql`\r\n  query snapshots($user: Bytes!) {\r\n    liquidityPositionSnapshots(first: 1, where: { user: $user }, orderBy: timestamp, orderDirection: asc) {\r\n      timestamp\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_HISTORY = gql`\r\n  query snapshots($user: Bytes!, $skip: Int!) {\r\n    liquidityPositionSnapshots(first: 1000, skip: $skip, where: { user: $user }) {\r\n      timestamp\r\n      reserveUSD\r\n      liquidityTokenBalance\r\n      liquidityTokenTotalSupply\r\n      reserve0\r\n      reserve1\r\n      token0PriceUSD\r\n      token1PriceUSD\r\n      pair {\r\n        id\r\n        reserve0\r\n        reserve1\r\n        reserveUSD\r\n        token0 {\r\n          id\r\n        }\r\n        token1 {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_POSITIONS = gql`\r\n  query liquidityPositions($user: Bytes!) {\r\n    liquidityPositions(where: { user: $user }) {\r\n      pair {\r\n        id\r\n        reserve0\r\n        reserve1\r\n        reserveUSD\r\n        token0 {\r\n          id\r\n          symbol\r\n          derivedETH\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n          derivedETH\r\n        }\r\n        totalSupply\r\n      }\r\n      liquidityTokenBalance\r\n    }\r\n  }\r\n`\r\n\r\nexport const USER_TRANSACTIONS = gql`\r\n  query transactions($user: Bytes!) {\r\n    mints(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        id\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burns(orderBy: timestamp, orderDirection: desc, where: { sender: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        id\r\n        token0 {\r\n          symbol\r\n        }\r\n        token1 {\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\r\n      id\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          symbol\r\n        }\r\n        token1 {\r\n          symbol\r\n        }\r\n      }\r\n      amount0In\r\n      amount0Out\r\n      amount1In\r\n      amount1Out\r\n      amountUSD\r\n      to\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_CHART = gql`\r\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!) {\r\n    pairDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { pairAddress: $pairAddress }) {\r\n      id\r\n      date\r\n      dailyVolumeToken0\r\n      dailyVolumeToken1\r\n      dailyVolumeUSD\r\n      reserveUSD\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DAY_DATA = gql`\r\n  query pairDayDatas($pairAddress: Bytes!, $date: Int!) {\r\n    pairDayDatas(first: 1, orderBy: date, orderDirection: desc, where: { pairAddress: $pairAddress, date_lt: $date }) {\r\n      id\r\n      date\r\n      dailyVolumeToken0\r\n      dailyVolumeToken1\r\n      dailyVolumeUSD\r\n      totalSupply\r\n      reserveUSD\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DAY_DATA_BULK = (pairs, startTimestamp) => {\r\n  let pairsString = `[`\r\n  pairs.map((pair) => {\r\n    return (pairsString += `\"${pair}\"`)\r\n  })\r\n  pairsString += ']'\r\n  const queryString = `\r\n    query days {\r\n      pairDayDatas(first: 1000, orderBy: date, orderDirection: asc, where: { pairAddress_in: ${pairsString}, date_gt: ${startTimestamp} }) {\r\n        id\r\n        pairAddress\r\n        date\r\n        dailyVolumeToken0\r\n        dailyVolumeToken1\r\n        dailyVolumeUSD\r\n        totalSupply\r\n        reserveUSD\r\n      }\r\n    } \r\n`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const GLOBAL_CHART = gql`\r\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\r\n    uniswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\r\n      id\r\n      date\r\n      totalVolumeUSD\r\n      dailyVolumeUSD\r\n      dailyVolumeETH\r\n      totalLiquidityUSD\r\n      totalLiquidityETH\r\n    }\r\n  }\r\n`\r\n\r\nexport const GLOBAL_DATA = (block) => {\r\n  const queryString = ` query uniswapFactories {\r\n      uniswapFactories(\r\n       ${block ? `block: { number: ${block}}` : ``} \r\n       where: { id: \"${FACTORY_ADDRESS}\" }) {\r\n        id\r\n        totalVolumeUSD\r\n        totalVolumeETH\r\n        untrackedVolumeUSD\r\n        totalLiquidityUSD\r\n        totalLiquidityETH\r\n        txCount\r\n        pairCount\r\n      }\r\n    }`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const GLOBAL_TXNS = gql`\r\n  query transactions {\r\n    transactions(first: 100, orderBy: timestamp, orderDirection: desc) {\r\n      mints(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        to\r\n        liquidity\r\n        amount0\r\n        amount1\r\n        amountUSD\r\n      }\r\n      burns(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        sender\r\n        liquidity\r\n        amount0\r\n        amount1\r\n        amountUSD\r\n      }\r\n      swaps(orderBy: timestamp, orderDirection: desc) {\r\n        transaction {\r\n          id\r\n          timestamp\r\n        }\r\n        pair {\r\n          token0 {\r\n            id\r\n            symbol\r\n          }\r\n          token1 {\r\n            id\r\n            symbol\r\n          }\r\n        }\r\n        amount0In\r\n        amount0Out\r\n        amount1In\r\n        amount1Out\r\n        amountUSD\r\n        to\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_TOKENS = gql`\r\n  query tokens($skip: Int!) {\r\n    tokens(first: 500, skip: $skip) {\r\n      id\r\n      name\r\n      symbol\r\n      totalLiquidity\r\n    }\r\n  }\r\n`\r\n\r\nexport const TOKEN_SEARCH = gql`\r\n  query tokens($value: String, $id: String) {\r\n    asSymbol: tokens(where: { symbol_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n    asName: tokens(where: { name_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n    asAddress: tokens(where: { id: $id }, orderBy: totalLiquidity, orderDirection: desc) {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_SEARCH = gql`\r\n  query pairs($tokens: [Bytes]!, $id: String) {\r\n    as0: pairs(where: { token0_in: $tokens }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n    as1: pairs(where: { token1_in: $tokens }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n    asAddress: pairs(where: { id: $id }) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const ALL_PAIRS = gql`\r\n  query pairs($skip: Int!) {\r\n    pairs(first: 500, skip: $skip, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      id\r\n      token0 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n      token1 {\r\n        id\r\n        symbol\r\n        name\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst PairFields = `\r\n  fragment PairFields on Pair {\r\n    id\r\n    txCount\r\n    token0 {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n      derivedETH\r\n    }\r\n    token1 {\r\n      id\r\n      symbol\r\n      name\r\n      totalLiquidity\r\n      derivedETH\r\n    }\r\n    reserve0\r\n    reserve1\r\n    reserveUSD\r\n    totalSupply\r\n    trackedReserveETH\r\n    reserveETH\r\n    volumeUSD\r\n    untrackedVolumeUSD\r\n    token0Price\r\n    token1Price\r\n    createdAtTimestamp\r\n  }\r\n`\r\n\r\nexport const PAIRS_CURRENT = gql`\r\n  query pairs {\r\n    pairs(first: 200, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIR_DATA = (pairAddress, block) => {\r\n  const queryString = `\r\n    ${PairFields}\r\n    query pairs {\r\n      pairs(${block ? `block: {number: ${block}}` : ``} where: { id: \"${pairAddress}\"} ) {\r\n        ...PairFields\r\n      }\r\n    }`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const MINING_POSITIONS = (account) => {\r\n  const queryString = `\r\n    query users {\r\n      user(id: \"${account}\") {\r\n        miningPosition {\r\n          id\r\n          user {\r\n            id\r\n          }\r\n          miningPool {\r\n              pair {\r\n                id\r\n                token0\r\n                token1\r\n              }\r\n          }\r\n          balance\r\n        }\r\n      }\r\n    }\r\n`\r\n  return gql(queryString)\r\n}\r\n\r\nexport const PAIRS_BULK = gql`\r\n  ${PairFields}\r\n  query pairs($allPairs: [Bytes]!) {\r\n    pairs(where: { id_in: $allPairs }, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      ...PairFields\r\n    }\r\n  }\r\n`\r\n\r\nexport const PAIRS_HISTORICAL_BULK = (block, pairs) => {\r\n  let pairsString = `[`\r\n  pairs.map((pair) => {\r\n    return (pairsString += `\"${pair}\"`)\r\n  })\r\n  pairsString += ']'\r\n  let queryString = `\r\n  query pairs {\r\n    pairs(first: 200, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\r\n      id\r\n      reserveUSD\r\n      trackedReserveETH\r\n      volumeUSD\r\n      untrackedVolumeUSD\r\n    }\r\n  }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const TOKEN_CHART = gql`\r\n  query tokenDayDatas($tokenAddr: String!, $skip: Int!) {\r\n    tokenDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { token: $tokenAddr }) {\r\n      id\r\n      date\r\n      priceUSD\r\n      totalLiquidityToken\r\n      totalLiquidityUSD\r\n      totalLiquidityETH\r\n      dailyVolumeETH\r\n      dailyVolumeToken\r\n      dailyVolumeUSD\r\n      mostLiquidPairs {\r\n        id\r\n        token0 {\r\n          id\r\n          derivedETH\r\n        }\r\n        token1 {\r\n          id\r\n          derivedETH\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst TokenFields = `\r\n  fragment TokenFields on Token {\r\n    id\r\n    name\r\n    symbol\r\n    derivedETH\r\n    tradeVolume\r\n    tradeVolumeUSD\r\n    untrackedVolumeUSD\r\n    totalLiquidity\r\n    txCount\r\n  }\r\n`\r\n\r\nexport const TOKENS_CURRENT = gql`\r\n  ${TokenFields}\r\n  query tokens {\r\n    tokens(first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n      ...TokenFields\r\n    }\r\n  }\r\n`\r\n\r\nexport const TOKENS_DYNAMIC = (block) => {\r\n  const queryString = `\r\n    ${TokenFields}\r\n    query tokens {\r\n      tokens(block: {number: ${block}} first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\r\n        ...TokenFields\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const TOKEN_DATA = (tokenAddress, block) => {\r\n  const queryString = `\r\n    ${TokenFields}\r\n    query tokens {\r\n      tokens(${block ? `block : {number: ${block}}` : ``} where: {id:\"${tokenAddress}\"}) {\r\n        ...TokenFields\r\n      }\r\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\r\n        id\r\n      }\r\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\r\n        id\r\n      }\r\n    }\r\n  `\r\n  return gql(queryString)\r\n}\r\n\r\nexport const FILTERED_TRANSACTIONS = gql`\r\n  query($allPairs: [Bytes]!) {\r\n    mints(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      to\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    burns(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      sender\r\n      liquidity\r\n      amount0\r\n      amount1\r\n      amountUSD\r\n    }\r\n    swaps(first: 30, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\r\n      transaction {\r\n        id\r\n        timestamp\r\n      }\r\n      id\r\n      pair {\r\n        token0 {\r\n          id\r\n          symbol\r\n        }\r\n        token1 {\r\n          id\r\n          symbol\r\n        }\r\n      }\r\n      amount0In\r\n      amount0Out\r\n      amount1In\r\n      amount1Out\r\n      amountUSD\r\n      to\r\n    }\r\n  }\r\n`\r\n","import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\n\r\n/**\r\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\r\n * @param uri to convert to fetch-able http url\r\n */\r\nfunction uriToHttp(uri: string): string[] {\r\n  const protocol = uri.split(':')[0].toLowerCase()\r\n  switch (protocol) {\r\n    case 'https':\r\n      return [uri]\r\n    case 'http':\r\n      return ['https' + uri.substr(4), uri]\r\n    case 'ipfs':\r\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\r\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\r\n    case 'ipns':\r\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\r\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\r\n    default:\r\n      return []\r\n  }\r\n}\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n */\r\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\r\n  const urls = uriToHttp(listUrl)\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.debug('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n","import React, { createContext, useContext, useReducer, useMemo, useCallback, useState, useEffect } from 'react'\r\nimport { timeframeOptions, SUPPORTED_LIST_URLS__NO_ENS } from '../constants'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport getTokenList from '../utils/tokenLists'\r\nimport { healthClient } from '../apollo/client'\r\nimport { SUBGRAPH_HEALTH } from '../apollo/queries'\r\ndayjs.extend(utc)\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TIMEFRAME = 'UPDATE_TIMEFRAME'\r\nconst UPDATE_SESSION_START = 'UPDATE_SESSION_START'\r\nconst UPDATED_SUPPORTED_TOKENS = 'UPDATED_SUPPORTED_TOKENS'\r\nconst UPDATE_LATEST_BLOCK = 'UPDATE_LATEST_BLOCK'\r\nconst UPDATE_HEAD_BLOCK = 'UPDATE_HEAD_BLOCK'\r\n\r\nconst SUPPORTED_TOKENS = 'SUPPORTED_TOKENS'\r\nconst TIME_KEY = 'TIME_KEY'\r\nconst CURRENCY = 'CURRENCY'\r\nconst SESSION_START = 'SESSION_START'\r\nconst LATEST_BLOCK = 'LATEST_BLOCK'\r\nconst HEAD_BLOCK = 'HEAD_BLOCK'\r\n\r\nconst ApplicationContext = createContext()\r\n\r\nfunction useApplicationContext() {\r\n  return useContext(ApplicationContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { currency } = payload\r\n      return {\r\n        ...state,\r\n        [CURRENCY]: currency,\r\n      }\r\n    }\r\n    case UPDATE_TIMEFRAME: {\r\n      const { newTimeFrame } = payload\r\n      return {\r\n        ...state,\r\n        [TIME_KEY]: newTimeFrame,\r\n      }\r\n    }\r\n    case UPDATE_SESSION_START: {\r\n      const { timestamp } = payload\r\n      return {\r\n        ...state,\r\n        [SESSION_START]: timestamp,\r\n      }\r\n    }\r\n\r\n    case UPDATE_LATEST_BLOCK: {\r\n      const { block } = payload\r\n      return {\r\n        ...state,\r\n        [LATEST_BLOCK]: block,\r\n      }\r\n    }\r\n\r\n    case UPDATE_HEAD_BLOCK: {\r\n      const { block } = payload\r\n      return {\r\n        ...state,\r\n        [HEAD_BLOCK]: block,\r\n      }\r\n    }\r\n\r\n    case UPDATED_SUPPORTED_TOKENS: {\r\n      const { supportedTokens } = payload\r\n      return {\r\n        ...state,\r\n        [SUPPORTED_TOKENS]: supportedTokens,\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  CURRENCY: 'USD',\r\n  TIME_KEY: timeframeOptions.ALL_TIME,\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\r\n  const update = useCallback((currency) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        currency,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  // global time window for charts - see timeframe options in constants\r\n  const updateTimeframe = useCallback((newTimeFrame) => {\r\n    dispatch({\r\n      type: UPDATE_TIMEFRAME,\r\n      payload: {\r\n        newTimeFrame,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  // used for refresh button\r\n  const updateSessionStart = useCallback((timestamp) => {\r\n    dispatch({\r\n      type: UPDATE_SESSION_START,\r\n      payload: {\r\n        timestamp,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateSupportedTokens = useCallback((supportedTokens) => {\r\n    dispatch({\r\n      type: UPDATED_SUPPORTED_TOKENS,\r\n      payload: {\r\n        supportedTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateLatestBlock = useCallback((block) => {\r\n    dispatch({\r\n      type: UPDATE_LATEST_BLOCK,\r\n      payload: {\r\n        block,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateHeadBlock = useCallback((block) => {\r\n    dispatch({\r\n      type: UPDATE_HEAD_BLOCK,\r\n      payload: {\r\n        block,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <ApplicationContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateSessionStart,\r\n            updateTimeframe,\r\n            updateSupportedTokens,\r\n            updateLatestBlock,\r\n            updateHeadBlock,\r\n          },\r\n        ],\r\n        [state, update, updateTimeframe, updateSessionStart, updateSupportedTokens, updateLatestBlock, updateHeadBlock]\r\n      )}\r\n    >\r\n      {children}\r\n    </ApplicationContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useLatestBlocks() {\r\n  const [state, { updateLatestBlock, updateHeadBlock }] = useApplicationContext()\r\n\r\n  const latestBlock = state?.[LATEST_BLOCK]\r\n  const headBlock = state?.[HEAD_BLOCK]\r\n\r\n  useEffect(() => {\r\n    async function fetch() {\r\n      healthClient\r\n        .query({\r\n          query: SUBGRAPH_HEALTH,\r\n        })\r\n        .then((res) => {\r\n          const syncedBlock = res.data.indexingStatusForCurrentVersion.chains[0].latestBlock.number\r\n          const headBlock = res.data.indexingStatusForCurrentVersion.chains[0].chainHeadBlock.number\r\n          if (syncedBlock && headBlock) {\r\n            updateLatestBlock(syncedBlock)\r\n            updateHeadBlock(headBlock)\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.log(e)\r\n        })\r\n    }\r\n    if (!latestBlock) {\r\n      fetch()\r\n    }\r\n  }, [latestBlock, updateHeadBlock, updateLatestBlock])\r\n\r\n  return [latestBlock, headBlock]\r\n}\r\n\r\nexport function useCurrentCurrency() {\r\n  const [state, { update }] = useApplicationContext()\r\n  const toggleCurrency = useCallback(() => {\r\n    if (state.currency === 'ETH') {\r\n      update('USD')\r\n    } else {\r\n      update('ETH')\r\n    }\r\n  }, [state, update])\r\n  return [state[CURRENCY], toggleCurrency]\r\n}\r\n\r\nexport function useTimeframe() {\r\n  const [state, { updateTimeframe }] = useApplicationContext()\r\n  const activeTimeframe = state?.[TIME_KEY]\r\n  return [activeTimeframe, updateTimeframe]\r\n}\r\n\r\nexport function useStartTimestamp() {\r\n  const [activeWindow] = useTimeframe()\r\n  const [startDateTimestamp, setStartDateTimestamp] = useState()\r\n\r\n  // monitor the old date fetched\r\n  useEffect(() => {\r\n    let startTime =\r\n      dayjs\r\n        .utc()\r\n        .subtract(\r\n          1,\r\n          activeWindow === timeframeOptions.week ? 'week' : activeWindow === timeframeOptions.ALL_TIME ? 'year' : 'year'\r\n        )\r\n        .startOf('day')\r\n        .unix() - 1\r\n    // if we find a new start time less than the current startrtime - update oldest pooint to fetch\r\n    setStartDateTimestamp(startTime)\r\n  }, [activeWindow, startDateTimestamp])\r\n\r\n  return startDateTimestamp\r\n}\r\n\r\n// keep track of session length for refresh ticker\r\nexport function useSessionStart() {\r\n  const [state, { updateSessionStart }] = useApplicationContext()\r\n  const sessionStart = state?.[SESSION_START]\r\n\r\n  useEffect(() => {\r\n    if (!sessionStart) {\r\n      updateSessionStart(Date.now())\r\n    }\r\n  })\r\n\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    let interval = null\r\n    interval = setInterval(() => {\r\n      setSeconds(Date.now() - sessionStart ?? Date.now())\r\n    }, 1000)\r\n\r\n    return () => clearInterval(interval)\r\n  }, [seconds, sessionStart])\r\n\r\n  return parseInt(seconds / 1000)\r\n}\r\n\r\nexport function useListedTokens() {\r\n  const [state, { updateSupportedTokens }] = useApplicationContext()\r\n  const supportedTokens = state?.[SUPPORTED_TOKENS]\r\n\r\n  useEffect(() => {\r\n    async function fetchList() {\r\n      const allFetched = await SUPPORTED_LIST_URLS__NO_ENS.reduce(async (fetchedTokens, url) => {\r\n        const tokensSoFar = await fetchedTokens\r\n        const newTokens = await getTokenList(url)\r\n        return Promise.resolve([...tokensSoFar, ...newTokens.tokens])\r\n      }, Promise.resolve([]))\r\n      let formatted = allFetched?.map((t) => t.address.toLowerCase())\r\n      updateSupportedTokens(formatted)\r\n    }\r\n    if (!supportedTokens) {\r\n      fetchList()\r\n    }\r\n  }, [updateSupportedTokens, supportedTokens])\r\n\r\n  return supportedTokens\r\n}\r\n","import React from 'react'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport dayjs from 'dayjs'\r\nimport { ethers } from 'ethers'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport { client, blockClient } from '../apollo/client'\r\nimport { GET_BLOCK, GET_BLOCKS, SHARE_VALUE } from '../apollo/queries'\r\nimport { Text } from 'rebass'\r\nimport _Decimal from 'decimal.js-light'\r\nimport toFormat from 'toformat'\r\nimport { timeframeOptions } from '../constants'\r\nimport Numeral from 'numeral'\r\n\r\n// format libraries\r\nconst Decimal = toFormat(_Decimal)\r\nBigNumber.set({ EXPONENTIAL_AT: 50 })\r\ndayjs.extend(utc)\r\n\r\nexport function getTimeframe(timeWindow) {\r\n  const utcEndTime = dayjs.utc()\r\n  // based on window, get starttime\r\n  let utcStartTime\r\n  switch (timeWindow) {\r\n    case timeframeOptions.WEEK:\r\n      utcStartTime = utcEndTime.subtract(1, 'week').endOf('day').unix() - 1\r\n      break\r\n    case timeframeOptions.MONTH:\r\n      utcStartTime = utcEndTime.subtract(1, 'month').endOf('day').unix() - 1\r\n      break\r\n    case timeframeOptions.ALL_TIME:\r\n      utcStartTime = utcEndTime.subtract(1, 'year').endOf('day').unix() - 1\r\n      break\r\n    default:\r\n      utcStartTime = utcEndTime.subtract(1, 'year').startOf('year').unix() - 1\r\n      break\r\n  }\r\n  return utcStartTime\r\n}\r\n\r\nexport function getPoolLink(token0Address, token1Address = null, remove = false) {\r\n  if (!token1Address) {\r\n    return (\r\n      `https://uniswap.exchange/` +\r\n      (remove ? `remove` : `add`) +\r\n      `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${'ETH'}`\r\n    )\r\n  } else {\r\n    return (\r\n      `https://uniswap.exchange/` +\r\n      (remove ? `remove` : `add`) +\r\n      `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${\r\n        token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address\r\n      }`\r\n    )\r\n  }\r\n}\r\n\r\nexport function getSwapLink(token0Address, token1Address = null) {\r\n  if (!token1Address) {\r\n    return `https://uniswap.exchange/swap?inputCurrency=${token0Address}`\r\n  } else {\r\n    return `https://uniswap.exchange/swap?inputCurrency=${\r\n      token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address\r\n    }&outputCurrency=${token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address}`\r\n  }\r\n}\r\n\r\nexport function getMiningPoolLink(token0Address) {\r\n  return `https://app.uniswap.org/#/uni/ETH/${token0Address}`\r\n}\r\n\r\nexport function getUniswapAppLink(linkVariable) {\r\n  let baseUniswapUrl = 'https://app.uniswap.org/#/uni'\r\n  if (!linkVariable) {\r\n    return baseUniswapUrl\r\n  }\r\n\r\n  return `${baseUniswapUrl}/ETH/${linkVariable}`\r\n}\r\n\r\nexport function localNumber(val) {\r\n  return Numeral(val).format('0,0')\r\n}\r\n\r\nexport const toNiceDate = (date) => {\r\n  let x = dayjs.utc(dayjs.unix(date)).format('MMM DD')\r\n  return x\r\n}\r\n\r\nexport const toWeeklyDate = (date) => {\r\n  const formatted = dayjs.utc(dayjs.unix(date))\r\n  date = new Date(formatted)\r\n  const day = new Date(formatted).getDay()\r\n  var lessDays = day === 6 ? 0 : day + 1\r\n  var wkStart = new Date(new Date(date).setDate(date.getDate() - lessDays))\r\n  var wkEnd = new Date(new Date(wkStart).setDate(wkStart.getDate() + 6))\r\n  return dayjs.utc(wkStart).format('MMM DD') + ' - ' + dayjs.utc(wkEnd).format('MMM DD')\r\n}\r\n\r\nexport function getTimestampsForChanges() {\r\n  const utcCurrentTime = dayjs()\r\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\r\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix()\r\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix()\r\n  return [t1, t2, tWeek]\r\n}\r\n\r\nexport async function splitQuery(query, localClient, vars, list, skipCount = 100) {\r\n  let fetchedData = {}\r\n  let allFound = false\r\n  let skip = 0\r\n\r\n  while (!allFound) {\r\n    let end = list.length\r\n    if (skip + skipCount < list.length) {\r\n      end = skip + skipCount\r\n    }\r\n    let sliced = list.slice(skip, end)\r\n    let result = await localClient.query({\r\n      query: query(...vars, sliced),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    fetchedData = {\r\n      ...fetchedData,\r\n      ...result.data,\r\n    }\r\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\r\n      allFound = true\r\n    } else {\r\n      skip += skipCount\r\n    }\r\n  }\r\n\r\n  return fetchedData\r\n}\r\n\r\n/**\r\n * @notice Fetches first block after a given timestamp\r\n * @dev Query speed is optimized by limiting to a 600-second period\r\n * @param {Int} timestamp in seconds\r\n */\r\nexport async function getBlockFromTimestamp(timestamp) {\r\n  let result = await blockClient.query({\r\n    query: GET_BLOCK,\r\n    variables: {\r\n      timestampFrom: timestamp,\r\n      timestampTo: timestamp + 600,\r\n    },\r\n    fetchPolicy: 'cache-first',\r\n  })\r\n  return result?.data?.blocks?.[0]?.number\r\n}\r\n\r\n/**\r\n * @notice Fetches block objects for an array of timestamps.\r\n * @dev blocks are returned in chronological order (ASC) regardless of input.\r\n * @dev blocks are returned at string representations of Int\r\n * @dev timestamps are returns as they were provided; not the block time.\r\n * @param {Array} timestamps\r\n */\r\nexport async function getBlocksFromTimestamps(timestamps, skipCount = 500) {\r\n  if (timestamps?.length === 0) {\r\n    return []\r\n  }\r\n\r\n  let fetchedData = await splitQuery(GET_BLOCKS, blockClient, [], timestamps, skipCount)\r\n\r\n  let blocks = []\r\n  if (fetchedData) {\r\n    for (var t in fetchedData) {\r\n      if (fetchedData[t].length > 0) {\r\n        blocks.push({\r\n          timestamp: t.split('t')[1],\r\n          number: fetchedData[t][0]['number'],\r\n        })\r\n      }\r\n    }\r\n  }\r\n  return blocks\r\n}\r\n\r\nexport async function getLiquidityTokenBalanceOvertime(account, timestamps) {\r\n  // get blocks based on timestamps\r\n  const blocks = await getBlocksFromTimestamps(timestamps)\r\n\r\n  // get historical share values with time travel queries\r\n  let result = await client.query({\r\n    query: SHARE_VALUE(account, blocks),\r\n    fetchPolicy: 'cache-first',\r\n  })\r\n\r\n  let values = []\r\n  for (var row in result?.data) {\r\n    let timestamp = row.split('t')[1]\r\n    if (timestamp) {\r\n      values.push({\r\n        timestamp,\r\n        balance: 0,\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @notice Example query using time travel queries\r\n * @dev TODO - handle scenario where blocks are not available for a timestamps (e.g. current time)\r\n * @param {String} pairAddress\r\n * @param {Array} timestamps\r\n */\r\nexport async function getShareValueOverTime(pairAddress, timestamps) {\r\n  if (!timestamps) {\r\n    const utcCurrentTime = dayjs()\r\n    const utcSevenDaysBack = utcCurrentTime.subtract(8, 'day').unix()\r\n    timestamps = getTimestampRange(utcSevenDaysBack, 86400, 7)\r\n  }\r\n\r\n  // get blocks based on timestamps\r\n  const blocks = await getBlocksFromTimestamps(timestamps)\r\n\r\n  // get historical share values with time travel queries\r\n  let result = await client.query({\r\n    query: SHARE_VALUE(pairAddress, blocks),\r\n    fetchPolicy: 'cache-first',\r\n  })\r\n\r\n  let values = []\r\n  for (var row in result?.data) {\r\n    let timestamp = row.split('t')[1]\r\n    let sharePriceUsd = parseFloat(result.data[row]?.reserveUSD) / parseFloat(result.data[row]?.totalSupply)\r\n    if (timestamp) {\r\n      values.push({\r\n        timestamp,\r\n        sharePriceUsd,\r\n        totalSupply: result.data[row].totalSupply,\r\n        reserve0: result.data[row].reserve0,\r\n        reserve1: result.data[row].reserve1,\r\n        reserveUSD: result.data[row].reserveUSD,\r\n        token0DerivedETH: result.data[row].token0.derivedETH,\r\n        token1DerivedETH: result.data[row].token1.derivedETH,\r\n        roiUsd: values && values[0] ? sharePriceUsd / values[0]['sharePriceUsd'] : 1,\r\n        ethPrice: 0,\r\n        token0PriceUSD: 0,\r\n        token1PriceUSD: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  // add eth prices\r\n  let index = 0\r\n  for (var brow in result?.data) {\r\n    let timestamp = brow.split('b')[1]\r\n    if (timestamp) {\r\n      values[index].ethPrice = result.data[brow].ethPrice\r\n      values[index].token0PriceUSD = result.data[brow].ethPrice * values[index].token0DerivedETH\r\n      values[index].token1PriceUSD = result.data[brow].ethPrice * values[index].token1DerivedETH\r\n      index += 1\r\n    }\r\n  }\r\n\r\n  return values\r\n}\r\n\r\n/**\r\n * @notice Creates an evenly-spaced array of timestamps\r\n * @dev Periods include a start and end timestamp. For example, n periods are defined by n+1 timestamps.\r\n * @param {Int} timestamp_from in seconds\r\n * @param {Int} period_length in seconds\r\n * @param {Int} periods\r\n */\r\nexport function getTimestampRange(timestamp_from, period_length, periods) {\r\n  let timestamps = []\r\n  for (let i = 0; i <= periods; i++) {\r\n    timestamps.push(timestamp_from + i * period_length)\r\n  }\r\n  return timestamps\r\n}\r\n\r\nexport const toNiceDateYear = (date) => dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY')\r\n\r\nexport const isAddress = (value) => {\r\n  try {\r\n    return ethers.utils.getAddress(value.toLowerCase())\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\nexport const toK = (num) => {\r\n  return Numeral(num).format('0.[00]a')\r\n}\r\n\r\nexport const setThemeColor = (theme) => document.documentElement.style.setProperty('--c-token', theme || '#333333')\r\n\r\nexport const Big = (number) => new BigNumber(number)\r\n\r\nexport const urls = {\r\n  showTransaction: (tx) => `https://etherscan.io/tx/${tx}/`,\r\n  showAddress: (address) => `https://www.etherscan.io/address/${address}/`,\r\n  showToken: (address) => `https://www.etherscan.io/token/${address}/`,\r\n  showBlock: (block) => `https://etherscan.io/block/${block}/`,\r\n}\r\n\r\nexport const formatTime = (unix) => {\r\n  const now = dayjs()\r\n  const timestamp = dayjs.unix(unix)\r\n\r\n  const inSeconds = now.diff(timestamp, 'second')\r\n  const inMinutes = now.diff(timestamp, 'minute')\r\n  const inHours = now.diff(timestamp, 'hour')\r\n  const inDays = now.diff(timestamp, 'day')\r\n\r\n  if (inHours >= 24) {\r\n    return `${inDays} ${inDays === 1 ? 'day' : 'days'} ago`\r\n  } else if (inMinutes >= 60) {\r\n    return `${inHours} ${inHours === 1 ? 'hour' : 'hours'} ago`\r\n  } else if (inSeconds >= 60) {\r\n    return `${inMinutes} ${inMinutes === 1 ? 'minute' : 'minutes'} ago`\r\n  } else {\r\n    return `${inSeconds} ${inSeconds === 1 ? 'second' : 'seconds'} ago`\r\n  }\r\n}\r\n\r\nexport const formatNumber = (num) => {\r\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\r\n}\r\n\r\n// using a currency library here in case we want to add more in future\r\nexport const formatDollarAmount = (num, digits) => {\r\n  const formatter = new Intl.NumberFormat([], {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: digits,\r\n    maximumFractionDigits: digits,\r\n  })\r\n  return formatter.format(num)\r\n}\r\n\r\nexport const toSignificant = (number, significantDigits) => {\r\n  Decimal.set({ precision: significantDigits + 1, rounding: Decimal.ROUND_UP })\r\n  const updated = new Decimal(number).toSignificantDigits(significantDigits)\r\n  return updated.toFormat(updated.decimalPlaces(), { groupSeparator: '' })\r\n}\r\n\r\nexport const formattedNum = (number, usd = false, acceptNegatives = false) => {\r\n  if (isNaN(number) || number === '' || number === undefined) {\r\n    return usd ? '$0' : 0\r\n  }\r\n  let num = parseFloat(number)\r\n\r\n  if (num > 500000000) {\r\n    return (usd ? '$' : '') + toK(num.toFixed(0), true)\r\n  }\r\n\r\n  if (num === 0) {\r\n    if (usd) {\r\n      return '$0'\r\n    }\r\n    return 0\r\n  }\r\n\r\n  if (num < 0.0001 && num > 0) {\r\n    return usd ? '< $0.0001' : '< 0.0001'\r\n  }\r\n\r\n  if (num > 1000) {\r\n    return usd ? formatDollarAmount(num, 0) : Number(parseFloat(num).toFixed(0)).toLocaleString()\r\n  }\r\n\r\n  if (usd) {\r\n    if (num < 0.1) {\r\n      return formatDollarAmount(num, 4)\r\n    } else {\r\n      return formatDollarAmount(num, 2)\r\n    }\r\n  }\r\n\r\n  return Number(parseFloat(num).toFixed(5)).toLocaleString()\r\n}\r\n\r\nexport function rawPercent(percentRaw) {\r\n  let percent = parseFloat(percentRaw * 100)\r\n  if (!percent || percent === 0) {\r\n    return '0%'\r\n  }\r\n  if (percent < 1 && percent > 0) {\r\n    return '< 1%'\r\n  }\r\n  return percent.toFixed(0) + '%'\r\n}\r\n\r\nexport function formattedPercent(percent, useBrackets = false) {\r\n  percent = parseFloat(percent)\r\n  if (!percent || percent === 0) {\r\n    return <Text fontWeight={500}>0%</Text>\r\n  }\r\n\r\n  if (percent < 0.0001 && percent > 0) {\r\n    return (\r\n      <Text fontWeight={500} color=\"green\">\r\n        {'< 0.0001%'}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  if (percent < 0 && percent > -0.0001) {\r\n    return (\r\n      <Text fontWeight={500} color=\"red\">\r\n        {'< 0.0001%'}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  let fixedPercent = percent.toFixed(2)\r\n  if (fixedPercent === '0.00') {\r\n    return '0%'\r\n  }\r\n  if (fixedPercent > 0) {\r\n    if (fixedPercent > 100) {\r\n      return <Text fontWeight={500} color=\"green\">{`+${percent?.toFixed(0).toLocaleString()}%`}</Text>\r\n    } else {\r\n      return <Text fontWeight={500} color=\"green\">{`+${fixedPercent}%`}</Text>\r\n    }\r\n  } else {\r\n    return <Text fontWeight={500} color=\"red\">{`${fixedPercent}%`}</Text>\r\n  }\r\n}\r\n\r\n/**\r\n * gets the amoutn difference plus the % change in change itself (second order change)\r\n * @param {*} valueNow\r\n * @param {*} value24HoursAgo\r\n * @param {*} value48HoursAgo\r\n */\r\nexport const get2DayPercentChange = (valueNow, value24HoursAgo, value48HoursAgo) => {\r\n  // get volume info for both 24 hour periods\r\n  let currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\r\n  let previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\r\n\r\n  const adjustedPercentChange = (parseFloat(currentChange - previousChange) / parseFloat(previousChange)) * 100\r\n\r\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\r\n    return [currentChange, 0]\r\n  }\r\n  return [currentChange, adjustedPercentChange]\r\n}\r\n\r\n/**\r\n * get standard percent change between two values\r\n * @param {*} valueNow\r\n * @param {*} value24HoursAgo\r\n */\r\nexport const getPercentChange = (valueNow, value24HoursAgo) => {\r\n  const adjustedPercentChange =\r\n    ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\r\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\r\n    return 0\r\n  }\r\n  return adjustedPercentChange\r\n}\r\n\r\nexport function isEquivalent(a, b) {\r\n  var aProps = Object.getOwnPropertyNames(a)\r\n  var bProps = Object.getOwnPropertyNames(b)\r\n  if (aProps.length !== bProps.length) {\r\n    return false\r\n  }\r\n  for (var i = 0; i < aProps.length; i++) {\r\n    var propName = aProps[i]\r\n    if (a[propName] !== b[propName]) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n","interface BasicData {\r\n  token0?: {\r\n    id: string\r\n    name: string\r\n    symbol: string\r\n  }\r\n  token1?: {\r\n    id: string\r\n    name: string\r\n    symbol: string\r\n  }\r\n}\r\n\r\n// Override data return from graph - usually because proxy token has changed\r\n// names since entitiy was created in subgraph\r\n// keys are lowercase token addresses <--------\r\nconst TOKEN_OVERRIDES: { [address: string]: { name: string; symbol: string } } = {\r\n  '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': {\r\n    name: 'Ether (Wrapped)',\r\n    symbol: 'ETH',\r\n  },\r\n  '0x1416946162b1c2c871a73b07e932d2fb6c932069': {\r\n    name: 'Energi',\r\n    symbol: 'NRGE',\r\n  },\r\n}\r\n\r\n// override tokens with incorrect symbol or names\r\nexport function updateNameData(data: BasicData): BasicData | undefined {\r\n  if (data?.token0?.id && Object.keys(TOKEN_OVERRIDES).includes(data.token0.id)) {\r\n    data.token0.name = TOKEN_OVERRIDES[data.token0.id].name\r\n    data.token0.symbol = TOKEN_OVERRIDES[data.token0.id].symbol\r\n  }\r\n\r\n  if (data?.token1?.id && Object.keys(TOKEN_OVERRIDES).includes(data.token1.id)) {\r\n    data.token1.name = TOKEN_OVERRIDES[data.token1.id].name\r\n    data.token1.symbol = TOKEN_OVERRIDES[data.token1.id].symbol\r\n  }\r\n\r\n  return data\r\n}\r\n","import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\r\n\r\nimport { client } from '../apollo/client'\r\nimport {\r\n  PAIR_DATA,\r\n  PAIR_CHART,\r\n  FILTERED_TRANSACTIONS,\r\n  PAIRS_CURRENT,\r\n  PAIRS_BULK,\r\n  PAIRS_HISTORICAL_BULK,\r\n  HOURLY_PAIR_RATES,\r\n} from '../apollo/queries'\r\n\r\nimport { useEthPrice } from './GlobalData'\r\n\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\n\r\nimport {\r\n  getPercentChange,\r\n  get2DayPercentChange,\r\n  isAddress,\r\n  getBlocksFromTimestamps,\r\n  getTimestampsForChanges,\r\n  splitQuery,\r\n} from '../utils'\r\nimport { timeframeOptions } from '../constants'\r\nimport { useLatestBlocks } from './Application'\r\nimport { updateNameData } from '../utils/data'\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_PAIR_TXNS = 'UPDATE_PAIR_TXNS'\r\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA'\r\nconst UPDATE_TOP_PAIRS = 'UPDATE_TOP_PAIRS'\r\nconst UPDATE_HOURLY_DATA = 'UPDATE_HOURLY_DATA'\r\n\r\ndayjs.extend(utc)\r\n\r\nexport function safeAccess(object, path) {\r\n  return object\r\n    ? path.reduce(\r\n        (accumulator, currentValue) => (accumulator && accumulator[currentValue] ? accumulator[currentValue] : null),\r\n        object\r\n      )\r\n    : null\r\n}\r\n\r\nconst PairDataContext = createContext()\r\n\r\nfunction usePairDataContext() {\r\n  return useContext(PairDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { pairAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [pairAddress]: {\r\n          ...state?.[pairAddress],\r\n          ...data,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOP_PAIRS: {\r\n      const { topPairs } = payload\r\n      let added = {}\r\n      topPairs.map((pair) => {\r\n        return (added[pair.id] = pair)\r\n      })\r\n      return {\r\n        ...state,\r\n        ...added,\r\n      }\r\n    }\r\n\r\n    case UPDATE_PAIR_TXNS: {\r\n      const { address, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...(safeAccess(state, [address]) || {}),\r\n          txns: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_CHART_DATA: {\r\n      const { address, chartData } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...(safeAccess(state, [address]) || {}),\r\n          chartData,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_HOURLY_DATA: {\r\n      const { address, hourlyData, timeWindow } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          hourlyData: {\r\n            ...state?.[address]?.hourlyData,\r\n            [timeWindow]: hourlyData,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n\r\n  // update pair specific data\r\n  const update = useCallback((pairAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        pairAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopPairs = useCallback((topPairs) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_PAIRS,\r\n      payload: {\r\n        topPairs,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updatePairTxns = useCallback((address, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_PAIR_TXNS,\r\n      payload: { address, transactions },\r\n    })\r\n  }, [])\r\n\r\n  const updateChartData = useCallback((address, chartData) => {\r\n    dispatch({\r\n      type: UPDATE_CHART_DATA,\r\n      payload: { address, chartData },\r\n    })\r\n  }, [])\r\n\r\n  const updateHourlyData = useCallback((address, hourlyData, timeWindow) => {\r\n    dispatch({\r\n      type: UPDATE_HOURLY_DATA,\r\n      payload: { address, hourlyData, timeWindow },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <PairDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updatePairTxns,\r\n            updateChartData,\r\n            updateTopPairs,\r\n            updateHourlyData,\r\n          },\r\n        ],\r\n        [state, update, updatePairTxns, updateChartData, updateTopPairs, updateHourlyData]\r\n      )}\r\n    >\r\n      {children}\r\n    </PairDataContext.Provider>\r\n  )\r\n}\r\n\r\nasync function getBulkPairData(pairList, ethPrice) {\r\n  const [t1, t2, tWeek] = getTimestampsForChanges()\r\n  let [{ number: b1 }, { number: b2 }, { number: bWeek }] = await getBlocksFromTimestamps([t1, t2, tWeek])\r\n\r\n  try {\r\n    let current = await client.query({\r\n      query: PAIRS_BULK,\r\n      variables: {\r\n        allPairs: pairList,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let [oneDayResult, twoDayResult, oneWeekResult] = await Promise.all(\r\n      [b1, b2, bWeek].map(async (block) => {\r\n        let result = client.query({\r\n          query: PAIRS_HISTORICAL_BULK(block, pairList),\r\n          fetchPolicy: 'cache-first',\r\n        })\r\n        return result\r\n      })\r\n    )\r\n\r\n    let oneDayData = oneDayResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let twoDayData = twoDayResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let oneWeekData = oneWeekResult?.data?.pairs.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let pairData = await Promise.all(\r\n      current &&\r\n        current.data.pairs.map(async (pair) => {\r\n          let data = pair\r\n          let oneDayHistory = oneDayData?.[pair.id]\r\n          if (!oneDayHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, b1),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            oneDayHistory = newData.data.pairs[0]\r\n          }\r\n          let twoDayHistory = twoDayData?.[pair.id]\r\n          if (!twoDayHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, b2),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            twoDayHistory = newData.data.pairs[0]\r\n          }\r\n          let oneWeekHistory = oneWeekData?.[pair.id]\r\n          if (!oneWeekHistory) {\r\n            let newData = await client.query({\r\n              query: PAIR_DATA(pair.id, bWeek),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            oneWeekHistory = newData.data.pairs[0]\r\n          }\r\n          data = parseData(data, oneDayHistory, twoDayHistory, oneWeekHistory, ethPrice, b1)\r\n          return data\r\n        })\r\n    )\r\n    return pairData\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nfunction parseData(data, oneDayData, twoDayData, oneWeekData, ethPrice, oneDayBlock) {\r\n  // get volume changes\r\n  const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n    data?.volumeUSD,\r\n    oneDayData?.volumeUSD ? oneDayData.volumeUSD : 0,\r\n    twoDayData?.volumeUSD ? twoDayData.volumeUSD : 0\r\n  )\r\n  const [oneDayVolumeUntracked, volumeChangeUntracked] = get2DayPercentChange(\r\n    data?.untrackedVolumeUSD,\r\n    oneDayData?.untrackedVolumeUSD ? parseFloat(oneDayData?.untrackedVolumeUSD) : 0,\r\n    twoDayData?.untrackedVolumeUSD ? twoDayData?.untrackedVolumeUSD : 0\r\n  )\r\n  const oneWeekVolumeUSD = parseFloat(oneWeekData ? data?.volumeUSD - oneWeekData?.volumeUSD : data.volumeUSD)\r\n\r\n  // set volume properties\r\n  data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD)\r\n  data.oneWeekVolumeUSD = oneWeekVolumeUSD\r\n  data.volumeChangeUSD = volumeChangeUSD\r\n  data.oneDayVolumeUntracked = oneDayVolumeUntracked\r\n  data.volumeChangeUntracked = volumeChangeUntracked\r\n\r\n  // set liquiditry properties\r\n  data.trackedReserveUSD = data.trackedReserveETH * ethPrice\r\n  data.liquidityChangeUSD = getPercentChange(data.reserveUSD, oneDayData?.reserveUSD)\r\n\r\n  // format if pair hasnt existed for a day or a week\r\n  if (!oneDayData && data && data.createdAtBlockNumber > oneDayBlock) {\r\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n  if (!oneDayData && data) {\r\n    data.oneDayVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n  if (!oneWeekData && data) {\r\n    data.oneWeekVolumeUSD = parseFloat(data.volumeUSD)\r\n  }\r\n\r\n  // format incorrect names\r\n  updateNameData(data)\r\n\r\n  return data\r\n}\r\n\r\nconst getPairTransactions = async (pairAddress) => {\r\n  const transactions = {}\r\n\r\n  try {\r\n    let result = await client.query({\r\n      query: FILTERED_TRANSACTIONS,\r\n      variables: {\r\n        allPairs: [pairAddress],\r\n      },\r\n      fetchPolicy: 'no-cache',\r\n    })\r\n    transactions.mints = result.data.mints\r\n    transactions.burns = result.data.burns\r\n    transactions.swaps = result.data.swaps\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return transactions\r\n}\r\n\r\nconst getPairChartData = async (pairAddress) => {\r\n  let data = []\r\n  const utcEndTime = dayjs.utc()\r\n  let utcStartTime = utcEndTime.subtract(1, 'year').startOf('minute')\r\n  let startTime = utcStartTime.unix() - 1\r\n\r\n  try {\r\n    let allFound = false\r\n    let skip = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: PAIR_CHART,\r\n        variables: {\r\n          pairAddress: pairAddress,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skip += 1000\r\n      data = data.concat(result.data.pairDayDatas)\r\n      if (result.data.pairDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n    }\r\n\r\n    let dayIndexSet = new Set()\r\n    let dayIndexArray = []\r\n    const oneDay = 24 * 60 * 60\r\n    data.forEach((dayData, i) => {\r\n      // add the day index to the set of days\r\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n      dayIndexArray.push(data[i])\r\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n      dayData.reserveUSD = parseFloat(dayData.reserveUSD)\r\n    })\r\n\r\n    if (data[0]) {\r\n      // fill in empty days\r\n      let timestamp = data[0].date ? data[0].date : startTime\r\n      let latestLiquidityUSD = data[0].reserveUSD\r\n      let index = 1\r\n      while (timestamp < utcEndTime.unix() - oneDay) {\r\n        const nextDay = timestamp + oneDay\r\n        let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n        if (!dayIndexSet.has(currentDayIndex)) {\r\n          data.push({\r\n            date: nextDay,\r\n            dayString: nextDay,\r\n            dailyVolumeUSD: 0,\r\n            reserveUSD: latestLiquidityUSD,\r\n          })\r\n        } else {\r\n          latestLiquidityUSD = dayIndexArray[index].reserveUSD\r\n          index = index + 1\r\n        }\r\n        timestamp = nextDay\r\n      }\r\n    }\r\n\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nconst getHourlyRateData = async (pairAddress, startTime, latestBlock) => {\r\n  try {\r\n    const utcEndTime = dayjs.utc()\r\n    let time = startTime\r\n\r\n    // create an array of hour start times until we reach current hour\r\n    const timestamps = []\r\n    while (time <= utcEndTime.unix() - 3600) {\r\n      timestamps.push(time)\r\n      time += 3600\r\n    }\r\n\r\n    // backout if invalid timestamp format\r\n    if (timestamps.length === 0) {\r\n      return []\r\n    }\r\n\r\n    // once you have all the timestamps, get the blocks for each timestamp in a bulk query\r\n    let blocks\r\n\r\n    blocks = await getBlocksFromTimestamps(timestamps, 100)\r\n\r\n    // catch failing case\r\n    if (!blocks || blocks?.length === 0) {\r\n      return []\r\n    }\r\n\r\n    if (latestBlock) {\r\n      blocks = blocks.filter((b) => {\r\n        return parseFloat(b.number) <= parseFloat(latestBlock)\r\n      })\r\n    }\r\n\r\n    const result = await splitQuery(HOURLY_PAIR_RATES, client, [pairAddress], blocks, 100)\r\n\r\n    // format token ETH price results\r\n    let values = []\r\n    for (var row in result) {\r\n      let timestamp = row.split('t')[1]\r\n      if (timestamp) {\r\n        values.push({\r\n          timestamp,\r\n          rate0: parseFloat(result[row]?.token0Price),\r\n          rate1: parseFloat(result[row]?.token1Price),\r\n        })\r\n      }\r\n    }\r\n\r\n    let formattedHistoryRate0 = []\r\n    let formattedHistoryRate1 = []\r\n\r\n    // for each hour, construct the open and close price\r\n    for (let i = 0; i < values.length - 1; i++) {\r\n      formattedHistoryRate0.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].rate0),\r\n        close: parseFloat(values[i + 1].rate0),\r\n      })\r\n      formattedHistoryRate1.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].rate1),\r\n        close: parseFloat(values[i + 1].rate1),\r\n      })\r\n    }\r\n\r\n    return [formattedHistoryRate0, formattedHistoryRate1]\r\n  } catch (e) {\r\n    console.log(e)\r\n    return [[], []]\r\n  }\r\n}\r\n\r\nexport function Updater() {\r\n  const [, { updateTopPairs }] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n  useEffect(() => {\r\n    async function getData() {\r\n      // get top pairs by reserves\r\n      let {\r\n        data: { pairs },\r\n      } = await client.query({\r\n        query: PAIRS_CURRENT,\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n\r\n      // format as array of addresses\r\n      const formattedPairs = pairs.map((pair) => {\r\n        return pair.id\r\n      })\r\n\r\n      // get data for every pair in list\r\n      let topPairs = await getBulkPairData(formattedPairs, ethPrice)\r\n      topPairs && updateTopPairs(topPairs)\r\n    }\r\n    ethPrice && getData()\r\n  }, [ethPrice, updateTopPairs])\r\n  return null\r\n}\r\n\r\nexport function useHourlyRateData(pairAddress, timeWindow) {\r\n  const [state, { updateHourlyData }] = usePairDataContext()\r\n  const chartData = state?.[pairAddress]?.hourlyData?.[timeWindow]\r\n  const [latestBlock] = useLatestBlocks()\r\n\r\n  useEffect(() => {\r\n    const currentTime = dayjs.utc()\r\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week'\r\n    const startTime =\r\n      timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix()\r\n\r\n    async function fetch() {\r\n      let data = await getHourlyRateData(pairAddress, startTime, latestBlock)\r\n      updateHourlyData(pairAddress, data, timeWindow)\r\n    }\r\n    if (!chartData) {\r\n      fetch()\r\n    }\r\n  }, [chartData, timeWindow, pairAddress, updateHourlyData, latestBlock])\r\n\r\n  return chartData\r\n}\r\n\r\n/**\r\n * @todo\r\n * store these updates to reduce future redundant calls\r\n */\r\nexport function useDataForList(pairList) {\r\n  const [state] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n\r\n  const [stale, setStale] = useState(false)\r\n  const [fetched, setFetched] = useState([])\r\n\r\n  // reset\r\n  useEffect(() => {\r\n    if (pairList) {\r\n      setStale(false)\r\n      setFetched()\r\n    }\r\n  }, [pairList])\r\n\r\n  useEffect(() => {\r\n    async function fetchNewPairData() {\r\n      let newFetched = []\r\n      let unfetched = []\r\n\r\n      pairList.map(async (pair) => {\r\n        let currentData = state?.[pair.id]\r\n        if (!currentData) {\r\n          unfetched.push(pair.id)\r\n        } else {\r\n          newFetched.push(currentData)\r\n        }\r\n      })\r\n\r\n      let newPairData = await getBulkPairData(\r\n        unfetched.map((pair) => {\r\n          return pair\r\n        }),\r\n        ethPrice\r\n      )\r\n      setFetched(newFetched.concat(newPairData))\r\n    }\r\n    if (ethPrice && pairList && pairList.length > 0 && !fetched && !stale) {\r\n      setStale(true)\r\n      fetchNewPairData()\r\n    }\r\n  }, [ethPrice, state, pairList, stale, fetched])\r\n\r\n  let formattedFetch =\r\n    fetched &&\r\n    fetched.reduce((obj, cur) => {\r\n      return { ...obj, [cur?.id]: cur }\r\n    }, {})\r\n\r\n  return formattedFetch\r\n}\r\n\r\n/**\r\n * Get all the current and 24hr changes for a pair\r\n */\r\nexport function usePairData(pairAddress) {\r\n  const [state, { update }] = usePairDataContext()\r\n  const [ethPrice] = useEthPrice()\r\n  const pairData = state?.[pairAddress]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (!pairData && pairAddress) {\r\n        let data = await getBulkPairData([pairAddress], ethPrice)\r\n        data && update(pairAddress, data[0])\r\n      }\r\n    }\r\n    if (!pairData && pairAddress && ethPrice && isAddress(pairAddress)) {\r\n      fetchData()\r\n    }\r\n  }, [pairAddress, pairData, update, ethPrice])\r\n\r\n  return pairData || {}\r\n}\r\n\r\n/**\r\n * Get most recent txns for a pair\r\n */\r\nexport function usePairTransactions(pairAddress) {\r\n  const [state, { updatePairTxns }] = usePairDataContext()\r\n  const pairTxns = state?.[pairAddress]?.txns\r\n  useEffect(() => {\r\n    async function checkForTxns() {\r\n      if (!pairTxns) {\r\n        let transactions = await getPairTransactions(pairAddress)\r\n        updatePairTxns(pairAddress, transactions)\r\n      }\r\n    }\r\n    checkForTxns()\r\n  }, [pairTxns, pairAddress, updatePairTxns])\r\n  return pairTxns\r\n}\r\n\r\nexport function usePairChartData(pairAddress) {\r\n  const [state, { updateChartData }] = usePairDataContext()\r\n  const chartData = state?.[pairAddress]?.chartData\r\n\r\n  useEffect(() => {\r\n    async function checkForChartData() {\r\n      if (!chartData) {\r\n        let data = await getPairChartData(pairAddress)\r\n        updateChartData(pairAddress, data)\r\n      }\r\n    }\r\n    checkForChartData()\r\n  }, [chartData, pairAddress, updateChartData])\r\n  return chartData\r\n}\r\n\r\n/**\r\n * Get list of all pairs in Uniswap\r\n */\r\nexport function useAllPairData() {\r\n  const [state] = usePairDataContext()\r\n  return state || {}\r\n}\r\n","import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\r\nimport { client } from '../apollo/client'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport { useTimeframe } from './Application'\r\nimport {\r\n  getPercentChange,\r\n  getBlockFromTimestamp,\r\n  getBlocksFromTimestamps,\r\n  get2DayPercentChange,\r\n  getTimeframe,\r\n} from '../utils'\r\nimport {\r\n  GLOBAL_DATA,\r\n  GLOBAL_TXNS,\r\n  GLOBAL_CHART,\r\n  ETH_PRICE,\r\n  ALL_PAIRS,\r\n  ALL_TOKENS,\r\n  TOP_LPS_PER_PAIRS,\r\n} from '../apollo/queries'\r\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\r\nimport { useAllPairData } from './PairData'\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TXNS = 'UPDATE_TXNS'\r\nconst UPDATE_CHART = 'UPDATE_CHART'\r\nconst UPDATE_ETH_PRICE = 'UPDATE_ETH_PRICE'\r\nconst ETH_PRICE_KEY = 'ETH_PRICE_KEY'\r\nconst UPDATE_ALL_PAIRS_IN_UNISWAP = 'UPDAUPDATE_ALL_PAIRS_IN_UNISWAPTE_TOP_PAIRS'\r\nconst UPDATE_ALL_TOKENS_IN_UNISWAP = 'UPDATE_ALL_TOKENS_IN_UNISWAP'\r\nconst UPDATE_TOP_LPS = 'UPDATE_TOP_LPS'\r\n\r\n// format dayjs with the libraries that we need\r\ndayjs.extend(utc)\r\ndayjs.extend(weekOfYear)\r\n\r\nconst GlobalDataContext = createContext()\r\n\r\nfunction useGlobalDataContext() {\r\n  return useContext(GlobalDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { data } = payload\r\n      return {\r\n        ...state,\r\n        globalData: data,\r\n      }\r\n    }\r\n    case UPDATE_TXNS: {\r\n      const { transactions } = payload\r\n      return {\r\n        ...state,\r\n        transactions,\r\n      }\r\n    }\r\n    case UPDATE_CHART: {\r\n      const { daily, weekly } = payload\r\n      return {\r\n        ...state,\r\n        chartData: {\r\n          daily,\r\n          weekly,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_ETH_PRICE: {\r\n      const { ethPrice, oneDayPrice, ethPriceChange } = payload\r\n      return {\r\n        [ETH_PRICE_KEY]: ethPrice,\r\n        oneDayPrice,\r\n        ethPriceChange,\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_PAIRS_IN_UNISWAP: {\r\n      const { allPairs } = payload\r\n      return {\r\n        ...state,\r\n        allPairs,\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_TOKENS_IN_UNISWAP: {\r\n      const { allTokens } = payload\r\n      return {\r\n        ...state,\r\n        allTokens,\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOP_LPS: {\r\n      const { topLps } = payload\r\n      return {\r\n        ...state,\r\n        topLps,\r\n      }\r\n    }\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n  const update = useCallback((data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTransactions = useCallback((transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TXNS,\r\n      payload: {\r\n        transactions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateChart = useCallback((daily, weekly) => {\r\n    dispatch({\r\n      type: UPDATE_CHART,\r\n      payload: {\r\n        daily,\r\n        weekly,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateEthPrice = useCallback((ethPrice, oneDayPrice, ethPriceChange) => {\r\n    dispatch({\r\n      type: UPDATE_ETH_PRICE,\r\n      payload: {\r\n        ethPrice,\r\n        oneDayPrice,\r\n        ethPriceChange,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllPairsInUniswap = useCallback((allPairs) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_PAIRS_IN_UNISWAP,\r\n      payload: {\r\n        allPairs,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllTokensInUniswap = useCallback((allTokens) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_TOKENS_IN_UNISWAP,\r\n      payload: {\r\n        allTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopLps = useCallback((topLps) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_LPS,\r\n      payload: {\r\n        topLps,\r\n      },\r\n    })\r\n  }, [])\r\n  return (\r\n    <GlobalDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateTransactions,\r\n            updateChart,\r\n            updateEthPrice,\r\n            updateTopLps,\r\n            updateAllPairsInUniswap,\r\n            updateAllTokensInUniswap,\r\n          },\r\n        ],\r\n        [\r\n          state,\r\n          update,\r\n          updateTransactions,\r\n          updateTopLps,\r\n          updateChart,\r\n          updateEthPrice,\r\n          updateAllPairsInUniswap,\r\n          updateAllTokensInUniswap,\r\n        ]\r\n      )}\r\n    >\r\n      {children}\r\n    </GlobalDataContext.Provider>\r\n  )\r\n}\r\n\r\n/**\r\n * Gets all the global data for the overview page.\r\n * Needs current eth price and the old eth price to get\r\n * 24 hour USD changes.\r\n * @param {*} ethPrice\r\n * @param {*} oldEthPrice\r\n */\r\nasync function getGlobalData(ethPrice, oldEthPrice) {\r\n  // data for each day , historic data used for % changes\r\n  let data = {}\r\n  let oneDayData = {}\r\n  let twoDayData = {}\r\n\r\n  try {\r\n    // get timestamps for the days\r\n    const utcCurrentTime = dayjs()\r\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix()\r\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix()\r\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix()\r\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix()\r\n\r\n    // get the blocks needed for time travel queries\r\n    let [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([\r\n      utcOneDayBack,\r\n      utcTwoDaysBack,\r\n      utcOneWeekBack,\r\n      utcTwoWeeksBack,\r\n    ])\r\n\r\n    // fetch the global data\r\n    let result = await client.query({\r\n      query: GLOBAL_DATA(),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    data = result.data.uniswapFactories[0]\r\n\r\n    // fetch the historical data\r\n    let oneDayResult = await client.query({\r\n      query: GLOBAL_DATA(oneDayBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    oneDayData = oneDayResult.data.uniswapFactories[0]\r\n\r\n    let twoDayResult = await client.query({\r\n      query: GLOBAL_DATA(twoDayBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    twoDayData = twoDayResult.data.uniswapFactories[0]\r\n\r\n    let oneWeekResult = await client.query({\r\n      query: GLOBAL_DATA(oneWeekBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    const oneWeekData = oneWeekResult.data.uniswapFactories[0]\r\n\r\n    let twoWeekResult = await client.query({\r\n      query: GLOBAL_DATA(twoWeekBlock?.number),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    const twoWeekData = twoWeekResult.data.uniswapFactories[0]\r\n\r\n    if (data && oneDayData && twoDayData && twoWeekData) {\r\n      let [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n        data.totalVolumeUSD,\r\n        oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0,\r\n        twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0\r\n      )\r\n\r\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(\r\n        data.totalVolumeUSD,\r\n        oneWeekData.totalVolumeUSD,\r\n        twoWeekData.totalVolumeUSD\r\n      )\r\n\r\n      const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n        data.txCount,\r\n        oneDayData.txCount ? oneDayData.txCount : 0,\r\n        twoDayData.txCount ? twoDayData.txCount : 0\r\n      )\r\n\r\n      // format the total liquidity in USD\r\n      data.totalLiquidityUSD = data.totalLiquidityETH * ethPrice\r\n      const liquidityChangeUSD = getPercentChange(\r\n        data.totalLiquidityETH * ethPrice,\r\n        oneDayData.totalLiquidityETH * oldEthPrice\r\n      )\r\n\r\n      // add relevant fields with the calculated amounts\r\n      data.oneDayVolumeUSD = oneDayVolumeUSD\r\n      data.oneWeekVolume = oneWeekVolume\r\n      data.weeklyVolumeChange = weeklyVolumeChange\r\n      data.volumeChangeUSD = volumeChangeUSD\r\n      data.liquidityChangeUSD = liquidityChangeUSD\r\n      data.oneDayTxns = oneDayTxns\r\n      data.txnChange = txnChange\r\n    }\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return data\r\n}\r\n\r\n/**\r\n * Get historical data for volume and liquidity used in global charts\r\n * on main page\r\n * @param {*} oldestDateToFetch // start of window to fetch from\r\n */\r\nconst getChartData = async (oldestDateToFetch) => {\r\n  let data = []\r\n  let weeklyData = []\r\n  const utcEndTime = dayjs.utc()\r\n  let skip = 0\r\n  let allFound = false\r\n\r\n  try {\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: GLOBAL_CHART,\r\n        variables: {\r\n          startTime: oldestDateToFetch,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skip += 1000\r\n      data = data.concat(result.data.uniswapDayDatas)\r\n      if (result.data.uniswapDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n    }\r\n\r\n    if (data) {\r\n      let dayIndexSet = new Set()\r\n      let dayIndexArray = []\r\n      const oneDay = 24 * 60 * 60\r\n\r\n      // for each day, parse the daily volume and format for chart array\r\n      data.forEach((dayData, i) => {\r\n        // add the day index to the set of days\r\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n        dayIndexArray.push(data[i])\r\n        dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n      })\r\n\r\n      // fill in empty days ( there will be no day datas if no trades made that day )\r\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch\r\n      let latestLiquidityUSD = data[0].totalLiquidityUSD\r\n      let latestDayDats = data[0].mostLiquidTokens\r\n      let index = 1\r\n      while (timestamp < utcEndTime.unix() - oneDay) {\r\n        const nextDay = timestamp + oneDay\r\n        let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n        if (!dayIndexSet.has(currentDayIndex)) {\r\n          data.push({\r\n            date: nextDay,\r\n            dailyVolumeUSD: 0,\r\n            totalLiquidityUSD: latestLiquidityUSD,\r\n            mostLiquidTokens: latestDayDats,\r\n          })\r\n        } else {\r\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD\r\n          latestDayDats = dayIndexArray[index].mostLiquidTokens\r\n          index = index + 1\r\n        }\r\n        timestamp = nextDay\r\n      }\r\n    }\r\n\r\n    // format weekly data for weekly sized chunks\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n    let startIndexWeekly = -1\r\n    let currentWeek = -1\r\n    data.forEach((entry, i) => {\r\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week()\r\n      if (week !== currentWeek) {\r\n        currentWeek = week\r\n        startIndexWeekly++\r\n      }\r\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {}\r\n      weeklyData[startIndexWeekly].date = data[i].date\r\n      weeklyData[startIndexWeekly].weeklyVolumeUSD =\r\n        (weeklyData[startIndexWeekly].weeklyVolumeUSD ?? 0) + data[i].dailyVolumeUSD\r\n    })\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return [data, weeklyData]\r\n}\r\n\r\n/**\r\n * Get and format transactions for global page\r\n */\r\nconst getGlobalTransactions = async () => {\r\n  let transactions = {}\r\n\r\n  try {\r\n    let result = await client.query({\r\n      query: GLOBAL_TXNS,\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    transactions.mints = []\r\n    transactions.burns = []\r\n    transactions.swaps = []\r\n    result?.data?.transactions &&\r\n      result.data.transactions.map((transaction) => {\r\n        if (transaction.mints.length > 0) {\r\n          transaction.mints.map((mint) => {\r\n            return transactions.mints.push(mint)\r\n          })\r\n        }\r\n        if (transaction.burns.length > 0) {\r\n          transaction.burns.map((burn) => {\r\n            return transactions.burns.push(burn)\r\n          })\r\n        }\r\n        if (transaction.swaps.length > 0) {\r\n          transaction.swaps.map((swap) => {\r\n            return transactions.swaps.push(swap)\r\n          })\r\n        }\r\n        return true\r\n      })\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return transactions\r\n}\r\n\r\n/**\r\n * Gets the current price  of ETH, 24 hour price, and % change between them\r\n */\r\nconst getEthPrice = async () => {\r\n  const utcCurrentTime = dayjs()\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\r\n\r\n  let ethPrice = 0\r\n  let ethPriceOneDay = 0\r\n  let priceChangeETH = 0\r\n\r\n  try {\r\n    let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n    let result = await client.query({\r\n      query: ETH_PRICE(),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    let resultOneDay = await client.query({\r\n      query: ETH_PRICE(oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    const currentPrice = result?.data?.bundles[0]?.ethPrice\r\n    const oneDayBackPrice = resultOneDay?.data?.bundles[0]?.ethPrice\r\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice)\r\n    ethPrice = currentPrice\r\n    ethPriceOneDay = oneDayBackPrice\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n\r\n  return [ethPrice, ethPriceOneDay, priceChangeETH]\r\n}\r\n\r\nconst PAIRS_TO_FETCH = 500\r\nconst TOKENS_TO_FETCH = 500\r\n\r\n/**\r\n * Loop through every pair on uniswap, used for search\r\n */\r\nasync function getAllPairsOnUniswap() {\r\n  try {\r\n    let allFound = false\r\n    let pairs = []\r\n    let skipCount = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: ALL_PAIRS,\r\n        variables: {\r\n          skip: skipCount,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      skipCount = skipCount + PAIRS_TO_FETCH\r\n      pairs = pairs.concat(result?.data?.pairs)\r\n      if (result?.data?.pairs.length < PAIRS_TO_FETCH || pairs.length > PAIRS_TO_FETCH) {\r\n        allFound = true\r\n      }\r\n    }\r\n    return pairs\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\n/**\r\n * Loop through every token on uniswap, used for search\r\n */\r\nasync function getAllTokensOnUniswap() {\r\n  try {\r\n    let allFound = false\r\n    let skipCount = 0\r\n    let tokens = []\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: ALL_TOKENS,\r\n        variables: {\r\n          skip: skipCount,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      tokens = tokens.concat(result?.data?.tokens)\r\n      if (result?.data?.tokens?.length < TOKENS_TO_FETCH || tokens.length > TOKENS_TO_FETCH) {\r\n        allFound = true\r\n      }\r\n      skipCount = skipCount += TOKENS_TO_FETCH\r\n    }\r\n    return tokens\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\n/**\r\n * Hook that fetches overview data, plus all tokens and pairs for search\r\n */\r\nexport function useGlobalData() {\r\n  const [state, { update, updateAllPairsInUniswap, updateAllTokensInUniswap }] = useGlobalDataContext()\r\n  const [ethPrice, oldEthPrice] = useEthPrice()\r\n\r\n  const data = state?.globalData\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let globalData = await getGlobalData(ethPrice, oldEthPrice)\r\n      globalData && update(globalData)\r\n\r\n      let allPairs = await getAllPairsOnUniswap()\r\n      updateAllPairsInUniswap(allPairs)\r\n\r\n      let allTokens = await getAllTokensOnUniswap()\r\n      updateAllTokensInUniswap(allTokens)\r\n    }\r\n    if (!data && ethPrice && oldEthPrice) {\r\n      fetchData()\r\n    }\r\n  }, [ethPrice, oldEthPrice, update, data, updateAllPairsInUniswap, updateAllTokensInUniswap])\r\n\r\n  return data || {}\r\n}\r\n\r\nexport function useGlobalChartData() {\r\n  const [state, { updateChart }] = useGlobalDataContext()\r\n  const [oldestDateFetch, setOldestDateFetched] = useState()\r\n  const [activeWindow] = useTimeframe()\r\n\r\n  const chartDataDaily = state?.chartData?.daily\r\n  const chartDataWeekly = state?.chartData?.weekly\r\n\r\n  /**\r\n   * Keep track of oldest date fetched. Used to\r\n   * limit data fetched until its actually needed.\r\n   * (dont fetch year long stuff unless year option selected)\r\n   */\r\n  useEffect(() => {\r\n    // based on window, get starttime\r\n    let startTime = getTimeframe(activeWindow)\r\n\r\n    if ((activeWindow && startTime < oldestDateFetch) || !oldestDateFetch) {\r\n      setOldestDateFetched(startTime)\r\n    }\r\n  }, [activeWindow, oldestDateFetch])\r\n\r\n  /**\r\n   * Fetch data if none fetched or older data is needed\r\n   */\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // historical stuff for chart\r\n      let [newChartData, newWeeklyData] = await getChartData(oldestDateFetch)\r\n      updateChart(newChartData, newWeeklyData)\r\n    }\r\n    if (oldestDateFetch && !(chartDataDaily && chartDataWeekly)) {\r\n      fetchData()\r\n    }\r\n  }, [chartDataDaily, chartDataWeekly, oldestDateFetch, updateChart])\r\n\r\n  return [chartDataDaily, chartDataWeekly]\r\n}\r\n\r\nexport function useGlobalTransactions() {\r\n  const [state, { updateTransactions }] = useGlobalDataContext()\r\n  const transactions = state?.transactions\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (!transactions) {\r\n        let txns = await getGlobalTransactions()\r\n        updateTransactions(txns)\r\n      }\r\n    }\r\n    fetchData()\r\n  }, [updateTransactions, transactions])\r\n  return transactions\r\n}\r\n\r\nexport function useEthPrice() {\r\n  const [state, { updateEthPrice }] = useGlobalDataContext()\r\n  const ethPrice = state?.[ETH_PRICE_KEY]\r\n  const ethPriceOld = state?.['oneDayPrice']\r\n  useEffect(() => {\r\n    async function checkForEthPrice() {\r\n      if (!ethPrice) {\r\n        let [newPrice, oneDayPrice, priceChange] = await getEthPrice()\r\n        updateEthPrice(newPrice, oneDayPrice, priceChange)\r\n      }\r\n    }\r\n    checkForEthPrice()\r\n  }, [ethPrice, updateEthPrice])\r\n\r\n  return [ethPrice, ethPriceOld]\r\n}\r\n\r\nexport function useAllPairsInUniswap() {\r\n  const [state] = useGlobalDataContext()\r\n  let allPairs = state?.allPairs\r\n\r\n  return allPairs || []\r\n}\r\n\r\nexport function useAllTokensInUniswap() {\r\n  const [state] = useGlobalDataContext()\r\n  let allTokens = state?.allTokens\r\n\r\n  return allTokens || []\r\n}\r\n\r\n/**\r\n * Get the top liquidity positions based on USD size\r\n * @TODO Not a perfect lookup needs improvement\r\n */\r\nexport function useTopLps() {\r\n  const [state, { updateTopLps }] = useGlobalDataContext()\r\n  let topLps = state?.topLps\r\n\r\n  const allPairs = useAllPairData()\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      // get top 20 by reserves\r\n      let topPairs = Object.keys(allPairs)\r\n        ?.sort((a, b) => parseFloat(allPairs[a].reserveUSD > allPairs[b].reserveUSD ? -1 : 1))\r\n        ?.slice(0, 99)\r\n        .map((pair) => pair)\r\n\r\n      let topLpLists = await Promise.all(\r\n        topPairs.map(async (pair) => {\r\n          // for each one, fetch top LPs\r\n          try {\r\n            const { data: results } = await client.query({\r\n              query: TOP_LPS_PER_PAIRS,\r\n              variables: {\r\n                pair: pair.toString(),\r\n              },\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            if (results) {\r\n              return results.liquidityPositions\r\n            }\r\n          } catch (e) {}\r\n        })\r\n      )\r\n\r\n      // get the top lps from the results formatted\r\n      const topLps = []\r\n      topLpLists\r\n        .filter((i) => !!i) // check for ones not fetched correctly\r\n        .map((list) => {\r\n          return list.map((entry) => {\r\n            const pairData = allPairs[entry.pair.id]\r\n            return topLps.push({\r\n              user: entry.user,\r\n              pairName: pairData.token0.symbol + '-' + pairData.token1.symbol,\r\n              pairAddress: entry.pair.id,\r\n              token0: pairData.token0.id,\r\n              token1: pairData.token1.id,\r\n              usd:\r\n                (parseFloat(entry.liquidityTokenBalance) / parseFloat(pairData.totalSupply)) *\r\n                parseFloat(pairData.reserveUSD),\r\n            })\r\n          })\r\n        })\r\n\r\n      const sorted = topLps.sort((a, b) => (a.usd > b.usd ? -1 : 1))\r\n      const shorter = sorted.splice(0, 100)\r\n      updateTopLps(shorter)\r\n    }\r\n\r\n    if (!topLps && allPairs && Object.keys(allPairs).length > 0) {\r\n      fetchData()\r\n    }\r\n  })\r\n\r\n  return topLps\r\n}\r\n","import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect } from 'react'\r\n\r\nimport { client } from '../apollo/client'\r\nimport {\r\n  TOKEN_DATA,\r\n  FILTERED_TRANSACTIONS,\r\n  TOKEN_CHART,\r\n  TOKENS_CURRENT,\r\n  TOKENS_DYNAMIC,\r\n  PRICES_BY_BLOCK,\r\n  PAIR_DATA,\r\n} from '../apollo/queries'\r\n\r\nimport { useEthPrice } from './GlobalData'\r\n\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\n\r\nimport {\r\n  get2DayPercentChange,\r\n  getPercentChange,\r\n  getBlockFromTimestamp,\r\n  isAddress,\r\n  getBlocksFromTimestamps,\r\n  splitQuery,\r\n} from '../utils'\r\nimport { timeframeOptions } from '../constants'\r\nimport { useLatestBlocks } from './Application'\r\nimport { updateNameData } from '../utils/data'\r\n\r\nconst UPDATE = 'UPDATE'\r\nconst UPDATE_TOKEN_TXNS = 'UPDATE_TOKEN_TXNS'\r\nconst UPDATE_CHART_DATA = 'UPDATE_CHART_DATA'\r\nconst UPDATE_PRICE_DATA = 'UPDATE_PRICE_DATA'\r\nconst UPDATE_TOP_TOKENS = ' UPDATE_TOP_TOKENS'\r\nconst UPDATE_ALL_PAIRS = 'UPDATE_ALL_PAIRS'\r\n\r\nconst TOKEN_PAIRS_KEY = 'TOKEN_PAIRS_KEY'\r\n\r\ndayjs.extend(utc)\r\n\r\nconst TokenDataContext = createContext()\r\n\r\nfunction useTokenDataContext() {\r\n  return useContext(TokenDataContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE: {\r\n      const { tokenAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [tokenAddress]: {\r\n          ...state?.[tokenAddress],\r\n          ...data,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_TOP_TOKENS: {\r\n      const { topTokens } = payload\r\n      let added = {}\r\n      topTokens &&\r\n        topTokens.map((token) => {\r\n          return (added[token.id] = token)\r\n        })\r\n      return {\r\n        ...state,\r\n        ...added,\r\n      }\r\n    }\r\n\r\n    case UPDATE_TOKEN_TXNS: {\r\n      const { address, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          txns: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_CHART_DATA: {\r\n      const { address, chartData } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          chartData,\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_PRICE_DATA: {\r\n      const { address, data, timeWindow, interval } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          [timeWindow]: {\r\n            ...state?.[address]?.[timeWindow],\r\n            [interval]: data,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    case UPDATE_ALL_PAIRS: {\r\n      const { address, allPairs } = payload\r\n      return {\r\n        ...state,\r\n        [address]: {\r\n          ...state?.[address],\r\n          [TOKEN_PAIRS_KEY]: allPairs,\r\n        },\r\n      }\r\n    }\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {})\r\n  const update = useCallback((tokenAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE,\r\n      payload: {\r\n        tokenAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTopTokens = useCallback((topTokens) => {\r\n    dispatch({\r\n      type: UPDATE_TOP_TOKENS,\r\n      payload: {\r\n        topTokens,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateTokenTxns = useCallback((address, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TOKEN_TXNS,\r\n      payload: { address, transactions },\r\n    })\r\n  }, [])\r\n\r\n  const updateChartData = useCallback((address, chartData) => {\r\n    dispatch({\r\n      type: UPDATE_CHART_DATA,\r\n      payload: { address, chartData },\r\n    })\r\n  }, [])\r\n\r\n  const updateAllPairs = useCallback((address, allPairs) => {\r\n    dispatch({\r\n      type: UPDATE_ALL_PAIRS,\r\n      payload: { address, allPairs },\r\n    })\r\n  }, [])\r\n\r\n  const updatePriceData = useCallback((address, data, timeWindow, interval) => {\r\n    dispatch({\r\n      type: UPDATE_PRICE_DATA,\r\n      payload: { address, data, timeWindow, interval },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <TokenDataContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          {\r\n            update,\r\n            updateTokenTxns,\r\n            updateChartData,\r\n            updateTopTokens,\r\n            updateAllPairs,\r\n            updatePriceData,\r\n          },\r\n        ],\r\n        [state, update, updateTokenTxns, updateChartData, updateTopTokens, updateAllPairs, updatePriceData]\r\n      )}\r\n    >\r\n      {children}\r\n    </TokenDataContext.Provider>\r\n  )\r\n}\r\n\r\nconst getTopTokens = async (ethPrice, ethPriceOld) => {\r\n  const utcCurrentTime = dayjs()\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix()\r\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix()\r\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack)\r\n\r\n  try {\r\n    let current = await client.query({\r\n      query: TOKENS_CURRENT,\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let oneDayResult = await client.query({\r\n      query: TOKENS_DYNAMIC(oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let twoDayResult = await client.query({\r\n      query: TOKENS_DYNAMIC(twoDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n\r\n    let oneDayData = oneDayResult?.data?.tokens.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let twoDayData = twoDayResult?.data?.tokens.reduce((obj, cur, i) => {\r\n      return { ...obj, [cur.id]: cur }\r\n    }, {})\r\n\r\n    let bulkResults = await Promise.all(\r\n      current &&\r\n        oneDayData &&\r\n        twoDayData &&\r\n        current?.data?.tokens.map(async (token) => {\r\n          let data = token\r\n\r\n          // let liquidityDataThisToken = liquidityData?.[token.id]\r\n          let oneDayHistory = oneDayData?.[token.id]\r\n          let twoDayHistory = twoDayData?.[token.id]\r\n\r\n          // catch the case where token wasnt in top list in previous days\r\n          if (!oneDayHistory) {\r\n            let oneDayResult = await client.query({\r\n              query: TOKEN_DATA(token.id, oneDayBlock),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            oneDayHistory = oneDayResult.data.tokens[0]\r\n          }\r\n          if (!twoDayHistory) {\r\n            let twoDayResult = await client.query({\r\n              query: TOKEN_DATA(token.id, twoDayBlock),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            twoDayHistory = twoDayResult.data.tokens[0]\r\n          }\r\n\r\n          // calculate percentage changes and daily changes\r\n          const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n            data.tradeVolumeUSD,\r\n            oneDayHistory?.tradeVolumeUSD ?? 0,\r\n            twoDayHistory?.tradeVolumeUSD ?? 0\r\n          )\r\n          const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n            data.txCount,\r\n            oneDayHistory?.txCount ?? 0,\r\n            twoDayHistory?.txCount ?? 0\r\n          )\r\n\r\n          const currentLiquidityUSD = data?.totalLiquidity * ethPrice * data?.derivedETH\r\n          const oldLiquidityUSD = oneDayHistory?.totalLiquidity * ethPriceOld * oneDayHistory?.derivedETH\r\n\r\n          // percent changes\r\n          const priceChangeUSD = getPercentChange(\r\n            data?.derivedETH * ethPrice,\r\n            oneDayHistory?.derivedETH ? oneDayHistory?.derivedETH * ethPriceOld : 0\r\n          )\r\n\r\n          // set data\r\n          data.priceUSD = data?.derivedETH * ethPrice\r\n          data.totalLiquidityUSD = currentLiquidityUSD\r\n          data.oneDayVolumeUSD = parseFloat(oneDayVolumeUSD)\r\n          data.volumeChangeUSD = volumeChangeUSD\r\n          data.priceChangeUSD = priceChangeUSD\r\n          data.liquidityChangeUSD = getPercentChange(currentLiquidityUSD ?? 0, oldLiquidityUSD ?? 0)\r\n          data.oneDayTxns = oneDayTxns\r\n          data.txnChange = txnChange\r\n\r\n          // new tokens\r\n          if (!oneDayHistory && data) {\r\n            data.oneDayVolumeUSD = data.tradeVolumeUSD\r\n            data.oneDayVolumeETH = data.tradeVolume * data.derivedETH\r\n            data.oneDayTxns = data.txCount\r\n          }\r\n\r\n          // update name data for\r\n          updateNameData({\r\n            token0: data,\r\n          })\r\n\r\n          // HOTFIX for Aave\r\n          if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\r\n            const aaveData = await client.query({\r\n              query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\r\n              fetchPolicy: 'cache-first',\r\n            })\r\n            const result = aaveData.data.pairs[0]\r\n            data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2\r\n            data.liquidityChangeUSD = 0\r\n            data.priceChangeUSD = 0\r\n          }\r\n\r\n          return data\r\n        })\r\n    )\r\n\r\n    return bulkResults\r\n\r\n    // calculate percentage changes and daily changes\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst getTokenData = async (address, ethPrice, ethPriceOld) => {\r\n  const utcCurrentTime = dayjs()\r\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\r\n  const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').startOf('minute').unix()\r\n  let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\r\n  let twoDayBlock = await getBlockFromTimestamp(utcTwoDaysBack)\r\n\r\n  // initialize data arrays\r\n  let data = {}\r\n  let oneDayData = {}\r\n  let twoDayData = {}\r\n\r\n  try {\r\n    // fetch all current and historical data\r\n    let result = await client.query({\r\n      query: TOKEN_DATA(address),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    data = result?.data?.tokens?.[0]\r\n\r\n    // get results from 24 hours in past\r\n    let oneDayResult = await client.query({\r\n      query: TOKEN_DATA(address, oneDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    oneDayData = oneDayResult.data.tokens[0]\r\n\r\n    // get results from 48 hours in past\r\n    let twoDayResult = await client.query({\r\n      query: TOKEN_DATA(address, twoDayBlock),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    twoDayData = twoDayResult.data.tokens[0]\r\n\r\n    // catch the case where token wasnt in top list in previous days\r\n    if (!oneDayData) {\r\n      let oneDayResult = await client.query({\r\n        query: TOKEN_DATA(address, oneDayBlock),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      oneDayData = oneDayResult.data.tokens[0]\r\n    }\r\n    if (!twoDayData) {\r\n      let twoDayResult = await client.query({\r\n        query: TOKEN_DATA(address, twoDayBlock),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      twoDayData = twoDayResult.data.tokens[0]\r\n    }\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\r\n      data.tradeVolumeUSD,\r\n      oneDayData?.tradeVolumeUSD ?? 0,\r\n      twoDayData?.tradeVolumeUSD ?? 0\r\n    )\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayVolumeUT, volumeChangeUT] = get2DayPercentChange(\r\n      data.untrackedVolumeUSD,\r\n      oneDayData?.untrackedVolumeUSD ?? 0,\r\n      twoDayData?.untrackedVolumeUSD ?? 0\r\n    )\r\n\r\n    // calculate percentage changes and daily changes\r\n    const [oneDayTxns, txnChange] = get2DayPercentChange(\r\n      data.txCount,\r\n      oneDayData?.txCount ?? 0,\r\n      twoDayData?.txCount ?? 0\r\n    )\r\n\r\n    const priceChangeUSD = getPercentChange(\r\n      data?.derivedETH * ethPrice,\r\n      parseFloat(oneDayData?.derivedETH ?? 0) * ethPriceOld\r\n    )\r\n\r\n    const currentLiquidityUSD = data?.totalLiquidity * ethPrice * data?.derivedETH\r\n    const oldLiquidityUSD = oneDayData?.totalLiquidity * ethPriceOld * oneDayData?.derivedETH\r\n\r\n    // set data\r\n    data.priceUSD = data?.derivedETH * ethPrice\r\n    data.totalLiquidityUSD = currentLiquidityUSD\r\n    data.oneDayVolumeUSD = oneDayVolumeUSD\r\n    data.volumeChangeUSD = volumeChangeUSD\r\n    data.priceChangeUSD = priceChangeUSD\r\n    data.oneDayVolumeUT = oneDayVolumeUT\r\n    data.volumeChangeUT = volumeChangeUT\r\n    const liquidityChangeUSD = getPercentChange(currentLiquidityUSD ?? 0, oldLiquidityUSD ?? 0)\r\n    data.liquidityChangeUSD = liquidityChangeUSD\r\n    data.oneDayTxns = oneDayTxns\r\n    data.txnChange = txnChange\r\n\r\n    // new tokens\r\n    if (!oneDayData && data) {\r\n      data.oneDayVolumeUSD = data.tradeVolumeUSD\r\n      data.oneDayVolumeETH = data.tradeVolume * data.derivedETH\r\n      data.oneDayTxns = data.txCount\r\n    }\r\n\r\n    // update name data for\r\n    updateNameData({\r\n      token0: data,\r\n    })\r\n\r\n    // HOTFIX for Aave\r\n    if (data.id === '0x7fc66500c84a76ad7e9c93437bfc5ac33e2ddae9') {\r\n      const aaveData = await client.query({\r\n        query: PAIR_DATA('0xdfc14d2af169b0d36c4eff567ada9b2e0cae044f'),\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      const result = aaveData.data.pairs[0]\r\n      data.totalLiquidityUSD = parseFloat(result.reserveUSD) / 2\r\n      data.liquidityChangeUSD = 0\r\n      data.priceChangeUSD = 0\r\n    }\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return data\r\n}\r\n\r\nconst getTokenTransactions = async (allPairsFormatted) => {\r\n  const transactions = {}\r\n  try {\r\n    let result = await client.query({\r\n      query: FILTERED_TRANSACTIONS,\r\n      variables: {\r\n        allPairs: allPairsFormatted,\r\n      },\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    transactions.mints = result.data.mints\r\n    transactions.burns = result.data.burns\r\n    transactions.swaps = result.data.swaps\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return transactions\r\n}\r\n\r\nconst getTokenPairs = async (tokenAddress) => {\r\n  try {\r\n    // fetch all current and historical data\r\n    let result = await client.query({\r\n      query: TOKEN_DATA(tokenAddress),\r\n      fetchPolicy: 'cache-first',\r\n    })\r\n    return result.data?.['pairs0'].concat(result.data?.['pairs1'])\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst getIntervalTokenData = async (tokenAddress, startTime, interval = 3600, latestBlock) => {\r\n  const utcEndTime = dayjs.utc()\r\n  let time = startTime\r\n\r\n  // create an array of hour start times until we reach current hour\r\n  // buffer by half hour to catch case where graph isnt synced to latest block\r\n  const timestamps = []\r\n  while (time < utcEndTime.unix()) {\r\n    timestamps.push(time)\r\n    time += interval\r\n  }\r\n\r\n  // backout if invalid timestamp format\r\n  if (timestamps.length === 0) {\r\n    return []\r\n  }\r\n\r\n  // once you have all the timestamps, get the blocks for each timestamp in a bulk query\r\n  let blocks\r\n  try {\r\n    blocks = await getBlocksFromTimestamps(timestamps, 100)\r\n\r\n    // catch failing case\r\n    if (!blocks || blocks.length === 0) {\r\n      return []\r\n    }\r\n\r\n    if (latestBlock) {\r\n      blocks = blocks.filter((b) => {\r\n        return parseFloat(b.number) <= parseFloat(latestBlock)\r\n      })\r\n    }\r\n\r\n    let result = await splitQuery(PRICES_BY_BLOCK, client, [tokenAddress], blocks, 50)\r\n\r\n    // format token ETH price results\r\n    let values = []\r\n    for (var row in result) {\r\n      let timestamp = row.split('t')[1]\r\n      let derivedETH = parseFloat(result[row]?.derivedETH)\r\n      if (timestamp) {\r\n        values.push({\r\n          timestamp,\r\n          derivedETH,\r\n        })\r\n      }\r\n    }\r\n\r\n    // go through eth usd prices and assign to original values array\r\n    let index = 0\r\n    for (var brow in result) {\r\n      let timestamp = brow.split('b')[1]\r\n      if (timestamp) {\r\n        values[index].priceUSD = result[brow].ethPrice * values[index].derivedETH\r\n        index += 1\r\n      }\r\n    }\r\n\r\n    let formattedHistory = []\r\n\r\n    // for each hour, construct the open and close price\r\n    for (let i = 0; i < values.length - 1; i++) {\r\n      formattedHistory.push({\r\n        timestamp: values[i].timestamp,\r\n        open: parseFloat(values[i].priceUSD),\r\n        close: parseFloat(values[i + 1].priceUSD),\r\n      })\r\n    }\r\n\r\n    return formattedHistory\r\n  } catch (e) {\r\n    console.log(e)\r\n    console.log('error fetching blocks')\r\n    return []\r\n  }\r\n}\r\n\r\nconst getTokenChartData = async (tokenAddress) => {\r\n  let data = []\r\n  const utcEndTime = dayjs.utc()\r\n  let utcStartTime = utcEndTime.subtract(1, 'year')\r\n  let startTime = utcStartTime.startOf('minute').unix() - 1\r\n\r\n  try {\r\n    let allFound = false\r\n    let skip = 0\r\n    while (!allFound) {\r\n      let result = await client.query({\r\n        query: TOKEN_CHART,\r\n        variables: {\r\n          tokenAddr: tokenAddress,\r\n          skip,\r\n        },\r\n        fetchPolicy: 'cache-first',\r\n      })\r\n      if (result.data.tokenDayDatas.length < 1000) {\r\n        allFound = true\r\n      }\r\n      skip += 1000\r\n      data = data.concat(result.data.tokenDayDatas)\r\n    }\r\n\r\n    let dayIndexSet = new Set()\r\n    let dayIndexArray = []\r\n    const oneDay = 24 * 60 * 60\r\n    data.forEach((dayData, i) => {\r\n      // add the day index to the set of days\r\n      dayIndexSet.add((data[i].date / oneDay).toFixed(0))\r\n      dayIndexArray.push(data[i])\r\n      dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\r\n    })\r\n\r\n    // fill in empty days\r\n    let timestamp = data[0] && data[0].date ? data[0].date : startTime\r\n    let latestLiquidityUSD = data[0] && data[0].totalLiquidityUSD\r\n    let latestPriceUSD = data[0] && data[0].priceUSD\r\n    let latestPairDatas = data[0] && data[0].mostLiquidPairs\r\n    let index = 1\r\n    while (timestamp < utcEndTime.startOf('minute').unix() - oneDay) {\r\n      const nextDay = timestamp + oneDay\r\n      let currentDayIndex = (nextDay / oneDay).toFixed(0)\r\n      if (!dayIndexSet.has(currentDayIndex)) {\r\n        data.push({\r\n          date: nextDay,\r\n          dayString: nextDay,\r\n          dailyVolumeUSD: 0,\r\n          priceUSD: latestPriceUSD,\r\n          totalLiquidityUSD: latestLiquidityUSD,\r\n          mostLiquidPairs: latestPairDatas,\r\n        })\r\n      } else {\r\n        latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD\r\n        latestPriceUSD = dayIndexArray[index].priceUSD\r\n        latestPairDatas = dayIndexArray[index].mostLiquidPairs\r\n        index = index + 1\r\n      }\r\n      timestamp = nextDay\r\n    }\r\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n  return data\r\n}\r\n\r\nexport function Updater() {\r\n  const [, { updateTopTokens }] = useTokenDataContext()\r\n  const [ethPrice, ethPriceOld] = useEthPrice()\r\n  useEffect(() => {\r\n    async function getData() {\r\n      // get top pairs for overview list\r\n      let topTokens = await getTopTokens(ethPrice, ethPriceOld)\r\n      topTokens && updateTopTokens(topTokens)\r\n    }\r\n    ethPrice && ethPriceOld && getData()\r\n  }, [ethPrice, ethPriceOld, updateTopTokens])\r\n  return null\r\n}\r\n\r\nexport function useTokenData(tokenAddress) {\r\n  const [state, { update }] = useTokenDataContext()\r\n  const [ethPrice, ethPriceOld] = useEthPrice()\r\n  const tokenData = state?.[tokenAddress]\r\n\r\n  useEffect(() => {\r\n    if (!tokenData && ethPrice && ethPriceOld && isAddress(tokenAddress)) {\r\n      getTokenData(tokenAddress, ethPrice, ethPriceOld).then((data) => {\r\n        update(tokenAddress, data)\r\n      })\r\n    }\r\n  }, [ethPrice, ethPriceOld, tokenAddress, tokenData, update])\r\n\r\n  return tokenData || {}\r\n}\r\n\r\nexport function useTokenTransactions(tokenAddress) {\r\n  const [state, { updateTokenTxns }] = useTokenDataContext()\r\n  const tokenTxns = state?.[tokenAddress]?.txns\r\n\r\n  const allPairsFormatted =\r\n    state[tokenAddress] &&\r\n    state[tokenAddress].TOKEN_PAIRS_KEY &&\r\n    state[tokenAddress].TOKEN_PAIRS_KEY.map((pair) => {\r\n      return pair.id\r\n    })\r\n\r\n  useEffect(() => {\r\n    async function checkForTxns() {\r\n      if (!tokenTxns && allPairsFormatted) {\r\n        let transactions = await getTokenTransactions(allPairsFormatted)\r\n        updateTokenTxns(tokenAddress, transactions)\r\n      }\r\n    }\r\n    checkForTxns()\r\n  }, [tokenTxns, tokenAddress, updateTokenTxns, allPairsFormatted])\r\n\r\n  return tokenTxns || []\r\n}\r\n\r\nexport function useTokenPairs(tokenAddress) {\r\n  const [state, { updateAllPairs }] = useTokenDataContext()\r\n  const tokenPairs = state?.[tokenAddress]?.[TOKEN_PAIRS_KEY]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let allPairs = await getTokenPairs(tokenAddress)\r\n      updateAllPairs(tokenAddress, allPairs)\r\n    }\r\n    if (!tokenPairs && isAddress(tokenAddress)) {\r\n      fetchData()\r\n    }\r\n  }, [tokenAddress, tokenPairs, updateAllPairs])\r\n\r\n  return tokenPairs || []\r\n}\r\n\r\nexport function useTokenChartData(tokenAddress) {\r\n  const [state, { updateChartData }] = useTokenDataContext()\r\n  const chartData = state?.[tokenAddress]?.chartData\r\n  useEffect(() => {\r\n    async function checkForChartData() {\r\n      if (!chartData) {\r\n        let data = await getTokenChartData(tokenAddress)\r\n        updateChartData(tokenAddress, data)\r\n      }\r\n    }\r\n    checkForChartData()\r\n  }, [chartData, tokenAddress, updateChartData])\r\n  return chartData\r\n}\r\n\r\n/**\r\n * get candlestick data for a token - saves in context based on the window and the\r\n * interval size\r\n * @param {*} tokenAddress\r\n * @param {*} timeWindow // a preset time window from constant - how far back to look\r\n * @param {*} interval  // the chunk size in seconds - default is 1 hour of 3600s\r\n */\r\nexport function useTokenPriceData(tokenAddress, timeWindow, interval = 3600) {\r\n  const [state, { updatePriceData }] = useTokenDataContext()\r\n  const chartData = state?.[tokenAddress]?.[timeWindow]?.[interval]\r\n  const [latestBlock] = useLatestBlocks()\r\n\r\n  useEffect(() => {\r\n    const currentTime = dayjs.utc()\r\n    const windowSize = timeWindow === timeframeOptions.MONTH ? 'month' : 'week'\r\n    const startTime =\r\n      timeWindow === timeframeOptions.ALL_TIME ? 1589760000 : currentTime.subtract(1, windowSize).startOf('hour').unix()\r\n\r\n    async function fetch() {\r\n      let data = await getIntervalTokenData(tokenAddress, startTime, interval, latestBlock)\r\n      updatePriceData(tokenAddress, data, timeWindow, interval)\r\n    }\r\n    if (!chartData) {\r\n      fetch()\r\n    }\r\n  }, [chartData, interval, timeWindow, tokenAddress, updatePriceData, latestBlock])\r\n\r\n  return chartData\r\n}\r\n\r\nexport function useAllTokenData() {\r\n  const [state] = useTokenDataContext()\r\n  return state\r\n}\r\n","import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\r\nimport { useAllPairData, usePairData } from './PairData'\r\nimport { client, stakingClient } from '../apollo/client'\r\nimport {\r\n  USER_TRANSACTIONS,\r\n  USER_POSITIONS,\r\n  USER_HISTORY,\r\n  PAIR_DAY_DATA_BULK,\r\n  MINING_POSITIONS,\r\n} from '../apollo/queries'\r\nimport { useTimeframe, useStartTimestamp } from './Application'\r\nimport dayjs from 'dayjs'\r\nimport utc from 'dayjs/plugin/utc'\r\nimport { useEthPrice } from './GlobalData'\r\nimport { getLPReturnsOnPair, getHistoricalPairReturns } from '../utils/returns'\r\nimport { timeframeOptions } from '../constants'\r\n\r\ndayjs.extend(utc)\r\n\r\nconst UPDATE_TRANSACTIONS = 'UPDATE_TRANSACTIONS'\r\nconst UPDATE_POSITIONS = 'UPDATE_POSITIONS '\r\nconst UPDATE_MINING_POSITIONS = 'UPDATE_MINING_POSITIONS'\r\nconst UPDATE_USER_POSITION_HISTORY = 'UPDATE_USER_POSITION_HISTORY'\r\nconst UPDATE_USER_PAIR_RETURNS = 'UPDATE_USER_PAIR_RETURNS'\r\n\r\nconst TRANSACTIONS_KEY = 'TRANSACTIONS_KEY'\r\nconst POSITIONS_KEY = 'POSITIONS_KEY'\r\nconst MINING_POSITIONS_KEY = 'MINING_POSITIONS_KEY'\r\nconst USER_SNAPSHOTS = 'USER_SNAPSHOTS'\r\nconst USER_PAIR_RETURNS_KEY = 'USER_PAIR_RETURNS_KEY'\r\n\r\nconst UserContext = createContext()\r\n\r\nfunction useUserContext() {\r\n  return useContext(UserContext)\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case UPDATE_TRANSACTIONS: {\r\n      const { account, transactions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: {\r\n          ...state?.[account],\r\n          [TRANSACTIONS_KEY]: transactions,\r\n        },\r\n      }\r\n    }\r\n    case UPDATE_POSITIONS: {\r\n      const { account, positions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [POSITIONS_KEY]: positions },\r\n      }\r\n    }\r\n    case UPDATE_MINING_POSITIONS: {\r\n      const { account, miningPositions } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [MINING_POSITIONS_KEY]: miningPositions },\r\n      }\r\n    }\r\n    case UPDATE_USER_POSITION_HISTORY: {\r\n      const { account, historyData } = payload\r\n      return {\r\n        ...state,\r\n        [account]: { ...state?.[account], [USER_SNAPSHOTS]: historyData },\r\n      }\r\n    }\r\n\r\n    case UPDATE_USER_PAIR_RETURNS: {\r\n      const { account, pairAddress, data } = payload\r\n      return {\r\n        ...state,\r\n        [account]: {\r\n          ...state?.[account],\r\n          [USER_PAIR_RETURNS_KEY]: {\r\n            ...state?.[account]?.[USER_PAIR_RETURNS_KEY],\r\n            [pairAddress]: data,\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    default: {\r\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\r\n    }\r\n  }\r\n}\r\n\r\nconst INITIAL_STATE = {}\r\n\r\nexport default function Provider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\r\n\r\n  const updateTransactions = useCallback((account, transactions) => {\r\n    dispatch({\r\n      type: UPDATE_TRANSACTIONS,\r\n      payload: {\r\n        account,\r\n        transactions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updatePositions = useCallback((account, positions) => {\r\n    dispatch({\r\n      type: UPDATE_POSITIONS,\r\n      payload: {\r\n        account,\r\n        positions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateMiningPositions = useCallback((account, miningPositions) => {\r\n    dispatch({\r\n      type: UPDATE_MINING_POSITIONS,\r\n      payload: {\r\n        account,\r\n        miningPositions,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateUserSnapshots = useCallback((account, historyData) => {\r\n    dispatch({\r\n      type: UPDATE_USER_POSITION_HISTORY,\r\n      payload: {\r\n        account,\r\n        historyData,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  const updateUserPairReturns = useCallback((account, pairAddress, data) => {\r\n    dispatch({\r\n      type: UPDATE_USER_PAIR_RETURNS,\r\n      payload: {\r\n        account,\r\n        pairAddress,\r\n        data,\r\n      },\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <UserContext.Provider\r\n      value={useMemo(\r\n        () => [\r\n          state,\r\n          { updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns },\r\n        ],\r\n        [state, updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns]\r\n      )}\r\n    >\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useUserTransactions(account) {\r\n  const [state, { updateTransactions }] = useUserContext()\r\n  const transactions = state?.[account]?.[TRANSACTIONS_KEY]\r\n  useEffect(() => {\r\n    async function fetchData(account) {\r\n      try {\r\n        let result = await client.query({\r\n          query: USER_TRANSACTIONS,\r\n          variables: {\r\n            user: account,\r\n          },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (result?.data) {\r\n          updateTransactions(account, result?.data)\r\n        }\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    if (!transactions && account) {\r\n      fetchData(account)\r\n    }\r\n  }, [account, transactions, updateTransactions])\r\n\r\n  return transactions || {}\r\n}\r\n\r\n/**\r\n * Store all the snapshots of liquidity activity for this account.\r\n * Each snapshot is a moment when an LP position was created or updated.\r\n * @param {*} account\r\n */\r\nexport function useUserSnapshots(account) {\r\n  const [state, { updateUserSnapshots }] = useUserContext()\r\n  const snapshots = state?.[account]?.[USER_SNAPSHOTS]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        let skip = 0\r\n        let allResults = []\r\n        let found = false\r\n        while (!found) {\r\n          let result = await client.query({\r\n            query: USER_HISTORY,\r\n            variables: {\r\n              skip: skip,\r\n              user: account,\r\n            },\r\n            fetchPolicy: 'cache-first',\r\n          })\r\n          allResults = allResults.concat(result.data.liquidityPositionSnapshots)\r\n          if (result.data.liquidityPositionSnapshots.length < 1000) {\r\n            found = true\r\n          } else {\r\n            skip += 1000\r\n          }\r\n        }\r\n        if (allResults) {\r\n          updateUserSnapshots(account, allResults)\r\n        }\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    if (!snapshots && account) {\r\n      fetchData()\r\n    }\r\n  }, [account, snapshots, updateUserSnapshots])\r\n\r\n  return snapshots\r\n}\r\n\r\n/**\r\n * For a given position (data about holding) and user, get the chart\r\n * data for the fees and liquidity over time\r\n * @param {*} position\r\n * @param {*} account\r\n */\r\nexport function useUserPositionChart(position, account) {\r\n  const pairAddress = position?.pair?.id\r\n  const [state, { updateUserPairReturns }] = useUserContext()\r\n\r\n  // get oldest date of data to fetch\r\n  const startDateTimestamp = useStartTimestamp()\r\n\r\n  // get users adds and removes on this pair\r\n  const snapshots = useUserSnapshots(account)\r\n  const pairSnapshots =\r\n    snapshots &&\r\n    position &&\r\n    snapshots.filter((currentSnapshot) => {\r\n      return currentSnapshot.pair.id === position.pair.id\r\n    })\r\n\r\n  // get data needed for calculations\r\n  const currentPairData = usePairData(pairAddress)\r\n  const [currentETHPrice] = useEthPrice()\r\n\r\n  // formatetd array to return for chart data\r\n  const formattedHistory = state?.[account]?.[USER_PAIR_RETURNS_KEY]?.[pairAddress]\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let fetchedData = await getHistoricalPairReturns(\r\n        startDateTimestamp,\r\n        currentPairData,\r\n        pairSnapshots,\r\n        currentETHPrice\r\n      )\r\n      updateUserPairReturns(account, pairAddress, fetchedData)\r\n    }\r\n    if (\r\n      account &&\r\n      startDateTimestamp &&\r\n      pairSnapshots &&\r\n      !formattedHistory &&\r\n      currentPairData &&\r\n      Object.keys(currentPairData).length > 0 &&\r\n      pairAddress &&\r\n      currentETHPrice\r\n    ) {\r\n      fetchData()\r\n    }\r\n  }, [\r\n    account,\r\n    startDateTimestamp,\r\n    pairSnapshots,\r\n    formattedHistory,\r\n    pairAddress,\r\n    currentPairData,\r\n    currentETHPrice,\r\n    updateUserPairReturns,\r\n    position.pair.id,\r\n  ])\r\n\r\n  return formattedHistory\r\n}\r\n\r\n/**\r\n * For each day starting with min(first position timestamp, beginning of time window),\r\n * get total liquidity supplied by user in USD. Format in array with date timestamps\r\n * and usd liquidity value.\r\n */\r\nexport function useUserLiquidityChart(account) {\r\n  const history = useUserSnapshots(account)\r\n  // formatetd array to return for chart data\r\n  const [formattedHistory, setFormattedHistory] = useState()\r\n\r\n  const [startDateTimestamp, setStartDateTimestamp] = useState()\r\n  const [activeWindow] = useTimeframe()\r\n\r\n  // monitor the old date fetched\r\n  useEffect(() => {\r\n    const utcEndTime = dayjs.utc()\r\n    // based on window, get starttime\r\n    let utcStartTime\r\n    switch (activeWindow) {\r\n      case timeframeOptions.WEEK:\r\n        utcStartTime = utcEndTime.subtract(1, 'week').startOf('day')\r\n        break\r\n      case timeframeOptions.ALL_TIME:\r\n        utcStartTime = utcEndTime.subtract(1, 'year')\r\n        break\r\n      default:\r\n        utcStartTime = utcEndTime.subtract(1, 'year').startOf('year')\r\n        break\r\n    }\r\n    let startTime = utcStartTime.unix() - 1\r\n    if ((activeWindow && startTime < startDateTimestamp) || !startDateTimestamp) {\r\n      setStartDateTimestamp(startTime)\r\n    }\r\n  }, [activeWindow, startDateTimestamp])\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      let dayIndex = parseInt(startDateTimestamp / 86400) // get unique day bucket unix\r\n      const currentDayIndex = parseInt(dayjs.utc().unix() / 86400)\r\n\r\n      // sort snapshots in order\r\n      let sortedPositions = history.sort((a, b) => {\r\n        return parseInt(a.timestamp) > parseInt(b.timestamp) ? 1 : -1\r\n      })\r\n      // if UI start time is > first position time - bump start index to this time\r\n      if (parseInt(sortedPositions[0].timestamp) > dayIndex) {\r\n        dayIndex = parseInt(parseInt(sortedPositions[0].timestamp) / 86400)\r\n      }\r\n\r\n      const dayTimestamps = []\r\n      // get date timestamps for all days in view\r\n      while (dayIndex < currentDayIndex) {\r\n        dayTimestamps.push(parseInt(dayIndex) * 86400)\r\n        dayIndex = dayIndex + 1\r\n      }\r\n\r\n      const pairs = history.reduce((pairList, position) => {\r\n        return [...pairList, position.pair.id]\r\n      }, [])\r\n\r\n      // get all day datas where date is in this list, and pair is in pair list\r\n      let {\r\n        data: { pairDayDatas },\r\n      } = await client.query({\r\n        query: PAIR_DAY_DATA_BULK(pairs, startDateTimestamp),\r\n      })\r\n\r\n      const formattedHistory = []\r\n\r\n      // map of current pair => ownership %\r\n      const ownershipPerPair = {}\r\n      for (const index in dayTimestamps) {\r\n        const dayTimestamp = dayTimestamps[index]\r\n        const timestampCeiling = dayTimestamp + 86400\r\n\r\n        // cycle through relevant positions and update ownership for any that we need to\r\n        const relevantPositions = history.filter((snapshot) => {\r\n          return snapshot.timestamp < timestampCeiling && snapshot.timestamp > dayTimestamp\r\n        })\r\n        for (const index in relevantPositions) {\r\n          const position = relevantPositions[index]\r\n          // case where pair not added yet\r\n          if (!ownershipPerPair[position.pair.id]) {\r\n            ownershipPerPair[position.pair.id] = {\r\n              lpTokenBalance: position.liquidityTokenBalance,\r\n              timestamp: position.timestamp,\r\n            }\r\n          }\r\n          // case where more recent timestamp is found for pair\r\n          if (ownershipPerPair[position.pair.id] && ownershipPerPair[position.pair.id].timestamp < position.timestamp) {\r\n            ownershipPerPair[position.pair.id] = {\r\n              lpTokenBalance: position.liquidityTokenBalance,\r\n              timestamp: position.timestamp,\r\n            }\r\n          }\r\n        }\r\n\r\n        const relavantDayDatas = Object.keys(ownershipPerPair).map((pairAddress) => {\r\n          // find last day data after timestamp update\r\n          const dayDatasForThisPair = pairDayDatas.filter((dayData) => {\r\n            return dayData.pairAddress === pairAddress\r\n          })\r\n          // find the most recent reference to pair liquidity data\r\n          let mostRecent = dayDatasForThisPair[0]\r\n          for (const index in dayDatasForThisPair) {\r\n            const dayData = dayDatasForThisPair[index]\r\n            if (dayData.date < dayTimestamp && dayData.date > mostRecent.date) {\r\n              mostRecent = dayData\r\n            }\r\n          }\r\n          return mostRecent\r\n        })\r\n\r\n        // now cycle through pair day datas, for each one find usd value = ownership[address] * reserveUSD\r\n        const dailyUSD = relavantDayDatas.reduce((totalUSD, dayData) => {\r\n          if (dayData) {\r\n            return (totalUSD =\r\n              totalUSD +\r\n              (ownershipPerPair[dayData.pairAddress]\r\n                ? (parseFloat(ownershipPerPair[dayData.pairAddress].lpTokenBalance) / parseFloat(dayData.totalSupply)) *\r\n                  parseFloat(dayData.reserveUSD)\r\n                : 0))\r\n          } else {\r\n            return totalUSD\r\n          }\r\n        }, 0)\r\n\r\n        formattedHistory.push({\r\n          date: dayTimestamp,\r\n          valueUSD: dailyUSD,\r\n        })\r\n      }\r\n\r\n      setFormattedHistory(formattedHistory)\r\n    }\r\n    if (history && startDateTimestamp && history.length > 0) {\r\n      fetchData()\r\n    }\r\n  }, [history, startDateTimestamp])\r\n\r\n  return formattedHistory\r\n}\r\n\r\nexport function useUserPositions(account) {\r\n  const [state, { updatePositions }] = useUserContext()\r\n  const positions = state?.[account]?.[POSITIONS_KEY]\r\n\r\n  const snapshots = useUserSnapshots(account)\r\n  const [ethPrice] = useEthPrice()\r\n\r\n  useEffect(() => {\r\n    async function fetchData(account) {\r\n      try {\r\n        let result = await client.query({\r\n          query: USER_POSITIONS,\r\n          variables: {\r\n            user: account,\r\n          },\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (result?.data?.liquidityPositions) {\r\n          let formattedPositions = await Promise.all(\r\n            result?.data?.liquidityPositions.map(async (positionData) => {\r\n              const returnData = await getLPReturnsOnPair(account, positionData.pair, ethPrice, snapshots)\r\n              return {\r\n                ...positionData,\r\n                ...returnData,\r\n              }\r\n            })\r\n          )\r\n          updatePositions(account, formattedPositions)\r\n        }\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    if (!positions && account && ethPrice && snapshots) {\r\n      fetchData(account)\r\n    }\r\n  }, [account, positions, updatePositions, ethPrice, snapshots])\r\n\r\n  return positions\r\n}\r\n\r\nexport function useMiningPositions(account) {\r\n  const [state, { updateMiningPositions }] = useUserContext()\r\n  const allPairData = useAllPairData()\r\n  const miningPositions = state?.[account]?.[MINING_POSITIONS_KEY]\r\n\r\n  const snapshots = useUserSnapshots(account)\r\n\r\n  useEffect(() => {\r\n    async function fetchData(account) {\r\n      try {\r\n        let miningPositionData = []\r\n        let result = await stakingClient.query({\r\n          query: MINING_POSITIONS(account),\r\n          fetchPolicy: 'no-cache',\r\n        })\r\n        if (!result?.data?.user?.miningPosition) {\r\n          return\r\n        }\r\n        miningPositionData = result.data.user.miningPosition\r\n        for (const miningPosition of miningPositionData) {\r\n          const pairAddress = miningPosition.miningPool.pair.id\r\n          miningPosition.pairData = allPairData[pairAddress]\r\n        }\r\n        updateMiningPositions(account, miningPositionData)\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n\r\n    if (!miningPositions && account && snapshots) {\r\n      fetchData(account)\r\n    }\r\n  }, [account, miningPositions, updateMiningPositions, snapshots, allPairData])\r\n  return miningPositions\r\n}\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nconst Logo = () => {\r\n    return (\r\n      <div className=\"col-7 col-md-6 col-lg-2\">\r\n        <StyledLink to=\"/\"><img src=\"../logo.png\" alt=\"Pegaswap\" /></StyledLink>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst StyledNav = styled.nav`\r\n    position:relative;\r\n    .sub-trade{\r\n      display:none;\r\n      border-radius:3px;\r\n      padding-top:10px;\r\n      ul{\r\n        padding-left:0;\r\n        li{\r\n          margin-bottom:10px;\r\n          a{\r\n            text-decoration:none;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    .paren_item{\r\n      position:relative;\r\n      cursor: inherit;\r\n    &:hover{\r\n      .sub-trade{\r\n          li{\r\n            list-style:none;\r\n            a{\r\n              font-size:14px;\r\n            }\r\n          }\r\n          background:#fff;\r\n          padding-left:0;\r\n          display:block;\r\n          position:absolute;\r\n          left:15px;\r\n          top:20px\r\n      }\r\n    }\r\n    }\r\n    display:none;\r\n    @media (min-width: 768px) {\r\n      display:block;\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\nconst StyledLink = styled(NavLink)`\r\n  display: block;\r\n  max-width: 125px;\r\n  width: 100%;\r\n  transition: all 0.5s ease-in-out 0s;\r\n  outline: none;\r\n  text-decoration: none!important;\r\n  overflow: hidden;\r\n  float: left;\r\n\r\n  img{\r\n    width: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  &:hover {\r\n    \r\n  }\r\n  \r\n  @media (max-width: 576px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n    margin-left:25px;\r\n  }\r\n  \r\n`\r\n\r\nconst StyledAbsoluteLink = styled.a`\r\n  color: rgb(31, 199, 212);\r\n  font-weight: 700;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  text-decoration: none;\r\n  &:hover {\r\n    color: #805e49;\r\n  }\r\n  &.active {\r\n    color: green[500];\r\n  }\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n`\r\n\r\nexport default Logo","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nconst ListIcon = () => {\r\n  return (\r\n    <BoxIcon className=\"hide_pc\">\r\n      <a target=\"_blank\" href=\"https://pegaswap.com/\"><i class=\"fa fa-home\"></i></a>\r\n      <a target=\"_blank\" href=\"https://twitter.com/PegaSwap\"><i class=\"fa fa-twitter\"></i></a>\r\n      <a target=\"_blank\" href=\"https://github.com/pegaswap-defi\"><i class=\"fa fa-github\"></i></a>\r\n    </BoxIcon>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst BoxIcon = styled.div`\r\n  max-width: 100px;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  i{\r\n    font-size:20px;\r\n    color: white;\r\n    transition: ease-in-out .5s all;\r\n\r\n    &:hover{\r\n      transform: scale(1.3);\r\n    }\r\n\r\n  }\r\n  \r\n  @media(max-width:576px){\r\n    display:none;\r\n  }\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ListIcon","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\nconst Search = () => {\r\n  return (\r\n    <GroupNav>\r\n      <SearchPage>\r\n        <form className=\"search-fr\" method=\"GET\" action=\"\">\r\n          <button type=\"submit\">\r\n            <span className=\"fa fa-search\" />\r\n          </button>\r\n          <input required id=\"search\" type=\"text\" name=\"q\" className=\"input-text\" maxLength={128} />\r\n        </form>\r\n      </SearchPage>\r\n    </GroupNav>\r\n  )\r\n}\r\n\r\nconst GroupNav = styled.div`\r\n  max-width: 245px;\r\n  height: 100%;\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`\r\n\r\nconst SearchPage = styled.div`\r\n  position:relative;\r\n  .fa-search {\r\n    color: white;\r\n  }\r\n  form{\r\n    position:relative;\r\n    display: flex;\r\n    button{\r\n      border: none;\r\n      background: transparent;\r\n      color: #7b7b7b;\r\n      outline: none;\r\n      @media screen and (max-width: 576px){\r\n        position: absolute;\r\n        font-size: 12px;\r\n        top: 2px;\r\n    }\r\n      }\r\n      \r\n    input{\r\n      border: none;\r\n      outline: none;\r\n      border-radius:25px;\r\n      padding-left:20px;\r\n      font-size:13px;\r\n      padding:3px 0 3px 20px;\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst LinkParen = styled.a`\r\n  color: #99378E;\r\n  font-weight: 700;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  text-decoration: none!important;\r\n  .down-menu{\r\n    font-size:12px;\r\n  }\r\n  &:hover {\r\n    color: #805e49;\r\n  }\r\n  &.active {\r\n    color: #000;\r\n  }\r\n  \r\n`\r\n\r\n\r\n\r\nconst StyledLink = styled(NavLink)`\r\n  color: #99378E;\r\n  font-weight: 700;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  text-decoration: none!important;\r\n  &:hover {\r\n    color: #805e49;\r\n  }\r\n  &.active {\r\n    color: #000;\r\n  }\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n  \r\n`\r\n\r\nconst StyledAbsoluteLink = styled.a`\r\n  color: rgb(31, 199, 212);\r\n  font-weight: 700;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  text-decoration: none;\r\n  &:hover {\r\n    color: #805e49;\r\n  }\r\n  &.active {\r\n    color: green[500];\r\n  }\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n`\r\n\r\nexport default Search","import React, { useState, useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Nav = () => {\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 72) {\r\n        document.body.classList.add(\"fix\");\r\n      } else {\r\n        document.body.classList.remove(\"fix\");\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const [isActive, setActive] = useState(false);\r\n  const [binance, setBinance] = useState(false);\r\n  const [amm, setAmm] = useState(false);\r\n  const [welcome, setWelcome] = useState(false);\r\n  const [swap, setSwap] = useState(false);\r\n\r\n  const openWelcome = () => {\r\n    setWelcome(!welcome);\r\n  };\r\n\r\n  const openBinance = () => {\r\n    setBinance(!binance);\r\n  };\r\n\r\n  const openAmm = () => {\r\n    setAmm(!amm);\r\n  };\r\n\r\n  const openSwap = () => {\r\n    setSwap(!swap);\r\n  };\r\n\r\n  return (\r\n    <BoxSidebar>\r\n      <ul className=\"sidebar-top\" style={{ marginTop: \"20px\" }}>\r\n        <TitleMenuDropdown className=\"box-childpage\">\r\n          <Flex onClick={openWelcome}>\r\n            <span\r\n              className=\"box-title\"\r\n              style={{ fontWeight: \"bold\", fontSize: \"16px\" }}\r\n            >\r\n              Welcome to Pegaswap\r\n            </span>\r\n            <span\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            ></span>\r\n          </Flex>\r\n          <WrapperWelcomeLink>\r\n            <StyledLink activeClassName=\"active\" to=\"/welcome/introduction\">\r\n              Introduction\r\n            </StyledLink>\r\n            <StyledLink activeClassName=\"active\" to=\"/welcome/what-is-pegaswap\">\r\n              What Is PegaSwap ?{\" \"}\r\n            </StyledLink>\r\n            <StyledLink\r\n              activeClassName=\"active\"\r\n              to=\"/welcome/pegaswap-is-on-the-binance-smart-chain\"\r\n            >\r\n              PegaSwap is on the Binance Smart Chain\r\n            </StyledLink>\r\n            <StyledLink\r\n              activeClassName=\"active\"\r\n              to=\"/welcome/what-can-you-do-on-pegaswap\"\r\n            >\r\n              What can you do on PegaSwap?\r\n            </StyledLink>\r\n            <StyledLink\r\n              activeClassName=\"active\"\r\n              to=\"/welcome/community-socials\"\r\n            >\r\n              Community & Socials\r\n            </StyledLink>\r\n            <StyledLink activeClassName=\"active\" to=\"/welcome/roadmap\">\r\n              Roadmap\r\n            </StyledLink>\r\n          </WrapperWelcomeLink>\r\n        </TitleMenuDropdown>\r\n      </ul>\r\n      <ul className=\"sidebar-middle\">\r\n        <TitleSide>General</TitleSide>\r\n        <TitleMenuDropdown className=\"box-childpage\">\r\n          <Flex onClick={openBinance}>\r\n            <img src=\"../images/icon-docs/yield.svg\" />\r\n            <div>\r\n              <span className=\"box-title\">Binance Smart Chain</span>\r\n              <i\r\n                style={{\r\n                  transform: !binance ? \"rotate(0)\" : \"rotate(90deg)\",\r\n                  transition: \"all ease-in-out .3s\",\r\n                }}\r\n                className=\"fas fa-chevron-right\"\r\n              ></i>\r\n            </div>\r\n          </Flex>\r\n          <DropdownMenu style={{ maxHeight: !binance ? \"0\" : \"400px\" }}>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/binance/introduction\"\r\n            >\r\n              Introduction\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/binance/what-is-binance-smart-chain\"\r\n            >\r\n              What is Binance Smart Chain?\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/binance/how-does-binance-smart-chain-work\"\r\n            >\r\n              How does Binance Smart Chain work?\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/binance/decentralized-finance-on-binance-smart-chain\"\r\n            >\r\n              Decentralized Finance on Binance Smart Chain\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/binance/closing-thoughts\"\r\n            >\r\n              Closing thoughts\r\n            </StyledDropdownLink>\r\n          </DropdownMenu>\r\n        </TitleMenuDropdown>\r\n        <TitleMenuDropdown className=\"box-childpage\">\r\n          <Flex onClick={openAmm}>\r\n            <img src=\"../images/icon-docs/nfts.svg\" />\r\n            <div>\r\n              <span className=\"box-title\">AMM / Exchange</span>\r\n              <i\r\n                style={{\r\n                  transform: !amm ? \"rotate(0)\" : \"rotate(90deg)\",\r\n                  transition: \"all ease-in-out .3s\",\r\n                }}\r\n                className=\"fas fa-chevron-right\"\r\n              ></i>\r\n            </div>\r\n          </Flex>\r\n          <DropdownMenu style={{ maxHeight: !amm ? \"0\" : \"400px\" }}>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/amm/how-does-an-automated-market-maker-amm-work\"\r\n            >\r\n              How does an automated market maker &#40;AMM&#41; work?\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/amm/what-is-a-liquidity-pool\"\r\n            >\r\n              What is a liquidity pool?\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/amm/what-is-impermanent-loss\"\r\n            >\r\n              What is impermanent loss?\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/amm/closing-thoughts\"\r\n            >\r\n              Closing thoughts\r\n            </StyledDropdownLink>\r\n          </DropdownMenu>\r\n        </TitleMenuDropdown>\r\n        <TitleSide style={{ marginTop: \"20px\" }}>PegaSwap Protocol</TitleSide>\r\n\r\n        <TitleMenuDropdown className=\"box-childpage\">\r\n          <FlexSwap\r\n            className=\"link-mode\"\r\n            exact\r\n            activeClassName=\"active\"\r\n            to=\"/swap\"\r\n            onClick={openSwap}\r\n          >\r\n            <img src=\"../images/icon-docs/pool.svg\" />\r\n            <div>\r\n              <span className=\"box-title\">Swap</span>\r\n              <i\r\n                style={{\r\n                  transform: !swap ? \"rotate(0)\" : \"rotate(90deg)\",\r\n                  transition: \"all ease-in-out .3s\",\r\n                }}\r\n                className=\"fas fa-chevron-right\"\r\n              ></i>\r\n            </div>\r\n          </FlexSwap>\r\n          <DropdownMenu style={{ maxHeight: !swap ? \"0\" : \"400px\" }}>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/swap/How-to-Trade-on-PegaSwap\"\r\n            >\r\n              How to Trade on PegaSwap\r\n            </StyledDropdownLink>\r\n            <StyledDropdownLink\r\n              activeClassName=\"active\"\r\n              to=\"/swap/Liquidity-Pools-Adding-Liquidity\"\r\n            >\r\n              Liquidity Pools & Adding Liquidity\r\n            </StyledDropdownLink>\r\n          </DropdownMenu>\r\n        </TitleMenuDropdown>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/yield-farming\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/yield.svg\" />\r\n            <span>Yield Farming</span>\r\n          </Flex>\r\n        </StyledLink>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/staking-pools\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/staking.svg\" />\r\n            <span>Staking Pools</span>\r\n          </Flex>\r\n        </StyledLink>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/none-fungible-token\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/nfts.svg\" />\r\n            <span>Non Fungible Token (NFTs)</span>\r\n          </Flex>\r\n        </StyledLink>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/gaming\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/yield.svg\" />\r\n            <span>Gaming</span>\r\n          </Flex>\r\n        </StyledLink>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/governance\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/pool.svg\" />\r\n            <span>Governance</span>\r\n          </Flex>\r\n        </StyledLink>\r\n      </ul>\r\n\r\n      <ul className=\"sidebar-middle\">\r\n        <TitleSide>Guides</TitleSide>\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/how-to-use-metamask-for-binance-smart-chain\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/guide1.svg\" />\r\n            <span>How to use MetaMask For Binance Smart Chain</span>\r\n          </Flex>\r\n        </StyledLink>\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/how-to-set-up-and-use-trust-wallet-for-binance-smart-chain\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/guide2.svg\" />\r\n            <span>\r\n              How to Set Up and Use Trust Wallet for Binance Smart Chain\r\n            </span>\r\n          </Flex>\r\n        </StyledLink>\r\n      </ul>\r\n\r\n      {/* <ul className=\"sidebar-middle\">\r\n        <TitleSide>Ecosystem</TitleSide>\r\n\r\n        <StyledLink\r\n          className=\"link-mode\"\r\n          exact\r\n          activeClassName=\"active\"\r\n          to=\"/faq\"\r\n        >\r\n          <Flex>\r\n            <img src=\"../images/icon-docs/faq.svg\" />\r\n            <span>FAQ</span>\r\n          </Flex>\r\n        </StyledLink>\r\n      </ul> */}\r\n    </BoxSidebar>\r\n  );\r\n};\r\n\r\nconst WrapperWelcomeLink = styled.div`\r\n  padding-left: 20px;\r\n`;\r\n\r\nconst TitleMenuDropdown = styled.div`\r\n  cursor: pointer;\r\n  .box-childpage {\r\n    display: flex;\r\n    .box-title {\r\n      width: 90%;\r\n    }\r\n  }\r\n  &.no-mp {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  text-decoration: none !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: black;\r\n  margin-bottom: 7px;\r\n  position: relative;\r\n  // z-index: 5;\r\n  display: block;\r\n  padding: 5px 0;\r\n  // span{\r\n  //   z-index: 10;\r\n  // }\r\n  &:hover {\r\n    color: black;\r\n  }\r\n  &.active {\r\n    color: black;\r\n    font-weight: bold;\r\n  }\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n  .sub-menu-bar {\r\n    display: none;\r\n  }\r\n  .ic-right {\r\n    width: 25px;\r\n    height: 25px;\r\n    color: #000;\r\n    // float:right;\r\n    display: flex;\r\n    align-items: center;\r\n    pegatify-content: center;\r\n  }\r\n  .ic-rote {\r\n    width: 25px;\r\n    height: 25px;\r\n    color: #000;\r\n    // float:right;\r\n    display: flex;\r\n    align-items: center;\r\n    pegatify-content: center;\r\n    i {\r\n      transition: ease-in-out 0.5s all;\r\n      transform: rotate(-90deg);\r\n    }\r\n  }\r\n\r\n  .thum-nav {\r\n    max-width: 18px;\r\n    width: 100%;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nconst DropdownMenu = styled.div`\r\n  max-height: 0;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 20px;\r\n  border-left: 1px #a9088e solid;\r\n  padding-bottom: 0;\r\n`;\r\nconst StyledDropdownLink = styled(NavLink)`\r\n  padding: 5px 15px;\r\n  color: black;\r\n  font-weight: 100px;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  font-size: 12px;\r\n  text-decoration: none !important;\r\n  text-shadow: 0 0 64px rgb(192 219 255 / 48%), 0 0 16px rgb(65 120 255 / 24%);\r\n  transition: 0.2s ease-in-out all;\r\n  margin-bottom: 5px;\r\n  cursor: pointer;\r\n  &.active {\r\n    font-weight: bold;\r\n    border-bottom: 1px solid #a9088e;\r\n  }\r\n  :hover {\r\n    color: black;\r\n  }\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n`;\r\n\r\nconst Flex = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 90%;\r\n  position: relative;\r\n  i {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n`;\r\nconst FlexSwap = styled(NavLink)`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 90%;\r\n  position: relative;\r\n  i {\r\n    position: absolute;\r\n    right: 0;\r\n  }\r\n  &.active {\r\n    font-weight: bold;\r\n  }\r\n  :hover {\r\n    color: black;\r\n    text-decoration: none;\r\n  }\r\n  &:last-child {\r\n    margin-bottom: 0;\r\n  }\r\n  color: black;\r\n`;\r\n\r\nconst BoxSidebar = styled.div`\r\n  position: relative;\r\n\r\n  .sidebar-middle {\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  @media (min-width: 1600px) {\r\n  }\r\n\r\n  @media (max-width: 1025px) {\r\n  }\r\n  img {\r\n    width: 20px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nconst TitleSide = styled.h3`\r\n  font-size: 16px;\r\n  color: black;\r\n  font-weight: bold;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst BlankLink = styled.a`\r\n  text-decoration: none !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: black;\r\n  margin-bottom: 7px;\r\n  position: relative;\r\n  display: block;\r\n  padding: 5px 0;\r\n\r\n  .thum-nav {\r\n    max-width: 18px;\r\n    width: 100%;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled(NavLink)`\r\n  .box-childpage {\r\n    display: flex;\r\n    .box-title {\r\n      width: 90%;\r\n    }\r\n  }\r\n  &.no-mp {\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n\r\n  text-decoration: none !important;\r\n  font-size: 13px;\r\n  font-weight: 500;\r\n  color: black;\r\n  margin-bottom: 7px;\r\n  position: relative;\r\n  // z-index: 5;\r\n  display: block;\r\n  padding: 5px 0;\r\n  // span{\r\n  //   z-index: 10;\r\n  // }\r\n  &:hover {\r\n    color: black;\r\n  }\r\n  &.active {\r\n    color: black;\r\n    font-weight: bold;\r\n  }\r\n  @media (max-width: 400px) {\r\n    padding-left: 8px;\r\n    padding-right: 8px;\r\n  }\r\n  .sub-menu-bar {\r\n    display: none;\r\n  }\r\n  .ic-right {\r\n    width: 25px;\r\n    height: 25px;\r\n    color: #000;\r\n    // float:right;\r\n    display: flex;\r\n    align-items: center;\r\n    pegatify-content: center;\r\n  }\r\n  .ic-rote {\r\n    width: 25px;\r\n    height: 25px;\r\n    color: #000;\r\n    // float:right;\r\n    display: flex;\r\n    align-items: center;\r\n    pegatify-content: center;\r\n    i {\r\n      transition: ease-in-out 0.5s all;\r\n      transform: rotate(-90deg);\r\n    }\r\n  }\r\n\r\n  .thum-nav {\r\n    max-width: 18px;\r\n    width: 100%;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport default Nav;\r\n","import React, { useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport ListIcon from \"../Header/components/ListIcon\";\r\nimport Nav from \"../SideBar/components/Nav\";\r\n\r\n\r\nconst ButtonMenu = ({ status, onClose }) => {\r\n\r\n  return (\r\n    <StyledBlock>\r\n      <StyledCard className={`${status ? \"active\" : \"\"}`}>\r\n        <StyledHover className=\"topRight\" onClick={onClose}>\r\n          <svg\r\n            viewBox=\"0 0 24 24\"\r\n            color=\"text\"\r\n            width=\"20px\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            class=\"sc-hBEYos ivTGBL\"\r\n          >\r\n            <path d=\"M18.3 5.70997C17.91 5.31997 17.28 5.31997 16.89 5.70997L12 10.59L7.10997 5.69997C6.71997 5.30997 6.08997 5.30997 5.69997 5.69997C5.30997 6.08997 5.30997 6.71997 5.69997 7.10997L10.59 12L5.69997 16.89C5.30997 17.28 5.30997 17.91 5.69997 18.3C6.08997 18.69 6.71997 18.69 7.10997 18.3L12 13.41L16.89 18.3C17.28 18.69 17.91 18.69 18.3 18.3C18.69 17.91 18.69 17.28 18.3 16.89L13.41 12L18.3 7.10997C18.68 6.72997 18.68 6.08997 18.3 5.70997Z\"></path>\r\n          </svg>\r\n        </StyledHover>\r\n        <StyledMainNav>\r\n          <Nav/>\r\n          <ListIcon/>\r\n        </StyledMainNav>\r\n      </StyledCard>\r\n      <StyledBg onClick={onClose} className={`${status ? \"display\" : \"\"}`} />\r\n    </StyledBlock>\r\n  );\r\n};\r\n\r\n\r\nconst StyledMainNav = styled.div`\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    order: 2;\r\n    margin-bottom: 32px;\r\n    height: 100%;\r\n    overflow-y: scroll;\r\n    .link{\r\n      cursor: pointer;\r\n      display: flex;\r\n      -webkit-box-align: center;\r\n      align-items: center;\r\n      width: 100%;\r\n      min-height: 40px;\r\n      padding: 8px 40px;\r\n      font-weight: 700;\r\n      transition: background-color 0.2s ease 0s;\r\n      color: #99378E;\r\n    }\r\n    .link:hover {\r\n      background-color: rgb(238, 234, 244);\r\n      text-decoration: unset;\r\n      \r\n    }\r\n\r\n    @media (max-width:576px){\r\n      .hide_pc{\r\n        display:block;\r\n        \r\n        i{\r\n          margin-right:10px;\r\n        }\r\n\r\n      }\r\n    }\r\n`;\r\n\r\nconst StyledBlock = styled.div``;\r\n\r\nconst StyledHover = styled.div`\r\n\r\n  &.fill{\r\n    svg{\r\n      fill: rgb(31, 199, 212);\r\n    }\r\n   \r\n  }\r\n\r\n  &.topRight{\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n  }\r\n\r\n  -webkit-box-align: center;\r\n  align-items: center;\r\n  background-color: transparent;\r\n  border: 0px;\r\n  border-radius: 16px;\r\n  box-shadow: none;\r\n  color: rgb(31, 199, 212);\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  font-family: inherit;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  width: max-content;\r\n  height: 32px;\r\n  line-height: 1;\r\n  letter-spacing: 0.03em;\r\n  -webkit-box-pack: center;\r\n  justify-content: center;\r\n  outline: 0px;\r\n  padding: 0px 16px;\r\n  transition: background-color 0.2s ease 0s;\r\n\r\n  padding: 0px 8px;\r\n  border-radius: 8px;\r\n\r\n  svg {\r\n    fill: rgb(69, 42, 122);\r\n  }\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: rgb(239, 244, 245);\r\n    border-color: currentcolor;\r\n  }\r\n`;\r\n\r\nconst StyledBg = styled.div`\r\n  position: fixed;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(24, 48, 85, 0.3);\r\n  transition: opacity 0.4s ease 0s;\r\n  opacity: 0.6;\r\n  pointer-events: initial;\r\n  display: none;\r\n  z-index: 99;\r\n  &.display {\r\n    display: unset;\r\n  }\r\n`;\r\n\r\nconst StyledCard = styled.div`\r\nposition: fixed;\r\ndisplay: flex;\r\nflex-direction: column;\r\nbackground-color: rgb(255, 255, 255);\r\ntop: 0px;\r\nleft: -100%;\r\nwidth: 100%;\r\nmax-width: 320px;\r\nheight: 100vh;\r\npadding: 45px 0px;\r\noverflow-y: auto;\r\ntransition: right 0.4s ease 0s;\r\nz-index: 999;\r\n&.active{\r\n  left: 0px;\r\n}\r\n  .nav-ct{\r\n    display: flex;\r\n    -webkit-box-align: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    order: 2;\r\n    margin-bottom: 32px;\r\n    \r\n  }\r\n  button{\r\n   \r\n    i {\r\n      width: auto;\r\n      height: auto;\r\n      border: none;\r\n    }\r\n    i:after{\r\n      content: \"\";\r\n      display: block;\r\n      margin: auto;\r\n      width: 17px;\r\n      border-bottom: solid 2px #ffe630;\r\n      transform: rotate(-45deg);\r\n      margin-top: -2px;\r\n    }\r\n    i:before{\r\n      content: \"\";\r\n      display: block;\r\n      margin: auto;\r\n      width: 17px;\r\n      border-bottom: solid 2px #ffe630;\r\n      transform: rotate(45deg);\r\n    }\r\n    .m-nav .main-nav > ul > li > a {\r\n      display: block;\r\n      font-weight: normal;\r\n      border: none;\r\n      border-top: solid 1px #e6e6e6;\r\n      line-height: 20px;\r\n      padding: 10px 15px 10px 15px;\r\n      color: rgb(31, 199, 212);\r\n      margin: 0px;\r\n      text-transform: none;\r\n  }\r\n`;\r\n\r\nexport default ButtonMenu;\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\n// import Nav from './components/Nav'\r\nimport Logo from './components/Logo'\r\nimport ListIcon from './components/ListIcon'\r\nimport Search from './components/Search'\r\nimport ButtonMenu from '../ButtonMenu'\r\n\r\n\r\n\r\n\r\nconst Header = () => {\r\n  const [Status, setStatus] = useState(false);\r\n\r\n  return (\r\n    <StyleHeader>\r\n      <HeaderTop>\r\n      <svg\r\n            onClick={() => setStatus(true)}\r\n            preserveAspectRatio=\"xMidYMid meet\"\r\n            height=\"1em\"\r\n            width=\"1em\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke-width=\"2\"\r\n            stroke-linecap=\"round\"\r\n            stroke-linejoin=\"round\"\r\n            stroke=\"currentColor\"\r\n            class=\"icon-7f6730be--text-3f89f380--icon-1f8349b3\"\r\n          >\r\n            <g>\r\n              <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\r\n              <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\r\n              <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\r\n            </g>\r\n          </svg>\r\n        <div className=\"container inner\">\r\n          <div className=\"row\">\r\n            <Logo />\r\n            <div className=\"col-5 col-md-6 col-lg-10\">\r\n              <HeaderItem>\r\n                <Search />\r\n                <ListIcon />\r\n              </HeaderItem>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </HeaderTop>\r\n      <StyledButtonMenu className={`${Status ? \"active\" : \"\"}`}>\r\n        <ButtonMenu onClose={() => setStatus(false)} status={Status} />\r\n      </StyledButtonMenu>\r\n    </StyleHeader>\r\n  );\r\n}\r\nconst StyledButtonMenu = styled.div`\r\n  opacity: 1;\r\n  transition: ease-in-out .5s all;\r\n  &.active{\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst StyleHeader = styled.header`\r\n  position: fixed;\r\n  width:100%;\r\n  z-index:99;\r\n  top:0;\r\n  left:0;\r\n  box-shadow: rgba(116, 129, 141, 0.1) 0px 3px 8px 0px;\r\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, rgb(158, 18, 141) 0%, rgb(122, 23, 136) 100%);\r\n    border-bottom: 1px solid rgb(212, 218, 223);\r\n  padding:10px 0;\r\n\r\n  .inner{\r\n    @media(min-width:1200px){\r\n      max-width: 1440px;\r\n    }\r\n    @media(min-width:1500px){\r\n      max-width: 1920px;\r\n    }\r\n  }\r\n`\r\n\r\nconst HeaderItem = styled.div`\r\n    display: flex;\r\n    height: 100%;\r\n    width: 100%;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`\r\n\r\nconst HeaderTop = styled.section`\r\n  position:relative;\r\n  svg{\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 2%;\r\n    transform: translate(50%, -50%);\r\n    cursor: pointer;\r\n    z-index: 99;\r\n    color: white;\r\n  }\r\n  @media screen and (min-width: 991px){\r\n    svg{\r\n      display:none;\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport ButtonMenu from '../ButtonMenu';\r\nimport Nav from './components/Nav'\r\n\r\nconst SideBar = () => {\r\n\r\n\r\n  return (\r\n    <StyledSideBar >\r\n      <Nav />\r\n    </StyledSideBar>\r\n  );\r\n}\r\n\r\nconst StyledSideBar = styled.section`\r\n  display: none;\r\n  @media screen and (min-width: 768px){\r\n    display: block;\r\n    overflow-y:auto;\r\n    height:95vh;\r\n    padding: 0;\r\n  }\r\n  ::-webkit-scrollbar{\r\n    width: 6px;\r\n  }\r\n  ::-webkit-scrollbar-thumb {\r\n    background:#bdf4fd;\r\n    border-radius: 10px;\r\n  }\r\n\r\n`\r\n\r\nexport default SideBar","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TitleChild = ({ title}) => {\r\n  return <ContentTitle className=\"title\">{title}</ContentTitle>;\r\n};\r\n\r\nconst ContentTitle = styled.h3`\r\n    max-width: 600px;\r\n    margin-bottom: 25px;\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    padding-bottom: 20px;\r\n    border-bottom: 2px solid #E6ECF1;\r\n    @media(max-width:770px){\r\n      font-size:24px;\r\n    }\r\n    img{\r\n      max-width:30px;\r\n      width: 100%;\r\n      margin-top:-7px;\r\n    }\r\n`;\r\n\r\nexport default TitleChild;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Title from '../../components/TitleChild'\r\n\r\n// import Item from './components/Item'\r\n// import CountUp from 'react-countup';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Box_home>\r\n      <Title title=\"How to use Metamask For Binance Smart Chain\"></Title>\r\n      <ThumPage>\r\n        <img src=\"./images/thumb1.jpg\" alt=\"\" />\r\n      </ThumPage>\r\n      <H2>What is it?</H2>\r\n      <p>MetaMask was created out of the needs of creating more secure and usable Ethereum-based web sites. In particular, it handles account management and connecting the user to the blockchain. It’s supported in Chrome, Brave, and Safari browsers.</p>\r\n      <H2>Install</H2>\r\n      <p>Example: Install MetaMask in browser</p>\r\n      <ul>\r\n        <li>Open Extension Category in Chrome <a href=\"https://chrome.google.com/webstore/search/metamask?hl=vi\">https://chrome.google.com/webstore/search/metamask?hl=vi</a></li>\r\n        <li>Open Extension Category in Brave:<a href=\"https://chrome.google.com/webstore/category/extensionsSearch\"> https://chrome.google.com/webstore/category/extensionsSearch</a> for MetaMask</li>\r\n      </ul>\r\n      <Thumb>\r\n        <img src=\"./images/metamask.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>Make sure it’s offered by metamask.io</p>\r\n      <ul>\r\n        <li>Click on “Add to Brave”</li>\r\n      </ul>\r\n      <p>That’s it! You have successfully installed MetaMask extension in Brave!</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask2.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>The workflow is the same for all browsers</p>\r\n      <H2>Create an account in MetaMask for Binance Smart Chain</H2>\r\n      <h4>1.\tClick on the “Create a wallet” button</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask3.png\" alt=\"\" />\r\n      </Thumb>\r\n      <h4>2. Create Password of at least 8 characters</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask4.png\" alt=\"\" />\r\n      </Thumb>\r\n      <h4>3. Click on “Create” and then write down your backup phrase.</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask5.png\" alt=\"\" />\r\n      </Thumb>\r\n      <h4>4. Select each phrase in order to make sure it is correct then click “Confirm”.</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask6.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>Congratulations! you have create your MetaMask account!</p>\r\n      <H2>Connect Your MetaMask With Binance Smart Chain</H2>\r\n      <h4>1.\tGo to setting page</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask7.png\" alt=\"\" />\r\n      </Thumb>\r\n      <h4>2.\tAdd a new network</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask8.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>•\tTestnet</p>\r\n      <ul>\r\n        <li>RPC URLs: <a href=\"https://bsc-dataseed.binance.org\">https://bsc-dataseed.binance.org</a></li>\r\n        <li>ChainID: 0x61, 97 in decimal (if 97 doesn’t work, try 0x61)</li>\r\n        <li>Symbol: BNB</li>\r\n        <li>Block Explorer: <a href=\"https://testnet.bscscan.com\">https://testnet.bscscan.com</a></li>\r\n      </ul>\r\n      <p>•\tMainnet</p>\r\n      <ul>\r\n        <li>RPC URLs: <a href=\"https://bsc-dataseed.binance.org\">https://bsc-dataseed.binance.org</a></li>\r\n        <li>ChainID: 0x38, 56 in decimal (if 56 doesn’t work, try 0x38)</li>\r\n        <li>Symbol: BNB</li>\r\n        <li>Block Explorer: <a href=\"https://bscscan.com\">https://bscscan.com</a></li>\r\n      </ul>\r\n      <h4>3.\tClaim some testnet token to your account Click on your address for copy</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask10.png\" alt=\"\" />\r\n      </Thumb>\r\n      <h4>4.  Go to faucet page: <a href=\"https://testnet.binance.org/faucet-smart\">https://testnet.binance.org/faucet-smart</a>, then paste your address in the box and click on “Give me BNB”</h4>\r\n      <Thumb>\r\n        <img src=\"./images/metamask11.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>After the transfer transaction is sent, you will see an increase of your balance</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask12.png\" alt=\"\" />\r\n      </Thumb>\r\n      <H2>Transfer BNB to other Binance Smart Chain address</H2>\r\n      <p>1.\tLog in to your MetaMask</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask13.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>2. Click on Send button</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask14.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>3.\tCopy the receiver’s address in the box</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask15.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>4. Input the amount</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask16.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>5.\tGo to Advanced Options to modify default gas price when necessary</p>\r\n      <ThumPage>\r\n        <img src=\"./images/metamask17.png\" alt=\"\" />\r\n      </ThumPage>\r\n      <p>6.\tConfirm your transaction, then click Next</p>\r\n      <Thumb>\r\n        <img src=\"./images/metamask18.png\" alt=\"\" />\r\n      </Thumb>\r\n      <Thumb>\r\n        <img src=\"./images/metamask19.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>Click Confirm to send your transaction</p>\r\n      <H2>Connecting Metamask to Binance Smart Chain (BSC) on your phone</H2>\r\n\r\n      <h4>Install</h4>\r\n      <p>IOS: <a href=\"https://metamask.app.link/skAH3BaF99\">https://metamask.app.link/skAH3BaF99</a></p>\r\n      <p>Android: <a href=\"https://metamask.app.link/bxwkE8oF99\">https://metamask.app.link/bxwkE8oF99</a></p>\r\n\r\n      <h4>The workflow is the same for all phone operating system</h4>\r\n      <strong>Create an account in MetaMask for Binance Smart Chain</strong>\r\n      <p>After you have successfully downloaded apps to your phone, the screen will appear as follows.</p>\r\n      <Thumb>\r\n        <img src=\"../images/welcome-metamask.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>Then you <strong>select \"Get started\"</strong> , a screen will show up with options to login/register.</p>\r\n      <p>If you <strong> already have an account</strong> you can log in by <strong>clicking on the button \"Sync with Metamask extension\".</strong></p>\r\n      <Thumb>\r\n        <img src=\"../images/wallet-setup.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>If you <strong>already have an account but forgot the password, click \"Import using seed phrase\"</strong>. However, this command requires you to remember the initial phrase from the registration time given by Matamask.</p>\r\n      <Thumb>\r\n        <img src=\"../images/metamask-setup-2.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>If you <storng>do not have an account</storng>, you <strong>register by selecting \"Create a new wallet\"</strong></p>\r\n      <Thumb>\r\n        <img src=\"../images/metamask-setup-3.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>1.\tCreate Password of at least 8 characters</p>\r\n      <Thumb>\r\n        <img src=\"../images/create-password-metamask.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>2.\tClick on “Create” and then write down your backup phrase.</p>\r\n      <Thumb>\r\n        <img src=\"../images/create-password-metamask-2.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>3.\tSelect each phrase to make sure it is correct then click “Confirm”.</p>\r\n      <Thumb>\r\n        <img src=\"../images/create-password-metamask-3.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>Congratulations! you have created your MetaMask account!</p>\r\n      <H2>Connect Your MetaMask With Binance Smart Chain</H2>\r\n      <p>1. Go to the setting page</p>\r\n      <Thumb>\r\n        <img src=\"../images/connect.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>2. Add a new network</p>\r\n      <Thumb>\r\n        <img src=\"../images/connect-1.png\" alt=\"\" />\r\n      </Thumb>\r\n      <Thumb>\r\n        <img src=\"../images/connect-2.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>•\tTestnet</p>\r\n      <ul>\r\n        <li>RPC URLs: <a href=\"https://bsc-dataseed.binance.org\">https://bsc-dataseed.binance.org</a></li>\r\n        <li>ChainID: 0x61, 97 in decimal (if 97 doesn’t work, try 0x61)</li>\r\n        <li>Symbol: BNB</li>\r\n        <li>Block Explorer: <a href=\"https://testnet.bscscan.com\">https://testnet.bscscan.com</a></li>\r\n      </ul>\r\n      <p>•\tMainnet</p>\r\n      <ul>\r\n        <li>RPC URLs: <a href=\"https://bsc-dataseed.binance.org\">https://bsc-dataseed.binance.org</a></li>\r\n        <li>ChainID: 0x38, 56 in decimal (if 56 doesn’t work, try 0x38)</li>\r\n        <li>Symbol: BNB</li>\r\n        <li>Block Explorer: <a href=\"https://bscscan.com\">https://bscscan.com</a></li>\r\n      </ul>\r\n      <p>3. Claim some testnet token to your account <strong>Click on your address for Copy</strong> </p>\r\n      <Thumb>\r\n        <img src=\"../images/connect-3.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>4. Go to faucet page: <a href=\"https://testnet.binance.org/faucet-smart\">https://testnet.binance.org/faucet-smart</a>, then <strong>paste your address </strong> in the box and <strong>click on “Give me BNB”</strong></p>\r\n      <Thumb>\r\n        <img src=\"../images/connect-4.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p>After the transfer transaction is sent, you will see an increase in your balance</p>\r\n      <Thumb>\r\n        <img src=\"../images/connect-5.png\" alt=\"\" />\r\n      </Thumb>\r\n      <p><strong>The steps to transfer BNB to another Binance Smart Chain address are similar to those on a computer.</strong></p>\r\n    </Box_home>\r\n  )\r\n}\r\n\r\nconst Box_home = styled.section`\r\n  position: relative;\r\n  overflow: hidden;\r\n  .linkpage{\r\n    padding-left:15px;\r\n    li{\r\n      list-style: none;\r\n    }\r\n  }\r\n  h4 {\r\n    font-size: 18px;\r\n  }\r\n  \r\n`\r\nconst Thumb = styled.div`\r\n  max-width: 400px;\r\n  width:100%;\r\n  overflow: hidden;\r\n\r\n  img{\r\n    width: 100%;\r\n    object-fit: cover;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  @media (max-width:1025px){\r\n    margin: 0 auto;\r\n    \r\n  }\r\n  @media (max-width:576px){\r\n    margin: 0 auto;\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ThumPage = styled.p`\r\n  max-width: 600px;\r\n  width:100%;\r\n  overflow: hidden;\r\n\r\n  img{\r\n    width: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  @media (max-width:1025px){\r\n    margin: 0 auto;\r\n    \r\n  }\r\n  @media (max-width:576px){\r\n    margin: 0 auto;\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\n\r\nconst H2 = styled.h2`\r\n\r\n`\r\n\r\nexport default Home\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport '../../fontawesome-free-5.15.2-web/css/all.css'\r\n\r\n\r\nconst ButtonTotop = () => {\r\n\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const toggleVisibility = () => {\r\n    if (window.pageYOffset > 120) {\r\n      setIsVisible(true);\r\n    } else {\r\n      setIsVisible(false);\r\n    }\r\n  };\r\n\r\n  const scrollToTop = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: \"smooth\"\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", toggleVisibility);\r\n  }, []);\r\n\r\n  return (\r\n    <ToTop>\r\n      {isVisible && (\r\n        <div className=\"itemtop\" onClick={scrollToTop}>\r\n          <i className=\"fas fa-chevron-up\" />\r\n        </div>\r\n      )}\r\n    </ToTop>\r\n  );\r\n};\r\n\r\n\r\nconst ToTop = styled.div`\r\n\r\n\r\n  .itemtop{\r\n    font-size: 22px;\r\n    position: fixed;\r\n    bottom: 80px;\r\n    right: 20px;\r\n    cursor: pointer;\r\n    width: 40px;\r\n    height: 40px;\r\n    background: #00000033;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 30px;\r\n    transition: ease-in-out .5s all;\r\n    color: white;\r\n\r\n    &:hover{\r\n      background: #082844;\r\n    }\r\n  }\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default ButtonTotop;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Title from '../../components/TitleChild'\r\n\r\n\r\nconst TrustWallet = () => {\r\n\r\n    return (\r\n        <StyledPage>\r\n            <Title title=\"How to Set Up and Use Trust Wallet for Binance Smart Chain\"/>\r\n            <p>Here’s how you can get set up on Trust Wallet and start using Binance Smart Chain in just a couple of minutes.</p>\r\n            <h2>Setting up your wallet for Binance Smart Chain</h2>\r\n            <p>1) <a href=\"https://share.trustwallet.com/H6U8pDHOMab\">Download Trust Wallet here</a>. If you already have Trust Wallet, make sure your app is up to date. </p>\r\n            <p>2) Complete <a href=\"https://community.trustwallet.com/t/how-to-create-a-multi-coin-wallet/41\">basic setup of a multi-coin wallet</a>. Remember to save your backup phrases.</p>\r\n            <p>3) Go to your Smart Chain wallet and press receive to find your address.</p>\r\n            <ThumPage>\r\n                <img src=\"./images/trustwallet1.png\" alt=\"\"/>\r\n            </ThumPage>\r\n            <p>4) Deposit BEP20 assets to your wallet. The easiest way to do this is with Binance. Choose an asset on Binance that supports BEP20 withdrawals and withdraw to your Trust Wallet Binance Smart Chain address. Keep in mind that BNB is required to make any transactions on Binance Smart Chain.</p>\r\n            <ThumPage>\r\n                <img src=\"./images/trustwallet2.png\" alt=\"\"/>\r\n            </ThumPage>\r\n            <p>5) That’s it! You’re ready to start using Binance Smart Chain. </p>\r\n            <p>6) Once you’ve received a BEP20 token, to view your transaction ID you can click on the transaction, press the share button in the top right and then copy the transaction ID.</p>\r\n            <ThumPage>\r\n                <img src=\"./images/trustwallet3.png\" alt=\"\"/>\r\n            </ThumPage>\r\n            <h2>Using Binance Smart Chain Dapps</h2>\r\n            <p>7) For this part, iOS users will need the Dapp browser, which <a href=\"https://community.trustwallet.com/t/enable-dapp-browser-on-trust-wallet-ios-version/\">you can get by following this guide</a>. Android users have the Dapp browser by default. </p>\r\n            <p>8) Once you’ve topped up your wallet, open the Dapp browser by pressing on the four squares at the bottom of the app.</p>\r\n            <p>9) Navigate to a Binance Smart Chain Dapp like PancakeSwap or BurgerSwap.</p>\r\n            <ThumPage>\r\n                <img src=\"./images/trustwallet4.png\" alt=\"\"/>\r\n            </ThumPage>\r\n            <p>10) Use the Dapp and have fun!</p>\r\n            <p>Here are some more detailed guides on how to interact with Binance Smart Chain Dapps with Trust Wallet:</p>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"https://community.trustwallet.com/t/how-to-send-and-receive-bnb-on-smart-chain/67430\">How to send and receive BNB on Smart Chain with Trust Wallet</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://community.trustwallet.com/t/how-to-earn-farm-and-stake-cake-on-pancakeswap-with-trust-wallet/70964\">How to Earn, Farm and Stake CAKE on PancakeSwap with Trust Wallet</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"https://community.trustwallet.com/t/how-to-swap-twt-bep2-to-twt-bep20/72718\">Swapping BEP2 to BEP20</a>\r\n                </li>\r\n            </ul>\r\n        </StyledPage>\r\n    )\r\n}\r\n\r\nconst StyledPage = styled.div`\r\n\r\n`\r\n\r\n\r\nconst ThumPage = styled.p`\r\n  max-width: 600px;\r\n  width:100%;\r\n  overflow: hidden;\r\n  margin-left: 100px;\r\n\r\n  img{\r\n    width: 100%;\r\n    object-fit: cover;\r\n  }\r\n\r\n  @media (max-width:1025px){\r\n    margin: 0 auto;\r\n    \r\n  }\r\n  @media (max-width:576px){\r\n    margin: 0 auto;\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nexport default TrustWallet","import React from 'react'\nimport styled from 'styled-components'\n\n\nconst Thumb = ({ path }) => {\n\n    return (\n        <StyledThumb>\n            <img src={path}></img>\n        </StyledThumb>\n    )\n}\n\n\nconst StyledThumb = styled.div`\n    max-width: 900px;\n    width:100%;\n    overflow: hidden;\n\n    img{\n    width: 100%;\n    object-fit: cover;\n    }\n\n    @media (max-width:1025px){\n    margin: 0 auto;\n    \n    }\n    @media (max-width:576px){\n    margin: 0 auto;\n    margin-left: 0;\n    }\n`\n\nexport default Thumb","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Introduction\"></Title>\n            <p>Binance Chain was launched by Binance in April 2019. Its primary focus is to facilitate fast, decentralized (or non-custodial) trading. Perhaps unsurprisingly, the biggest decentralized application (or DApp) on it is Binance DEX, one of the friendliest decentralized exchanges out there. You can use it via a web interface at binance.org or through its native integration with Trust Wallet.</p>\n            <p>Due to limitations inherent to blockchain systems, however, the chain doesn’t have much flexibility – smart contracts in a system optimized for fast trading could significantly congest the network. Remember CryptoKitties? At the height of its popularity, it brought the Ethereum blockchain to a standstill.</p>\n            <p>Scalability remains one of the most challenging hurdles to blockchain development. And that’s where Binance Smart Chain comes in.</p>\n            <Thumb path=\"../images/thumb/IN-BSC.jpg\" />\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Closing thoughts\"> </Title>\n            <p>Binance Smart Chain greatly extends the functionality of the original Binance Chain and joins a range of cutting-edge protocols designed to bridge the gap between various blockchains. Though still in its infancy, the promise of BNB staking alongside EVM compatibility makes the platform an ideal engine for developers building powerful decentralized applications. </p>\n            <p>Questions about Binance Smart Chain? Head over to Ask Academy, where the community will answer them. A deep dive into the technical side of things can be found in the whitepaper. </p>\n            <Thumb path=\"../images/thumb/Closing .jpg\" />\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Decentralized Finance on Binance Smart Chain\"></Title>\n            <p>You may know that a number of digital assets – such as BTC, LTC, ETH, EOS, or XRP – already exist on Binance Chain as “Peggy coins.” These are tokens that are pegged to assets on their native chains. For instance, you might decide to lock up 10 BTC in order to receive 10 BTCB on Binance Chain. At any time, you can trade your 10 BTCB for 10 BTC, meaning that the price of BTCB should closely track that of native BTC. </p>\n            <p>By doing this, you effectively port these assets onto Binance Chain. Interested in how this kind of thing can be achieved? Check out Tokenized Bitcoin on Ethereum Explained.</p>\n            <p>Because of the flexibility afforded by Binance Smart Chain, assets from a number of different chains can be used in the growing DeFi space. For instance, applications like PancakeSwap allow users to trustlessly exchange assets (much like Uniswap), engage in yield farming, and vote on proposals. Similar projects include BurgerSwap and BakerySwap (if you’re new to crypto, hi! We’re big fans of decentralized exchanges named after foods).</p>\n            <Thumb path=\"../images/thumb/Decentralized Finance BSC.jpg\" />\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"How does Binance Smart Chain work?\"></Title>\n            <h2>Consensus</h2>\n            <p>Binance Smart Chain achieves ~3 second block times with a Proof-of-Stake consensus algorithm. Specifically, it uses something called Proof of Staked Authority (or PoSA), where participants stake BNB to become validators. If they propose a valid block, they’ll receive transaction fees from the transactions included in it.</p>\n            <p>Note that, unlike many protocols, there is no block subsidy of freshly-minted BNB, as BNB is not inflationary. On the contrary, the supply of BNB decreases over time, as the Binance team regularly conducts coin burns.</p>\n            <h2>Cross-chain compatibility</h2>\n            <p>Binance Smart Chain was envisioned as an independent but complementary system to the existing Binance Chain. Dual-chain architecture is used, with the idea being that users can seamlessly transfer assets from one blockchain to another. In this way, rapid trading can be enjoyed on Binance Chain, while powerful decentralized apps can be built on BSC. With this interoperability, users are exposed to a vast ecosystem that can cater to a myriad of use cases.</p>\n            <p>BEP-2 and BEP-8 tokens from Binance Chain can be swapped for BEP-20 tokens, the new standard introduced for Binance Smart Chain. Have you read An Introduction to ERC-20 Tokens? Then you’ll already be familiar with the format of BEP-20. It uses the same functions as its Ethereum counterpart.</p>\n            <p>To move tokens from one chain to another (i.e., BEP-2 to BEP-20 or vice versa), the simplest method is perhaps to use the Binance Chain Wallet, available on Chrome and Firefox. Check out Use Binance Chain Extension Wallet for a guide to this.</p>\n    </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n    h2 {\n        font-size: 27px;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"What is Binance Smart Chain?\"></Title>\n            <p>Binance Smart Chain (BSC) is best described as a blockchain that runs in parallel to the Binance Chain. Unlike Binance Chain, BSC boasts smart contract functionality and compatibility with the Ethereum Virtual Machine (EVM). The design goal here was to leave the high throughput of Binance Chain intact while introducing smart contracts into its ecosystem.</p>\n            <p>In essence, both blockchains operate side-by-side. It’s worth noting that BSC isn’t a so-called layer two or off-chain scalability solution. It’s an independent blockchain that could run even if Binance Chain went offline. That said, both chains bear a strong resemblance from a design standpoint.</p>\n            <p>Because BSC is EVM-compatible, it launched with support for the rich universe of Ethereum tools and DApps. In theory, this makes it easy for developers to port their projects over from Ethereum. For users, it means that applications like MetaMask can be easily configured to work with BSC. Seriously – it’s just a matter of tweaking a couple of settings. Check out Use MetaMask for Binance Smart Chain to get started.</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Intro from './components/Introduction.jsx'\nimport Closing from './components/Closing'\nimport Decentralized from './components/Decentralized'\nimport Howdoes from './components/Howdoes'\nimport Whatis from './components/Whatis'\n\n\nconst BinanceSmartChange = () => {\n\n    return(\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/binance/introduction\">\n                    <Intro />\n                </Route>\n                <Route exact path=\"/binance/what-is-binance-smart-chain\">\n                    <Whatis />\n                </Route>\n                <Route exact path=\"/binance/how-does-binance-smart-chain-work\">\n                    <Howdoes />\n                </Route>\n                <Route exact path=\"/binance/decentralized-finance-on-binance-smart-chain\">\n                    <Decentralized />\n                </Route>\n                <Route exact path=\"/binance/closing-thoughts\">\n                    <Closing />\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n\n`\n\nexport default BinanceSmartChange","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"Closing thoughts\"></Title>\n            <p>Automated market makers are a staple of the DeFi space. They enable essentially anyone to create markets seamlessly and efficiently. While they do have their limitations compared to order book exchanges, the overall innovation they bring to crypto is invaluable.</p>\n            <p>AMMs are still in their infancy. The AMMs we know and use today like Uniswap, Curve, and PancakeSwap are elegant in design, but quite limited in features. There are likely many more innovative AMM designs coming in the future. This should lead to lower fees, less friction, and ultimately better liquidity for every DeFi user.</p>\n            <p>Still got questions about DeFi and automated market making? Check out our Q&A platform, Ask Academy, where the Binance community will answer your questions.</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"What is a liquidity pool?\"></Title>\n            <p>Liquidity providers (LPs) add funds to liquidity pools. You could think of a liquidity pool as a big pile of funds that traders can trade against. In return for providing liquidity to the protocol, LPs earn fees from the trades that happen in their pool. In the case of Uniswap, LPs deposit an equivalent value of two tokens – for example, 50% ETH and 50% DAI to the ETH/DAI pool.</p>\n            <p>Hang on, so anyone can become a market maker? Indeed! It’s quite easy to add funds to a liquidity pool. The rewards are determined by the protocol. For example, Uniswap v2 charges traders 0.3% that goes directly to LPs. Other platforms or forks may charge less to attract more liquidity providers to their pool.</p>\n            <p>Why is attracting liquidity important? Due to the way AMMs work, the more liquidity there is in the pool, the less slippage large orders may incur. That, in turn, may attract more volume to the platform, and so on.</p>\n            <p>The slippage issues will vary with different AMM designs, but it’s definitely something to keep in mind. Remember, pricing is determined by an algorithm. In a simplified way, it’s determined by how much the ratio between the tokens in the liquidity pool changes after a trade. If the ratio changes by a wide margin, there’s going to be a large amount of slippage.</p>\n            <p>To take this a bit further, let’s say you wanted to buy all the ETH in the ETH/DAI pool on Uniswap. Well, you couldn’t! You’d have to pay an exponentially higher and higher premium for each additional ether, but still never could buy all of it from the pool. Why? It’s because of the formula x * y = k. If either x or y is zero, meaning there is zero ETH or DAI in the pool, the equation doesn’t make sense anymore.</p>\n            <p>But this isn’t the complete story about AMMs and liquidity pools. You’ll need to keep in mind something else when providing liquidity to AMMs – impermanent loss.</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"How does an automated market maker (AMM) work?\"></Title>\n\n            <p>An AMM works similarly to an order book exchange in that there are trading pairs – for example, ETH/DAI. However, you don’t need to have a counterparty (another trader) on the other side to make a trade. Instead, you interact with a smart contract that “makes” the market for you.</p>\n            <p>On a decentralized exchange like Binance DEX, trades happen directly between user wallets. If you sell BNB for BUSD on Binance DEX, there’s someone else on the other side of the trade buying BNB with their BUSD. We can call this a peer-to-peer (P2P) transaction. </p>\n            <p>In contrast, you could think of AMMs as peer-to-contract (P2C). There’s no need for counterparties in the traditional sense, as trades happen between users and contracts. Since there’s no order book, there are also no order types on an AMM. What price you get for an asset you want to buy or sell is determined by a formula instead. Although it’s worth noting that some future AMM designs may counteract this limitation.</p>\n            <p>So there’s no need for counterparties, but someone still has to create the market, right? Correct. The liquidity in the smart contract still has to be provided by users called liquidity providers (LPs).</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n    h2 {\n        font-size: 27px;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({props}) => {\n\n\n    return(\n        <StyledPage>\n            <Title title=\"What is impermanent loss?\"></Title>\n            <p>Impermanent loss happens when the price ratio of deposited tokens changes after you deposited them in the pool. The larger the change is, the bigger the impermanent loss. This is why AMMs work best with token pairs that have a similar value, such as stablecoins or wrapped tokens. If the price ratio between the pair remains in a relatively small range, impermanent loss is also negligible.</p>     \n            <p>On the other hand, if the ratio changes a lot, liquidity providers may be better off simply holding the tokens instead of adding funds to a pool. Even so, Pegaswap pools like ETH/DAI that are quite exposed to impermanent loss have been profitable thanks to the trading fees they accrue.</p>\n            <p>With that said, impermanent loss isn’t a great way to name this phenomenon. “Impermanence” assumes that if the assets revert to the prices where they were originally deposited, the losses are mitigated. However, if you withdraw your funds at a different price ratio than when you deposited them, the losses are very much permanent. In some cases, the trading fees might mitigate the losses, but it’s still important to consider the risks.</p>\n            <p>Be careful when depositing funds into an AMM, and make sure you understand the implications of impermanent loss. If you’d like to get an advanced overview of impermanent loss, read Pintail’s article about it.</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n    h2 {\n        font-size: 27px;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Closing from './components/Closing'\nimport Liquidity from './components/Liquidity'\nimport Howdoes from './components/Howdoes.jsx'\nimport ImpermanentLost from './components/ImpermanentLost'\n\n\nconst Amm = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/amm/how-does-an-automated-market-maker-amm-work\">\n                    <Howdoes />\n                </Route>\n                <Route exact path=\"/amm/what-is-a-liquidity-pool\">\n                    <Liquidity />\n                </Route>\n                <Route exact path=\"/amm/what-is-impermanent-loss\">\n                    <ImpermanentLost />\n                </Route>\n                <Route exact path=\"/amm/closing-thoughts\">\n                    <Closing />\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n\n`\n\nexport default Amm","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Welcome to Pegaswap\"></Title>\n            <p>The next-gen Decentralized Exchange, Staking, and Farming Protocol on BSC</p>\n            <Thumb path=\"../images/thumb/intro-w@2x.png\" />\n            <p>PegaSwap is a DeFi protocol running on the Binance Smart Chain (BSC). It allows you to swap between tokens issued on BSC, and earn rewards for providing liquidity to these decentralized markets, with lots of other features that let you earn and win tokens. PegaSwap was built by  Pegasus Finance. We have a dedicated team of experienced Pegasus Finance, who have been in the crypto space for years. PGS is the native currency of our platform. Stake, pool, and earn $PGS  all on PegaSwap.</p>\n            <p> PegaSwap works as a decentralized exchange (DEX) that adopts the automated market maker (AMM) model. Similar to PancakeSwap, BakerySwap, and other protocols, it allows users to earn tokens by providing liquidity. </p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\n\n\n\nconst Community = () => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Community & Socials\"> </Title>\n            <ul>\n                <li>📌 Follow Twitter : <a href=\"https://twitter.com/PegaSwap\" target=\"_blank\">https://twitter.com/PegaSwap</a></li>\n                <li>📌 Follow Medium : <a href=\"https://pegaswap.medium.com/\" target=\"_blank\">https://pegaswap.medium.com/</a></li>\n                <li>📌 Discord : <a href=\"https://discord.com/channels/840876754117328897/840876755504857120\" target=\"_blank\">https://discord.com/channels/840876754117328897/840876755504857120</a></li>\n                <li>📌 Github : <a href=\"https://github.com/pegaswap-defi\" target=\"_blank\">https://github.com/pegaswap-defi</a></li>\n                <li>📌 Channel Telegram Global : <a href=\"https://t.me/PegaSwapOfficial\" target=\"_blank\"> https://t.me/PegaSwapOfficial</a></li>\n                <li>📌 Group Telegram Community : <a href=\"https://t.me/PegaSwapDefi\" target=\"_blank\">https://t.me/PegaSwapDefi</a></li>\n                <li>📌 Group Telegram Community : <a href=\"https://t.me/PegaSwapDefi\" target=\"_blank\">https://t.me/PegaSwapDefi</a></li>\n                <li>🌐 Website : <a href=\"https://pegaswap.com/#/pgstokens\" target=\"_blank\">https://pegaswap.com/#/pgstokens</a></li>\n            </ul>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n     font-size: 1rem;\n     li {\n         list-style-type: none;\n     }\n`\n\n\nexport default Community","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"PegaSwap is on the Binance Smart Chain\"> </Title>\n            <Thumb path=\"../images/thumb/PEGA-NFT.jpg\" />\n            <p>As mentioned earlier, PegaSwap will launch on the Binance Smart Chain instead of Ethereum, the more classical choice for most DeFi projects. The Binance Smart Chain is a “parallel blockchain” that delivers programmability to the Binance Chain, basically building a dual-chain system. This allows Binance to make use of smart contracts, giving it full adaptability with the Ethereum Virtual Machine (EVM), all while maintaining the fast execution capabilities of the original Binance Chain. From a user point of view, the two parallel chains work in an identical style, they are merely distinct in their framework.</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\nimport TitleChild from '../../../components/TitleChild'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <>\n            <StyledPage>\n                <Title title=\"What can you do on PegaSwap?\"> </Title>\n                <Thumb path=\"../images/thumb/Trade.jpg\" />\n                <p>PegaSwap can be used to trade BEP20 tokens and earn cryptocurrencies through PGS staking and providing liquidity.\n            </p>\n                <p>You can do the following on PegaSwap:</p>\n                <ul>\n                    <li>Trade BEP20 tokens</li>\n                    <li>Provide liquidity to the exchange and earn fees</li>\n                    <li>Stake your LP (liquidity provider) tokens to earn PGS token</li>\n                    <li>Stake PGS to earn PGS token</li>\n                    <li>Stake PGS to earn more PGS</li>\n                    <li>Farm earn PGS to earn tokens ( liquidity pool)</li>\n                </ul>\n            </StyledPage>\n            <StyledPage>\n                <TitleChild title=\"Low Fees and Fast Transactions\"> </TitleChild>\n                <p>One of the growing complaints about projects built on Ethereum are the high fees and slow transactions from the network. PegaSwap doesn’t use the Ethereum network though, it uses the BSC network and BEP-20 tokens. As a result the fees paid are much lower, typically ranging from $0.04 to $0.20, and transactions take less than 5 seconds on average. Compare that with Ethereum, where fees have been above $20 for much of 2021 and transactions take up to 5 minutes to confirm.</p>\n            </StyledPage>\n            <StyledPage>\n                <TitleChild title=\"No KYC Requirement\"> </TitleChild>\n                <Thumb path=\"../images/thumb/KYC.jpg\" />\n                <p>Every centralized exchange we know about follows the requirements for Know Your Customer and Anti-Money laundering (KYC/AML) which removes users’ privacies by requiring them to provide extensive documentation to prove their identity.\n                </p>\n            </StyledPage>\n            <StyledPage>\n                <TitleChild title=\"PegaSwap Fees\"> </TitleChild>\n                <p>If you’re familiar with other AMM’s like Uniswap and Sushiswap you’ll recognize the system whereby users provide liquidity to pools and receive LP (liquidity provider) tokens in exchange.\n                </p>\n                <Thumb path=\"../images/thumb/Feee.jpg\" />\n                <p>These LP tokens give holders the right to collect a portion of the trading fees generated on the platform. The trading fee at PegaSwap is a low 0.2%, with 0.17% going to the liquidity providers and the remaining 0.3% going to the PegaSwap Treasury, where they are burnt to keep supply lower.</p>\n            </StyledPage>\n\n        </>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    font-size: 1rem;\n    p {\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Introduction = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"What is PegaSwap?\"> </Title>\n            <Thumb path=\"../images/thumb/Binane-Pegaswap.jpg\" />\n            <p>PegaSwap is a decentralized Automated Market Maker (AMM) on the Binance Smart Chain (BSC) network PGS is the native token of the PegaSwap platform was released on Binance Smart Chain (BSC). PGS is also a BSC-native BEP-20 token. Currently, the PGS token has been the most preferred amon the traders and performed extremely well in the market. The primary function of PGS is to increase liquidity provision to the PegaSwap platform. The token is one of other tokens used within the PegaSwap protocol and facilitates easy token swaps. An important feature of PegaSwap is its democratic governance. The PGS token holders can decide via voting to modify the parameters of the exchange. These parameters include trading fees, staking awards, mining activity, etc… Its users can also get staking prizes if they engage in voting!\n            </p>\n\n            <p>\n                Pegaswap’s token (PGS) is a BEP-20 token standard, native to the Binance Smart Chain. Pegaswap offers great utility within the Pegaswap ecosystem, including representing governance rights in votes on updates or proposals to the protocol. Additionally, Pegaswap tokens (PGS) are used as liquidity rewards.\n            </p>\n            <p>\n                Max Total Supply : 180,000,000 PGS\n            </p>\n            <ul>\n                <li>\n                    BEP20 – Pegaswap token : PGS\n                </li>\n                <li>\n                    Max Total Supply : 180,000,000 PGS\n                </li>\n                <li>\n                    PGS : 180,000,000 PGS\n                </li>\n                <li>\n                    PGS the Pegaswap Protocol token, is live!\n                </li>\n                <li>\n                    PGS contract address: 0x1ed18b0930fa099ebe8228ea858dab1d23b7f2f5\n                </li>\n                <li>\n                    78% of the PGS genesis supply is allocated to Pegaswap community members\n                </li>\n                <li>\n                    To start, PGS is available through four liquidity mining pools:\n                </li>\n            </ul>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Introduction","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Roadmap = () => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Roadmap\"></Title>\n            <p>How we plan to evolve  Pegaswap</p>\n            <Thumb path=\"../images/thumb/Screen_Shot_2021-04-13_at_20.12.54.png\" />\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n`\n\n\nexport default Roadmap","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Intro from './components/Intro'\nimport Community from './components/Community'\nimport PegaswapOn from './components/PegaOnSC'\nimport Whatcan from './components/Whatcan'\nimport Whatis from './components/Whatis'\nimport Roadmap from './components/Roadmap'\n\n\nconst BinanceSmartChange = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/welcome/introduction\">\n                    <Intro />\n                </Route>\n                <Route exact path=\"/welcome/what-is-pegaswap\">\n                    <Whatis />\n                </Route>\n                <Route exact path=\"/welcome/pegaswap-is-on-the-binance-smart-chain\">\n                    <PegaswapOn />\n                </Route>\n                <Route exact path=\"/welcome/what-can-you-do-on-pegaswap\">\n                    <Whatcan />\n                </Route>\n                <Route exact path=\"/welcome/community-socials\">\n                    <Community />\n                </Route>\n                <Route exact path=\"/welcome/roadmap\">\n                    <Roadmap />\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n\n`\n\nexport default BinanceSmartChange","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Howto = () => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"How to Trade on PegaSwap\"></Title>\n            <Thumb path=\"../images/thumb/swap.png\" />\n            <ul>\n                <li>1. Go to the exchange page <a href=\"https://pegaswap.com/#/swap\" target=\"_blank\">here</a>.</li>\n                <li>2. Unlock your Binance Smart Chain Wallet.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-1.png\" alt=\"connect wallet\" />\n                </ThumbMobile>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-2.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <li>3. Select the tokens you wish to trade and enter the amount.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-3.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <li>4. Check the details, and click “Swap”.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-5.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <li>5. Check the details and click “Confirm Swap”.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-6.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <li>6. Confirm the transaction in your wallet.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-9.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <li>7. Done! You can click “View on bscscan” to see your transaction details.</li>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-7.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n                <ThumbMobile>\n                    <img src=\"../images/swap-guide-imgs/img-8.png\" alt=\"swap interface\" />\n                </ThumbMobile>\n            </ul>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n    ul {\n        padding: 0;\n        margin-top: 20px;\n        li {\n            list-style-type: none;\n            font-size: 1rem;\n        }\n        a {\n            color: #9827ec;\n            text-decoration: underline;\n        }\n    }\n`\n\nconst ThumbMobile = styled.div`\n    margin: 2rem auto;\n    max-width: 400px;\n    img {\n        width: 100%;\n    }\n    @media(max-width: 768px) {\n        max-width: 350px;\n    }\n    @media(max-width: 576px) {\n        max-width: 300px;\n    }\n`\n\n\nexport default Howto","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst AddLiquid = () => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"Liquidity Pools & Adding Liquidity\"></Title>\n            <p>About PegaSwap's Liquidity Pools (coming soon)</p>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    p {\n        font-size: 1rem;\n        margin-top: 20px;\n    }\n    ul {\n        li {\n            list-style-type: none;\n        }\n    }\n`\n\n\nexport default AddLiquid","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Howto from './components/HowToTrade'\nimport AddLiquid from './components/AddLiquid'\nimport Thumb from '../../components/Thumb'\n\n\nconst Swap = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/swap\">\n                    {/* <p>Pegaswap is a decentralized exchange for swapping <a href=\"https://academy.binance.com/en/glossary/bep-20\" target=\"_blank\">BEP-20 tokens</a>.</p> */}\n                    <p>Pegaswap is a decentralized exchange for swapping <a href=\"#\" >BEP-20 tokens</a>.</p>\n                    <Thumb path=\"../images/thumb/protocol2@2x.JPG\" />\n                </Route>\n                <Route exact path=\"/swap/How-to-Trade-on-PegaSwap\">\n                    <Howto />\n                </Route>\n                <Route exact path=\"/swap/Liquidity-Pools-Adding-Liquidity\">\n                    <AddLiquid />\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    a {\n        color: #9827ec;\n        text-decoration: underline;\n    }\n`\n\nexport default Swap","import React from 'react'\nimport styled from 'styled-components'\nimport Title from '../../../components/TitleChild'\nimport Thumb from '../../../components/Thumb'\n\n\n\nconst Yield = ({ props }) => {\n\n\n    return (\n        <StyledPage>\n            <Title title=\"How to Yield Farm on Pegaswap\"></Title>\n            <p>how to get started farming $PGS on <strong>Pegaswap</strong></p>\n            <Thumb path=\"../images/thumb/farm.png\" />\n            <ul>\n                <li>1. Go to the farm page <a href=\"https://pegaswap.com/#/\" target=\"_blank\">here</a>.</li>\n                <li>\n                    2. Connect your Binance Smart Chain Wallet (top-right hand corner)\n</li>\n                <li>3. Pick which farm you want to use. For this example, we will pick the PGS-BNB LP farm.</li>\n                <li>4. Go to the exchange page <a href=\"https://pegaswap.com/#/\" target=\"_blank\">here</a> and click “Add Liquidity”.</li>\n                <li>5. Select the tokens to add, in this case BNB and PGS. You need to provide them in a 50/50 ratio vs USD value. For example, you would need to add $10 of BNB and $10 of PGS. Once you are done, click “farm”.</li>\n                <li>6. Check the details, click “Confirm farm” and then confirm the transaction in your wallet.</li>\n                <li>\n                    7. You now have liquidity tokens. Next, go back to the farm page <a href=\"https://pegaswap.com/#/\" target=\"_blank\">here</a>.\n</li>\n                <li>\n                    8. Click “Approve Contract” on the farm you want to use and then confirm the transaction in your wallet.\n</li>\n                <li>\n                    9. Click the “Stake LP” button to stake your liquidity tokens.\n</li>\n                <li>\n                    10. Enter the number of liquidity tokens you want to stake and click “Confirm”, then confirm the transaction in your wallet.\n</li>\n                <li>\n                    11. Done! Now you are farming PGS tokens! You can harvest them at any time by pressing \"Harvest\"\n</li>\n            </ul>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\np {\n    font-size: 1rem;\n    margin-top: 20px;\n}\nul {\n    padding: 0;\n    margin-top: 20px;\n    li {\n        list-style-type: none;\n        font-size: 1rem;\n\n    }\n    a {\n        color: #9827ec;\n        text-decoration: underline;\n    }\n}\n`\n\n\nexport default Yield","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Yield from './components/Yield'\n\n\nconst YieldFarming = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/yield-farming\">\n                    <Yield />\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n\n`\n\nexport default YieldFarming","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Title = ({ title, image }) => {\r\n\r\n  return <ContentTitle className=\"title\">\r\n    {title}\r\n  </ContentTitle>;\r\n};\r\n\r\nconst ContentTitle = styled.h3`\r\n    max-width: 600px;\r\n    margin-bottom: 25px;\r\n    font-size: 32px;\r\n    font-weight: bold;\r\n    width: 100%;\r\n    padding-bottom: 20px;\r\n    border-bottom: 2px solid #E6ECF1;\r\n    @media(max-width:770px){\r\n      font-size:24px;\r\n    }\r\n    img{\r\n      max-width:32px;\r\n      width: 100%;\r\n    }\r\n`;\r\n\r\nexport default Title;\r\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Title from '../../components/Title'\n\n\nconst Staking = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/staking-pools\">\n                    <Title title=\"Staking Pools\" />\n                    <p>PegaSwap Pools allow Binance Smart Chain projects to bootstrap adoption by distributing a portion of their tokens to PGS token holders. They also allow existing projects to start a relationship with our amazing community.</p>\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n\n`\n\nexport default Staking","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Title from \"../../components/Title\";\nimport Thumb from \"../../components/Thumb\";\n\nconst NFTs = () => {\n  return (\n    <StyledPage>\n      <Switch>\n        <Route exact path=\"/none-fungible-token\">\n          <Title title=\"Non Fungible Token (NFTs)\" />\n          <p>\n            A Non-Fungible Token or NFT is a special kind of cryptographic token\n            that represents any unique asset. These NFTs operate as verifiable\n            proofs of authenticity and ownership inside the blockchain network.\n            The NFTs are not interchangeable which introduces scarcity in the\n            digital world of assets.\n          </p>\n          <p>\n            NFTs are the building blocks of a blockchain-powered or distributed\n            ledger powered world. These NFTs find application in several digital\n            items and processes such as crypto gaming.The notable and first\n            usecase of NFTs in the crypto-collectible trading card gaming.\n          </p>\n          <strong>What is Fungibility?</strong>\n          <p>\n            The term Fungibility refers to the equal value among the assets. It\n            implies the right to exchange a product or assets with other\n            products or assets of the same kind. These Fungible assets simplify\n            the process of trade and exchange of assets.\n          </p>\n          <p>\n            Thus any two objects are equivalent in design and their individual\n            units can be replaced mutually is referred to as Fungibility.\n          </p>\n          <strong>Major Use-cases of NFTs</strong>\n          <p>\n            Let us deeply look at the top use-cases of non fungible tokens in\n            the digital economy.\n          </p>\n          <strong>Gaming</strong>\n          <p>\n            The most and popular use-cases of Non-fungible tokens is Gaming.\n            Blockchain gaming allows players to securely trade assets and offer\n            a layer of authenticity and verifiability to all the players.\n          </p>\n          <p>\n            NFTs provides a compelling solution for all digital ownership of\n            game items and allows users to generate real-time revenue by\n            utilizing their gaming skills.\n          </p>\n          <p>\n            Users have the way to decide the direction of future developments\n            within the games.These gives the opportunity to design their own\n            virtual world & operate in verifiable gaming marketplaces.\n          </p>\n          <p>Our first collectible Non Fungible Token Initiative!</p>\n          <p>\n            Non Fungible Token (NFTs) are a cryptographically generated set of\n            1,000 unique, rare, immutable, digital apes. Each ape is created by\n            hashing a string{\" \"}\n          </p>\n          <Thumb path=\"../images/thumb/NFTT.png\" />\n          <p>How were NFTs Pegasus generated?</p>\n          <p>\n            Each characteristic has a different likelihood of occurring in each\n            Pegasus Angel generation, making some characteristics much rarer\n            than others\n          </p>\n          <Thumb path=\"../images/thumb/NFTTTS.png\" />\n        </Route>\n      </Switch>\n    </StyledPage>\n  );\n};\n\nconst StyledPage = styled.div`\n  p {\n    font-size: 1rem;\n  }\n`;\n\nexport default NFTs;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Title from '../../components/Title'\nimport Thumb from '../../components/Thumb'\n\n\nconst Game = () => {\n\n    return (\n        <StyledPage>\n            <Switch>\n                <Route exact path=\"/gaming\">\n                    <Title title=\"Game\" />\n                    <p>Pegasu Finance is a purpose built blockchain specifically for the hosting of completely decentralized blockchain game worlds. </p>\n                    <Thumb path=\"../images/thumb/Gaming.png\" />\n                    <p>We see the blockchain as a transformational technology where games transcend the virtual and take on a life of their own in the real world.</p>\n                    <p>With no walled gardens, free markets and natural price discovery are underpinned by censorship resistance, trustless trading, and cryptographic security. </p>\n                </Route>\n            </Switch>\n        </StyledPage>\n    )\n}\n\n\nconst StyledPage = styled.div`\n    \n`\n\nexport default Game","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Route, Switch } from \"react-router-dom\";\nimport Title from \"../../components/Title\";\n// import Thumb from \"../../components/Thumb\";\n\nconst Governance = () => {\n  return (\n    <StyledPage>\n      <Switch>\n        <Route exact path=\"/governance\">\n          <Title title=\"Governance\" />\n          <p>\n            Governance is a very important aspect to run a Decentralized\n            Protocol. All developments in the protocol are decided based on the\n            results of the voting. Voting can be done by holders of the\n            protocol’s governance tokens. It is to be noted that though voting\n            is decentralized the there are only a few major whales who hold\n            these governance tokens and therefore take the majority of the\n            decisions. In return for the voting, the voters are rewarded with\n            the Protocol’s Governance tokens.\n          </p>\n          <p>\n            Once governance tokens have been distributed, the hard work of\n            actually governing a platform begins. The most popular DeFi\n            governance structures all follow the same general process:\n          </p>\n          <p>\n            <strong>Discussion r</strong>: Discussion is the first step of DeFi\n            governance, as stakeholders attempt to gauge the sentiments of the\n            community around specific issues and potential changes. Discussions\n            happen across a 13 platform’s official governance forum and informal\n            communication channels. Ideas and policies are ideally the center of\n            conversation, but politicking often occurs as users try to convince\n            others in the community to support their ideas or proposals.\n          </p>\n          <p>\n            <strong>Improvement proposal: </strong>Improvement proposals are an\n            attempt to systematically and transparently put forward new changes\n            to the system by using a generalized template consisting of the\n            proposal’s context, description, and potential code change. For now,\n            most improvement proposals are technical, quantitative, and mainly\n            submitted by developers. Once a code change is proposed, it can be\n            discussed and reviewed by the community — then changed further if\n            necessary.{\" \"}\n          </p>\n          <p>\n            <strong>Quorum: </strong>A quorum is the minimum amount of\n            participation required to pass a vote. For example, a proposal may\n            have 100% support from voters, but if the number of token holders\n            who vote fails to meet the minimum percentage required, then the\n            vote is often automatically cancelled. One of the biggest problems\n            in DeFi governance is low participation. People often want to hold\n            tokens for speculative purposes and may not want to participate in\n            governance because it is timeconsuming, less instantly gratifying,\n            and/or they do not have a strong view — or any view at all — on the\n            proposed change to the protocol.\n          </p>\n          <p>\n            <strong>On-chain vote:</strong> For most DeFi protocols, one token\n            equals one vote, and a simple majority of more than 50% is enough to\n            execute a new proposal. The more tokens an entity holds, the more\n            weight their vote carries. If a token holder does not want to vote\n            directly, their voting power can be delegated to another address.\n            Once a vote is passed, the proposal can be executed.\n          </p>\n          <p>\n            <strong>Implementation:</strong>: Since proposals are usually\n            software changes, the final step in the decentralized governance\n            process is changing the code.\n          </p>\n        </Route>\n      </Switch>\n    </StyledPage>\n  );\n};\n\nconst StyledPage = styled.div``;\n\nexport default Governance;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Header from \"./components/Header\";\r\nimport SideBar from \"./components/SideBar\";\r\n\r\nimport Home from \"./views/Home\";\r\nimport ButtonMenu from \"./components/ButtonMenu\";\r\n\r\nimport ButtonTotop from \"./components/ButtonTotop\";\r\nimport TrustWallet from \"./views/TrustWallet\";\r\n\r\nimport Binance from \"./views/BinanceSmartChange\";\r\nimport Amm from \"./views/Amm\";\r\nimport Welcome from \"./views/Welcome\";\r\nimport Swap from \"./views/Swap\";\r\nimport Yield from \"./views/YieldFarming\";\r\nimport Staking from \"./views/Staking\";\r\nimport NFTs from \"./views/NFTs\";\r\nimport Game from \"./views/Gaming\";\r\nimport Governance from \"./views/Governance\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <StyledScreen>\r\n      <Router>\r\n        <Header />\r\n        <div className=\"main\">\r\n          <Layout>\r\n            {/* <Menu /> */}\r\n            <ButtonMenu />\r\n            <BoxSidebar>\r\n              <SideBar />\r\n            </BoxSidebar>\r\n            <BoxContent>\r\n              <Welcome />\r\n              <Amm />\r\n              <Binance />\r\n              <Swap />\r\n              <Yield />\r\n              <Staking />\r\n              <NFTs />\r\n              <Game />\r\n              <Governance />\r\n              <Switch>\r\n                <Route path=\"/\" exact>\r\n                  <Home />\r\n                </Route>\r\n                Binance Smart Change Amm\r\n                <Route\r\n                  exact\r\n                  path=\"/how-to-use-metamask-for-binance-smart-chain\"\r\n                >\r\n                  <Home />\r\n                </Route>\r\n                <Route\r\n                  exact\r\n                  path=\"/how-to-set-up-and-use-trust-wallet-for-binance-smart-chain\"\r\n                >\r\n                  <TrustWallet />\r\n                </Route>\r\n              </Switch>\r\n            </BoxContent>\r\n          </Layout>\r\n        </div>\r\n      </Router>\r\n      <ButtonTotop />\r\n    </StyledScreen>\r\n  );\r\n};\r\nconst StyledScreen = styled.div`\r\n  height: 100vh;\r\n`;\r\n\r\nconst Layout = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  flex-wrap: wrap;\r\n  height: 100%;\r\n`;\r\nconst BoxSidebar = styled.section`\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 53px;\r\n  padding-top: 60px;\r\n  min-width: 298px;\r\n  max-width: 300px;\r\n  background: rgb(234 248 250);\r\n  height: auto;\r\n  min-height: 100vh;\r\n  overflow: hidden;\r\n  background: linear-gradient(\r\n    90deg,\r\n    rgba(155, 213, 255, 0.7) 0%,\r\n    rgba(255, 217, 254, 0.73) 100%\r\n  ) !important;\r\n  padding: 0;\r\n\r\n  @media (max-width: 1690px) {\r\n  }\r\n\r\n  @media (max-width: 1500px) {\r\n    padding-left: 0;\r\n  }\r\n\r\n  @media (max-width: 991px) {\r\n    width: 100%;\r\n    min-height: auto;\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst BoxContent = styled.section`\r\n  position: relative;\r\n  width: 70%;\r\n  padding: 50px;\r\n  max-width: 1000px;\r\n\r\n  @media (min-width: 1000px) {\r\n    margin-left: 300px;\r\n  }\r\n\r\n  @media (max-width: 991px) {\r\n    width: 100%;\r\n    padding: 15px;\r\n  }\r\n`;\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport ReactGA from 'react-ga'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ThemeProvider, { GlobalStyle } from './Theme'\r\nimport LocalStorageContextProvider, { Updater as LocalStorageContextUpdater } from './contexts/LocalStorage'\r\nimport TokenDataContextProvider, { Updater as TokenDataContextUpdater } from './contexts/TokenData'\r\nimport GlobalDataContextProvider from './contexts/GlobalData'\r\nimport PairDataContextProvider, { Updater as PairDataContextUpdater } from './contexts/PairData'\r\nimport ApplicationContextProvider from './contexts/Application'\r\nimport UserContextProvider from './contexts/User'\r\nimport App from './App'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\n// initialize GA\r\nconst GOOGLE_ANALYTICS_ID = process.env.REACT_APP_GOOGLE_ANALYTICS_ID\r\nif (typeof GOOGLE_ANALYTICS_ID === 'string') {\r\n  ReactGA.initialize(GOOGLE_ANALYTICS_ID)\r\n  ReactGA.set({\r\n    customBrowserType: !isMobile\r\n      ? 'desktop'\r\n      : 'web3' in window || 'ethereum' in window\r\n      ? 'mobileWeb3'\r\n      : 'mobileRegular',\r\n  })\r\n} else {\r\n  ReactGA.initialize('test', { testMode: true, debug: true })\r\n}\r\n\r\nfunction ContextProviders({ children }) {\r\n  return (\r\n    <LocalStorageContextProvider>\r\n      <ApplicationContextProvider>\r\n        <TokenDataContextProvider>\r\n          <GlobalDataContextProvider>\r\n            <PairDataContextProvider>\r\n              <UserContextProvider>{children}</UserContextProvider>\r\n            </PairDataContextProvider>\r\n          </GlobalDataContextProvider>\r\n        </TokenDataContextProvider>\r\n      </ApplicationContextProvider>\r\n    </LocalStorageContextProvider>\r\n  )\r\n}\r\n\r\nfunction Updaters() {\r\n  return (\r\n    <>\r\n      <LocalStorageContextUpdater />\r\n      <PairDataContextUpdater />\r\n      <TokenDataContextUpdater />\r\n    </>\r\n  )\r\n}\r\n\r\nReactDOM.render(\r\n  <ContextProviders>\r\n    <Updaters />\r\n    <ThemeProvider>\r\n      <>\r\n        <GlobalStyle />\r\n        <App />\r\n      </>\r\n    </ThemeProvider>\r\n  </ContextProviders>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}