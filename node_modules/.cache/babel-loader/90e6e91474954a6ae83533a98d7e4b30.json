{"ast":null,"code":"// Override data return from graph - usually because proxy token has changed\n// names since entitiy was created in subgraph\n// keys are lowercase token addresses <--------\nconst TOKEN_OVERRIDES = {\n  '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': {\n    name: 'Ether (Wrapped)',\n    symbol: 'ETH'\n  },\n  '0x1416946162b1c2c871a73b07e932d2fb6c932069': {\n    name: 'Energi',\n    symbol: 'NRGE'\n  }\n}; // override tokens with incorrect symbol or names\n\nexport function updateNameData(data) {\n  var _data$token, _data$token2;\n\n  if ((data === null || data === void 0 ? void 0 : (_data$token = data.token0) === null || _data$token === void 0 ? void 0 : _data$token.id) && Object.keys(TOKEN_OVERRIDES).includes(data.token0.id)) {\n    data.token0.name = TOKEN_OVERRIDES[data.token0.id].name;\n    data.token0.symbol = TOKEN_OVERRIDES[data.token0.id].symbol;\n  }\n\n  if ((data === null || data === void 0 ? void 0 : (_data$token2 = data.token1) === null || _data$token2 === void 0 ? void 0 : _data$token2.id) && Object.keys(TOKEN_OVERRIDES).includes(data.token1.id)) {\n    data.token1.name = TOKEN_OVERRIDES[data.token1.id].name;\n    data.token1.symbol = TOKEN_OVERRIDES[data.token1.id].symbol;\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/Pega/pegaswap-docs/src/utils/data.ts"],"names":["TOKEN_OVERRIDES","name","symbol","updateNameData","data","token0","id","Object","keys","includes","token1"],"mappings":"AAaA;AACA;AACA;AACA,MAAMA,eAAwE,GAAG;AAC/E,gDAA8C;AAC5CC,IAAAA,IAAI,EAAE,iBADsC;AAE5CC,IAAAA,MAAM,EAAE;AAFoC,GADiC;AAK/E,gDAA8C;AAC5CD,IAAAA,IAAI,EAAE,QADsC;AAE5CC,IAAAA,MAAM,EAAE;AAFoC;AALiC,CAAjF,C,CAWA;;AACA,OAAO,SAASC,cAAT,CAAwBC,IAAxB,EAAgE;AAAA;;AACrE,MAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,2BAAAA,IAAI,CAAEC,MAAN,4DAAcC,EAAd,KAAoBC,MAAM,CAACC,IAAP,CAAYR,eAAZ,EAA6BS,QAA7B,CAAsCL,IAAI,CAACC,MAAL,CAAYC,EAAlD,CAAxB,EAA+E;AAC7EF,IAAAA,IAAI,CAACC,MAAL,CAAYJ,IAAZ,GAAmBD,eAAe,CAACI,IAAI,CAACC,MAAL,CAAYC,EAAb,CAAf,CAAgCL,IAAnD;AACAG,IAAAA,IAAI,CAACC,MAAL,CAAYH,MAAZ,GAAqBF,eAAe,CAACI,IAAI,CAACC,MAAL,CAAYC,EAAb,CAAf,CAAgCJ,MAArD;AACD;;AAED,MAAI,CAAAE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,4BAAAA,IAAI,CAAEM,MAAN,8DAAcJ,EAAd,KAAoBC,MAAM,CAACC,IAAP,CAAYR,eAAZ,EAA6BS,QAA7B,CAAsCL,IAAI,CAACM,MAAL,CAAYJ,EAAlD,CAAxB,EAA+E;AAC7EF,IAAAA,IAAI,CAACM,MAAL,CAAYT,IAAZ,GAAmBD,eAAe,CAACI,IAAI,CAACM,MAAL,CAAYJ,EAAb,CAAf,CAAgCL,IAAnD;AACAG,IAAAA,IAAI,CAACM,MAAL,CAAYR,MAAZ,GAAqBF,eAAe,CAACI,IAAI,CAACM,MAAL,CAAYJ,EAAb,CAAf,CAAgCJ,MAArD;AACD;;AAED,SAAOE,IAAP;AACD","sourcesContent":["interface BasicData {\n  token0?: {\n    id: string\n    name: string\n    symbol: string\n  }\n  token1?: {\n    id: string\n    name: string\n    symbol: string\n  }\n}\n\n// Override data return from graph - usually because proxy token has changed\n// names since entitiy was created in subgraph\n// keys are lowercase token addresses <--------\nconst TOKEN_OVERRIDES: { [address: string]: { name: string; symbol: string } } = {\n  '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2': {\n    name: 'Ether (Wrapped)',\n    symbol: 'ETH',\n  },\n  '0x1416946162b1c2c871a73b07e932d2fb6c932069': {\n    name: 'Energi',\n    symbol: 'NRGE',\n  },\n}\n\n// override tokens with incorrect symbol or names\nexport function updateNameData(data: BasicData): BasicData | undefined {\n  if (data?.token0?.id && Object.keys(TOKEN_OVERRIDES).includes(data.token0.id)) {\n    data.token0.name = TOKEN_OVERRIDES[data.token0.id].name\n    data.token0.symbol = TOKEN_OVERRIDES[data.token0.id].symbol\n  }\n\n  if (data?.token1?.id && Object.keys(TOKEN_OVERRIDES).includes(data.token1.id)) {\n    data.token1.name = TOKEN_OVERRIDES[data.token1.id].name\n    data.token1.symbol = TOKEN_OVERRIDES[data.token1.id].symbol\n  }\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}