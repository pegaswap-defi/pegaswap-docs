{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/utils/index.js\";\nimport React from 'react';\nimport { BigNumber } from 'bignumber.js';\nimport dayjs from 'dayjs';\nimport { ethers } from 'ethers';\nimport utc from 'dayjs/plugin/utc';\nimport { client, blockClient } from '../apollo/client';\nimport { GET_BLOCK, GET_BLOCKS, SHARE_VALUE } from '../apollo/queries';\nimport { Text } from 'rebass';\nimport _Decimal from 'decimal.js-light';\nimport toFormat from 'toformat';\nimport { timeframeOptions } from '../constants';\nimport Numeral from 'numeral'; // format libraries\n\nconst Decimal = toFormat(_Decimal);\nBigNumber.set({\n  EXPONENTIAL_AT: 50\n});\ndayjs.extend(utc);\nexport function getTimeframe(timeWindow) {\n  const utcEndTime = dayjs.utc(); // based on window, get starttime\n\n  let utcStartTime;\n\n  switch (timeWindow) {\n    case timeframeOptions.WEEK:\n      utcStartTime = utcEndTime.subtract(1, 'week').endOf('day').unix() - 1;\n      break;\n\n    case timeframeOptions.MONTH:\n      utcStartTime = utcEndTime.subtract(1, 'month').endOf('day').unix() - 1;\n      break;\n\n    case timeframeOptions.ALL_TIME:\n      utcStartTime = utcEndTime.subtract(1, 'year').endOf('day').unix() - 1;\n      break;\n\n    default:\n      utcStartTime = utcEndTime.subtract(1, 'year').startOf('year').unix() - 1;\n      break;\n  }\n\n  return utcStartTime;\n}\nexport function getPoolLink(token0Address, token1Address = null, remove = false) {\n  if (!token1Address) {\n    return `https://uniswap.exchange/` + (remove ? `remove` : `add`) + `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${'ETH'}`;\n  } else {\n    return `https://uniswap.exchange/` + (remove ? `remove` : `add`) + `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address}`;\n  }\n}\nexport function getSwapLink(token0Address, token1Address = null) {\n  if (!token1Address) {\n    return `https://uniswap.exchange/swap?inputCurrency=${token0Address}`;\n  } else {\n    return `https://uniswap.exchange/swap?inputCurrency=${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}&outputCurrency=${token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address}`;\n  }\n}\nexport function getMiningPoolLink(token0Address) {\n  return `https://app.uniswap.org/#/uni/ETH/${token0Address}`;\n}\nexport function getUniswapAppLink(linkVariable) {\n  let baseUniswapUrl = 'https://app.uniswap.org/#/uni';\n\n  if (!linkVariable) {\n    return baseUniswapUrl;\n  }\n\n  return `${baseUniswapUrl}/ETH/${linkVariable}`;\n}\nexport function localNumber(val) {\n  return Numeral(val).format('0,0');\n}\nexport const toNiceDate = date => {\n  let x = dayjs.utc(dayjs.unix(date)).format('MMM DD');\n  return x;\n};\nexport const toWeeklyDate = date => {\n  const formatted = dayjs.utc(dayjs.unix(date));\n  date = new Date(formatted);\n  const day = new Date(formatted).getDay();\n  var lessDays = day === 6 ? 0 : day + 1;\n  var wkStart = new Date(new Date(date).setDate(date.getDate() - lessDays));\n  var wkEnd = new Date(new Date(wkStart).setDate(wkStart.getDate() + 6));\n  return dayjs.utc(wkStart).format('MMM DD') + ' - ' + dayjs.utc(wkEnd).format('MMM DD');\n};\nexport function getTimestampsForChanges() {\n  const utcCurrentTime = dayjs();\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix();\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix();\n  return [t1, t2, tWeek];\n}\nexport async function splitQuery(query, localClient, vars, list, skipCount = 100) {\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n\n  while (!allFound) {\n    let end = list.length;\n\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount;\n    }\n\n    let sliced = list.slice(skip, end);\n    let result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'cache-first'\n    });\n    fetchedData = { ...fetchedData,\n      ...result.data\n    };\n\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\n      allFound = true;\n    } else {\n      skip += skipCount;\n    }\n  }\n\n  return fetchedData;\n}\n/**\n * @notice Fetches first block after a given timestamp\n * @dev Query speed is optimized by limiting to a 600-second period\n * @param {Int} timestamp in seconds\n */\n\nexport async function getBlockFromTimestamp(timestamp) {\n  var _result$data, _result$data$blocks, _result$data$blocks$;\n\n  let result = await blockClient.query({\n    query: GET_BLOCK,\n    variables: {\n      timestampFrom: timestamp,\n      timestampTo: timestamp + 600\n    },\n    fetchPolicy: 'cache-first'\n  });\n  return result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$blocks = _result$data.blocks) === null || _result$data$blocks === void 0 ? void 0 : (_result$data$blocks$ = _result$data$blocks[0]) === null || _result$data$blocks$ === void 0 ? void 0 : _result$data$blocks$.number;\n}\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @dev blocks are returned in chronological order (ASC) regardless of input.\n * @dev blocks are returned at string representations of Int\n * @dev timestamps are returns as they were provided; not the block time.\n * @param {Array} timestamps\n */\n\nexport async function getBlocksFromTimestamps(timestamps, skipCount = 500) {\n  if ((timestamps === null || timestamps === void 0 ? void 0 : timestamps.length) === 0) {\n    return [];\n  }\n\n  let fetchedData = await splitQuery(GET_BLOCKS, blockClient, [], timestamps, skipCount);\n  let blocks = [];\n\n  if (fetchedData) {\n    for (var t in fetchedData) {\n      if (fetchedData[t].length > 0) {\n        blocks.push({\n          timestamp: t.split('t')[1],\n          number: fetchedData[t][0]['number']\n        });\n      }\n    }\n  }\n\n  return blocks;\n}\nexport async function getLiquidityTokenBalanceOvertime(account, timestamps) {\n  // get blocks based on timestamps\n  const blocks = await getBlocksFromTimestamps(timestamps); // get historical share values with time travel queries\n\n  let result = await client.query({\n    query: SHARE_VALUE(account, blocks),\n    fetchPolicy: 'cache-first'\n  });\n  let values = [];\n\n  for (var row in result === null || result === void 0 ? void 0 : result.data) {\n    let timestamp = row.split('t')[1];\n\n    if (timestamp) {\n      values.push({\n        timestamp,\n        balance: 0\n      });\n    }\n  }\n}\n/**\n * @notice Example query using time travel queries\n * @dev TODO - handle scenario where blocks are not available for a timestamps (e.g. current time)\n * @param {String} pairAddress\n * @param {Array} timestamps\n */\n\nexport async function getShareValueOverTime(pairAddress, timestamps) {\n  if (!timestamps) {\n    const utcCurrentTime = dayjs();\n    const utcSevenDaysBack = utcCurrentTime.subtract(8, 'day').unix();\n    timestamps = getTimestampRange(utcSevenDaysBack, 86400, 7);\n  } // get blocks based on timestamps\n\n\n  const blocks = await getBlocksFromTimestamps(timestamps); // get historical share values with time travel queries\n\n  let result = await client.query({\n    query: SHARE_VALUE(pairAddress, blocks),\n    fetchPolicy: 'cache-first'\n  });\n  let values = [];\n\n  for (var row in result === null || result === void 0 ? void 0 : result.data) {\n    var _result$data$row, _result$data$row2;\n\n    let timestamp = row.split('t')[1];\n    let sharePriceUsd = parseFloat((_result$data$row = result.data[row]) === null || _result$data$row === void 0 ? void 0 : _result$data$row.reserveUSD) / parseFloat((_result$data$row2 = result.data[row]) === null || _result$data$row2 === void 0 ? void 0 : _result$data$row2.totalSupply);\n\n    if (timestamp) {\n      values.push({\n        timestamp,\n        sharePriceUsd,\n        totalSupply: result.data[row].totalSupply,\n        reserve0: result.data[row].reserve0,\n        reserve1: result.data[row].reserve1,\n        reserveUSD: result.data[row].reserveUSD,\n        token0DerivedETH: result.data[row].token0.derivedETH,\n        token1DerivedETH: result.data[row].token1.derivedETH,\n        roiUsd: values && values[0] ? sharePriceUsd / values[0]['sharePriceUsd'] : 1,\n        ethPrice: 0,\n        token0PriceUSD: 0,\n        token1PriceUSD: 0\n      });\n    }\n  } // add eth prices\n\n\n  let index = 0;\n\n  for (var brow in result === null || result === void 0 ? void 0 : result.data) {\n    let timestamp = brow.split('b')[1];\n\n    if (timestamp) {\n      values[index].ethPrice = result.data[brow].ethPrice;\n      values[index].token0PriceUSD = result.data[brow].ethPrice * values[index].token0DerivedETH;\n      values[index].token1PriceUSD = result.data[brow].ethPrice * values[index].token1DerivedETH;\n      index += 1;\n    }\n  }\n\n  return values;\n}\n/**\n * @notice Creates an evenly-spaced array of timestamps\n * @dev Periods include a start and end timestamp. For example, n periods are defined by n+1 timestamps.\n * @param {Int} timestamp_from in seconds\n * @param {Int} period_length in seconds\n * @param {Int} periods\n */\n\nexport function getTimestampRange(timestamp_from, period_length, periods) {\n  let timestamps = [];\n\n  for (let i = 0; i <= periods; i++) {\n    timestamps.push(timestamp_from + i * period_length);\n  }\n\n  return timestamps;\n}\nexport const toNiceDateYear = date => dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY');\nexport const isAddress = value => {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n};\nexport const toK = num => {\n  return Numeral(num).format('0.[00]a');\n};\nexport const setThemeColor = theme => document.documentElement.style.setProperty('--c-token', theme || '#333333');\nexport const Big = number => new BigNumber(number);\nexport const urls = {\n  showTransaction: tx => `https://etherscan.io/tx/${tx}/`,\n  showAddress: address => `https://www.etherscan.io/address/${address}/`,\n  showToken: address => `https://www.etherscan.io/token/${address}/`,\n  showBlock: block => `https://etherscan.io/block/${block}/`\n};\nexport const formatTime = unix => {\n  const now = dayjs();\n  const timestamp = dayjs.unix(unix);\n  const inSeconds = now.diff(timestamp, 'second');\n  const inMinutes = now.diff(timestamp, 'minute');\n  const inHours = now.diff(timestamp, 'hour');\n  const inDays = now.diff(timestamp, 'day');\n\n  if (inHours >= 24) {\n    return `${inDays} ${inDays === 1 ? 'day' : 'days'} ago`;\n  } else if (inMinutes >= 60) {\n    return `${inHours} ${inHours === 1 ? 'hour' : 'hours'} ago`;\n  } else if (inSeconds >= 60) {\n    return `${inMinutes} ${inMinutes === 1 ? 'minute' : 'minutes'} ago`;\n  } else {\n    return `${inSeconds} ${inSeconds === 1 ? 'second' : 'seconds'} ago`;\n  }\n};\nexport const formatNumber = num => {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n}; // using a currency library here in case we want to add more in future\n\nexport const formatDollarAmount = (num, digits) => {\n  const formatter = new Intl.NumberFormat([], {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits\n  });\n  return formatter.format(num);\n};\nexport const toSignificant = (number, significantDigits) => {\n  Decimal.set({\n    precision: significantDigits + 1,\n    rounding: Decimal.ROUND_UP\n  });\n  const updated = new Decimal(number).toSignificantDigits(significantDigits);\n  return updated.toFormat(updated.decimalPlaces(), {\n    groupSeparator: ''\n  });\n};\nexport const formattedNum = (number, usd = false, acceptNegatives = false) => {\n  if (isNaN(number) || number === '' || number === undefined) {\n    return usd ? '$0' : 0;\n  }\n\n  let num = parseFloat(number);\n\n  if (num > 500000000) {\n    return (usd ? '$' : '') + toK(num.toFixed(0), true);\n  }\n\n  if (num === 0) {\n    if (usd) {\n      return '$0';\n    }\n\n    return 0;\n  }\n\n  if (num < 0.0001 && num > 0) {\n    return usd ? '< $0.0001' : '< 0.0001';\n  }\n\n  if (num > 1000) {\n    return usd ? formatDollarAmount(num, 0) : Number(parseFloat(num).toFixed(0)).toLocaleString();\n  }\n\n  if (usd) {\n    if (num < 0.1) {\n      return formatDollarAmount(num, 4);\n    } else {\n      return formatDollarAmount(num, 2);\n    }\n  }\n\n  return Number(parseFloat(num).toFixed(5)).toLocaleString();\n};\nexport function rawPercent(percentRaw) {\n  let percent = parseFloat(percentRaw * 100);\n\n  if (!percent || percent === 0) {\n    return '0%';\n  }\n\n  if (percent < 1 && percent > 0) {\n    return '< 1%';\n  }\n\n  return percent.toFixed(0) + '%';\n}\nexport function formattedPercent(percent, useBrackets = false) {\n  percent = parseFloat(percent);\n\n  if (!percent || percent === 0) {\n    return /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 12\n      }\n    }, \"0%\");\n  }\n\n  if (percent < 0.0001 && percent > 0) {\n    return /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      color: \"green\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 7\n      }\n    }, '< 0.0001%');\n  }\n\n  if (percent < 0 && percent > -0.0001) {\n    return /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 7\n      }\n    }, '< 0.0001%');\n  }\n\n  let fixedPercent = percent.toFixed(2);\n\n  if (fixedPercent === '0.00') {\n    return '0%';\n  }\n\n  if (fixedPercent > 0) {\n    if (fixedPercent > 100) {\n      var _percent;\n\n      return /*#__PURE__*/React.createElement(Text, {\n        fontWeight: 500,\n        color: \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 14\n        }\n      }, `+${(_percent = percent) === null || _percent === void 0 ? void 0 : _percent.toFixed(0).toLocaleString()}%`);\n    } else {\n      return /*#__PURE__*/React.createElement(Text, {\n        fontWeight: 500,\n        color: \"green\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 14\n        }\n      }, `+${fixedPercent}%`);\n    }\n  } else {\n    return /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 12\n      }\n    }, `${fixedPercent}%`);\n  }\n}\n/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\n\nexport const get2DayPercentChange = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  let currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo);\n  let previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo);\n  const adjustedPercentChange = parseFloat(currentChange - previousChange) / parseFloat(previousChange) * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0];\n  }\n\n  return [currentChange, adjustedPercentChange];\n};\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\n\nexport const getPercentChange = (valueNow, value24HoursAgo) => {\n  const adjustedPercentChange = (parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo) * 100;\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return 0;\n  }\n\n  return adjustedPercentChange;\n};\nexport function isEquivalent(a, b) {\n  var aProps = Object.getOwnPropertyNames(a);\n  var bProps = Object.getOwnPropertyNames(b);\n\n  if (aProps.length !== bProps.length) {\n    return false;\n  }\n\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i];\n\n    if (a[propName] !== b[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/utils/index.js"],"names":["React","BigNumber","dayjs","ethers","utc","client","blockClient","GET_BLOCK","GET_BLOCKS","SHARE_VALUE","Text","_Decimal","toFormat","timeframeOptions","Numeral","Decimal","set","EXPONENTIAL_AT","extend","getTimeframe","timeWindow","utcEndTime","utcStartTime","WEEK","subtract","endOf","unix","MONTH","ALL_TIME","startOf","getPoolLink","token0Address","token1Address","remove","getSwapLink","getMiningPoolLink","getUniswapAppLink","linkVariable","baseUniswapUrl","localNumber","val","format","toNiceDate","date","x","toWeeklyDate","formatted","Date","day","getDay","lessDays","wkStart","setDate","getDate","wkEnd","getTimestampsForChanges","utcCurrentTime","t1","t2","tWeek","splitQuery","query","localClient","vars","list","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","result","fetchPolicy","data","Object","keys","getBlockFromTimestamp","timestamp","variables","timestampFrom","timestampTo","blocks","number","getBlocksFromTimestamps","timestamps","t","push","split","getLiquidityTokenBalanceOvertime","account","values","row","balance","getShareValueOverTime","pairAddress","utcSevenDaysBack","getTimestampRange","sharePriceUsd","parseFloat","reserveUSD","totalSupply","reserve0","reserve1","token0DerivedETH","token0","derivedETH","token1DerivedETH","token1","roiUsd","ethPrice","token0PriceUSD","token1PriceUSD","index","brow","timestamp_from","period_length","periods","i","toNiceDateYear","isAddress","value","utils","getAddress","toLowerCase","toK","num","setThemeColor","theme","document","documentElement","style","setProperty","Big","urls","showTransaction","tx","showAddress","address","showToken","showBlock","block","formatTime","now","inSeconds","diff","inMinutes","inHours","inDays","formatNumber","toString","replace","formatDollarAmount","digits","formatter","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","toSignificant","significantDigits","precision","rounding","ROUND_UP","updated","toSignificantDigits","decimalPlaces","groupSeparator","formattedNum","usd","acceptNegatives","isNaN","undefined","toFixed","Number","toLocaleString","rawPercent","percentRaw","percent","formattedPercent","useBrackets","fixedPercent","get2DayPercentChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","previousChange","adjustedPercentChange","isFinite","getPercentChange","isEquivalent","a","b","aProps","getOwnPropertyNames","bProps","propName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { BigNumber } from 'bignumber.js'\nimport dayjs from 'dayjs'\nimport { ethers } from 'ethers'\nimport utc from 'dayjs/plugin/utc'\nimport { client, blockClient } from '../apollo/client'\nimport { GET_BLOCK, GET_BLOCKS, SHARE_VALUE } from '../apollo/queries'\nimport { Text } from 'rebass'\nimport _Decimal from 'decimal.js-light'\nimport toFormat from 'toformat'\nimport { timeframeOptions } from '../constants'\nimport Numeral from 'numeral'\n\n// format libraries\nconst Decimal = toFormat(_Decimal)\nBigNumber.set({ EXPONENTIAL_AT: 50 })\ndayjs.extend(utc)\n\nexport function getTimeframe(timeWindow) {\n  const utcEndTime = dayjs.utc()\n  // based on window, get starttime\n  let utcStartTime\n  switch (timeWindow) {\n    case timeframeOptions.WEEK:\n      utcStartTime = utcEndTime.subtract(1, 'week').endOf('day').unix() - 1\n      break\n    case timeframeOptions.MONTH:\n      utcStartTime = utcEndTime.subtract(1, 'month').endOf('day').unix() - 1\n      break\n    case timeframeOptions.ALL_TIME:\n      utcStartTime = utcEndTime.subtract(1, 'year').endOf('day').unix() - 1\n      break\n    default:\n      utcStartTime = utcEndTime.subtract(1, 'year').startOf('year').unix() - 1\n      break\n  }\n  return utcStartTime\n}\n\nexport function getPoolLink(token0Address, token1Address = null, remove = false) {\n  if (!token1Address) {\n    return (\n      `https://uniswap.exchange/` +\n      (remove ? `remove` : `add`) +\n      `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${'ETH'}`\n    )\n  } else {\n    return (\n      `https://uniswap.exchange/` +\n      (remove ? `remove` : `add`) +\n      `/${token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address}/${\n        token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address\n      }`\n    )\n  }\n}\n\nexport function getSwapLink(token0Address, token1Address = null) {\n  if (!token1Address) {\n    return `https://uniswap.exchange/swap?inputCurrency=${token0Address}`\n  } else {\n    return `https://uniswap.exchange/swap?inputCurrency=${\n      token0Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token0Address\n    }&outputCurrency=${token1Address === '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2' ? 'ETH' : token1Address}`\n  }\n}\n\nexport function getMiningPoolLink(token0Address) {\n  return `https://app.uniswap.org/#/uni/ETH/${token0Address}`\n}\n\nexport function getUniswapAppLink(linkVariable) {\n  let baseUniswapUrl = 'https://app.uniswap.org/#/uni'\n  if (!linkVariable) {\n    return baseUniswapUrl\n  }\n\n  return `${baseUniswapUrl}/ETH/${linkVariable}`\n}\n\nexport function localNumber(val) {\n  return Numeral(val).format('0,0')\n}\n\nexport const toNiceDate = (date) => {\n  let x = dayjs.utc(dayjs.unix(date)).format('MMM DD')\n  return x\n}\n\nexport const toWeeklyDate = (date) => {\n  const formatted = dayjs.utc(dayjs.unix(date))\n  date = new Date(formatted)\n  const day = new Date(formatted).getDay()\n  var lessDays = day === 6 ? 0 : day + 1\n  var wkStart = new Date(new Date(date).setDate(date.getDate() - lessDays))\n  var wkEnd = new Date(new Date(wkStart).setDate(wkStart.getDate() + 6))\n  return dayjs.utc(wkStart).format('MMM DD') + ' - ' + dayjs.utc(wkEnd).format('MMM DD')\n}\n\nexport function getTimestampsForChanges() {\n  const utcCurrentTime = dayjs()\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix()\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix()\n  return [t1, t2, tWeek]\n}\n\nexport async function splitQuery(query, localClient, vars, list, skipCount = 100) {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n\n  while (!allFound) {\n    let end = list.length\n    if (skip + skipCount < list.length) {\n      end = skip + skipCount\n    }\n    let sliced = list.slice(skip, end)\n    let result = await localClient.query({\n      query: query(...vars, sliced),\n      fetchPolicy: 'cache-first',\n    })\n    fetchedData = {\n      ...fetchedData,\n      ...result.data,\n    }\n    if (Object.keys(result.data).length < skipCount || skip + skipCount > list.length) {\n      allFound = true\n    } else {\n      skip += skipCount\n    }\n  }\n\n  return fetchedData\n}\n\n/**\n * @notice Fetches first block after a given timestamp\n * @dev Query speed is optimized by limiting to a 600-second period\n * @param {Int} timestamp in seconds\n */\nexport async function getBlockFromTimestamp(timestamp) {\n  let result = await blockClient.query({\n    query: GET_BLOCK,\n    variables: {\n      timestampFrom: timestamp,\n      timestampTo: timestamp + 600,\n    },\n    fetchPolicy: 'cache-first',\n  })\n  return result?.data?.blocks?.[0]?.number\n}\n\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @dev blocks are returned in chronological order (ASC) regardless of input.\n * @dev blocks are returned at string representations of Int\n * @dev timestamps are returns as they were provided; not the block time.\n * @param {Array} timestamps\n */\nexport async function getBlocksFromTimestamps(timestamps, skipCount = 500) {\n  if (timestamps?.length === 0) {\n    return []\n  }\n\n  let fetchedData = await splitQuery(GET_BLOCKS, blockClient, [], timestamps, skipCount)\n\n  let blocks = []\n  if (fetchedData) {\n    for (var t in fetchedData) {\n      if (fetchedData[t].length > 0) {\n        blocks.push({\n          timestamp: t.split('t')[1],\n          number: fetchedData[t][0]['number'],\n        })\n      }\n    }\n  }\n  return blocks\n}\n\nexport async function getLiquidityTokenBalanceOvertime(account, timestamps) {\n  // get blocks based on timestamps\n  const blocks = await getBlocksFromTimestamps(timestamps)\n\n  // get historical share values with time travel queries\n  let result = await client.query({\n    query: SHARE_VALUE(account, blocks),\n    fetchPolicy: 'cache-first',\n  })\n\n  let values = []\n  for (var row in result?.data) {\n    let timestamp = row.split('t')[1]\n    if (timestamp) {\n      values.push({\n        timestamp,\n        balance: 0,\n      })\n    }\n  }\n}\n\n/**\n * @notice Example query using time travel queries\n * @dev TODO - handle scenario where blocks are not available for a timestamps (e.g. current time)\n * @param {String} pairAddress\n * @param {Array} timestamps\n */\nexport async function getShareValueOverTime(pairAddress, timestamps) {\n  if (!timestamps) {\n    const utcCurrentTime = dayjs()\n    const utcSevenDaysBack = utcCurrentTime.subtract(8, 'day').unix()\n    timestamps = getTimestampRange(utcSevenDaysBack, 86400, 7)\n  }\n\n  // get blocks based on timestamps\n  const blocks = await getBlocksFromTimestamps(timestamps)\n\n  // get historical share values with time travel queries\n  let result = await client.query({\n    query: SHARE_VALUE(pairAddress, blocks),\n    fetchPolicy: 'cache-first',\n  })\n\n  let values = []\n  for (var row in result?.data) {\n    let timestamp = row.split('t')[1]\n    let sharePriceUsd = parseFloat(result.data[row]?.reserveUSD) / parseFloat(result.data[row]?.totalSupply)\n    if (timestamp) {\n      values.push({\n        timestamp,\n        sharePriceUsd,\n        totalSupply: result.data[row].totalSupply,\n        reserve0: result.data[row].reserve0,\n        reserve1: result.data[row].reserve1,\n        reserveUSD: result.data[row].reserveUSD,\n        token0DerivedETH: result.data[row].token0.derivedETH,\n        token1DerivedETH: result.data[row].token1.derivedETH,\n        roiUsd: values && values[0] ? sharePriceUsd / values[0]['sharePriceUsd'] : 1,\n        ethPrice: 0,\n        token0PriceUSD: 0,\n        token1PriceUSD: 0,\n      })\n    }\n  }\n\n  // add eth prices\n  let index = 0\n  for (var brow in result?.data) {\n    let timestamp = brow.split('b')[1]\n    if (timestamp) {\n      values[index].ethPrice = result.data[brow].ethPrice\n      values[index].token0PriceUSD = result.data[brow].ethPrice * values[index].token0DerivedETH\n      values[index].token1PriceUSD = result.data[brow].ethPrice * values[index].token1DerivedETH\n      index += 1\n    }\n  }\n\n  return values\n}\n\n/**\n * @notice Creates an evenly-spaced array of timestamps\n * @dev Periods include a start and end timestamp. For example, n periods are defined by n+1 timestamps.\n * @param {Int} timestamp_from in seconds\n * @param {Int} period_length in seconds\n * @param {Int} periods\n */\nexport function getTimestampRange(timestamp_from, period_length, periods) {\n  let timestamps = []\n  for (let i = 0; i <= periods; i++) {\n    timestamps.push(timestamp_from + i * period_length)\n  }\n  return timestamps\n}\n\nexport const toNiceDateYear = (date) => dayjs.utc(dayjs.unix(date)).format('MMMM DD, YYYY')\n\nexport const isAddress = (value) => {\n  try {\n    return ethers.utils.getAddress(value.toLowerCase())\n  } catch {\n    return false\n  }\n}\n\nexport const toK = (num) => {\n  return Numeral(num).format('0.[00]a')\n}\n\nexport const setThemeColor = (theme) => document.documentElement.style.setProperty('--c-token', theme || '#333333')\n\nexport const Big = (number) => new BigNumber(number)\n\nexport const urls = {\n  showTransaction: (tx) => `https://etherscan.io/tx/${tx}/`,\n  showAddress: (address) => `https://www.etherscan.io/address/${address}/`,\n  showToken: (address) => `https://www.etherscan.io/token/${address}/`,\n  showBlock: (block) => `https://etherscan.io/block/${block}/`,\n}\n\nexport const formatTime = (unix) => {\n  const now = dayjs()\n  const timestamp = dayjs.unix(unix)\n\n  const inSeconds = now.diff(timestamp, 'second')\n  const inMinutes = now.diff(timestamp, 'minute')\n  const inHours = now.diff(timestamp, 'hour')\n  const inDays = now.diff(timestamp, 'day')\n\n  if (inHours >= 24) {\n    return `${inDays} ${inDays === 1 ? 'day' : 'days'} ago`\n  } else if (inMinutes >= 60) {\n    return `${inHours} ${inHours === 1 ? 'hour' : 'hours'} ago`\n  } else if (inSeconds >= 60) {\n    return `${inMinutes} ${inMinutes === 1 ? 'minute' : 'minutes'} ago`\n  } else {\n    return `${inSeconds} ${inSeconds === 1 ? 'second' : 'seconds'} ago`\n  }\n}\n\nexport const formatNumber = (num) => {\n  return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,')\n}\n\n// using a currency library here in case we want to add more in future\nexport const formatDollarAmount = (num, digits) => {\n  const formatter = new Intl.NumberFormat([], {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: digits,\n    maximumFractionDigits: digits,\n  })\n  return formatter.format(num)\n}\n\nexport const toSignificant = (number, significantDigits) => {\n  Decimal.set({ precision: significantDigits + 1, rounding: Decimal.ROUND_UP })\n  const updated = new Decimal(number).toSignificantDigits(significantDigits)\n  return updated.toFormat(updated.decimalPlaces(), { groupSeparator: '' })\n}\n\nexport const formattedNum = (number, usd = false, acceptNegatives = false) => {\n  if (isNaN(number) || number === '' || number === undefined) {\n    return usd ? '$0' : 0\n  }\n  let num = parseFloat(number)\n\n  if (num > 500000000) {\n    return (usd ? '$' : '') + toK(num.toFixed(0), true)\n  }\n\n  if (num === 0) {\n    if (usd) {\n      return '$0'\n    }\n    return 0\n  }\n\n  if (num < 0.0001 && num > 0) {\n    return usd ? '< $0.0001' : '< 0.0001'\n  }\n\n  if (num > 1000) {\n    return usd ? formatDollarAmount(num, 0) : Number(parseFloat(num).toFixed(0)).toLocaleString()\n  }\n\n  if (usd) {\n    if (num < 0.1) {\n      return formatDollarAmount(num, 4)\n    } else {\n      return formatDollarAmount(num, 2)\n    }\n  }\n\n  return Number(parseFloat(num).toFixed(5)).toLocaleString()\n}\n\nexport function rawPercent(percentRaw) {\n  let percent = parseFloat(percentRaw * 100)\n  if (!percent || percent === 0) {\n    return '0%'\n  }\n  if (percent < 1 && percent > 0) {\n    return '< 1%'\n  }\n  return percent.toFixed(0) + '%'\n}\n\nexport function formattedPercent(percent, useBrackets = false) {\n  percent = parseFloat(percent)\n  if (!percent || percent === 0) {\n    return <Text fontWeight={500}>0%</Text>\n  }\n\n  if (percent < 0.0001 && percent > 0) {\n    return (\n      <Text fontWeight={500} color=\"green\">\n        {'< 0.0001%'}\n      </Text>\n    )\n  }\n\n  if (percent < 0 && percent > -0.0001) {\n    return (\n      <Text fontWeight={500} color=\"red\">\n        {'< 0.0001%'}\n      </Text>\n    )\n  }\n\n  let fixedPercent = percent.toFixed(2)\n  if (fixedPercent === '0.00') {\n    return '0%'\n  }\n  if (fixedPercent > 0) {\n    if (fixedPercent > 100) {\n      return <Text fontWeight={500} color=\"green\">{`+${percent?.toFixed(0).toLocaleString()}%`}</Text>\n    } else {\n      return <Text fontWeight={500} color=\"green\">{`+${fixedPercent}%`}</Text>\n    }\n  } else {\n    return <Text fontWeight={500} color=\"red\">{`${fixedPercent}%`}</Text>\n  }\n}\n\n/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayPercentChange = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  let currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\n  let previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\n\n  const adjustedPercentChange = (parseFloat(currentChange - previousChange) / parseFloat(previousChange)) * 100\n\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0]\n  }\n  return [currentChange, adjustedPercentChange]\n}\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow, value24HoursAgo) => {\n  const adjustedPercentChange =\n    ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return 0\n  }\n  return adjustedPercentChange\n}\n\nexport function isEquivalent(a, b) {\n  var aProps = Object.getOwnPropertyNames(a)\n  var bProps = Object.getOwnPropertyNames(b)\n  if (aProps.length !== bProps.length) {\n    return false\n  }\n  for (var i = 0; i < aProps.length; i++) {\n    var propName = aProps[i]\n    if (a[propName] !== b[propName]) {\n      return false\n    }\n  }\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}