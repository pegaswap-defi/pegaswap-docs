{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{createContext,useContext,useReducer,useMemo,useCallback,useEffect,useState}from'react';import{useAllPairData,usePairData}from'./PairData';import{client,stakingClient}from'../apollo/client';import{USER_TRANSACTIONS,USER_POSITIONS,USER_HISTORY,PAIR_DAY_DATA_BULK,MINING_POSITIONS}from'../apollo/queries';import{useTimeframe,useStartTimestamp}from'./Application';import dayjs from'dayjs';import utc from'dayjs/plugin/utc';import{useEthPrice}from'./GlobalData';import{getLPReturnsOnPair,getHistoricalPairReturns}from'../utils/returns';import{timeframeOptions}from'../constants';dayjs.extend(utc);var UPDATE_TRANSACTIONS='UPDATE_TRANSACTIONS';var UPDATE_POSITIONS='UPDATE_POSITIONS ';var UPDATE_MINING_POSITIONS='UPDATE_MINING_POSITIONS';var UPDATE_USER_POSITION_HISTORY='UPDATE_USER_POSITION_HISTORY';var UPDATE_USER_PAIR_RETURNS='UPDATE_USER_PAIR_RETURNS';var TRANSACTIONS_KEY='TRANSACTIONS_KEY';var POSITIONS_KEY='POSITIONS_KEY';var MINING_POSITIONS_KEY='MINING_POSITIONS_KEY';var USER_SNAPSHOTS='USER_SNAPSHOTS';var USER_PAIR_RETURNS_KEY='USER_PAIR_RETURNS_KEY';var UserContext=createContext();function useUserContext(){return useContext(UserContext);}function reducer(state,_ref){var type=_ref.type,payload=_ref.payload;switch(type){case UPDATE_TRANSACTIONS:{var account=payload.account,transactions=payload.transactions;return _objectSpread(_objectSpread({},state),{},_defineProperty({},account,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:state[account]),{},_defineProperty({},TRANSACTIONS_KEY,transactions))));}case UPDATE_POSITIONS:{var _account=payload.account,positions=payload.positions;return _objectSpread(_objectSpread({},state),{},_defineProperty({},_account,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:state[_account]),{},_defineProperty({},POSITIONS_KEY,positions))));}case UPDATE_MINING_POSITIONS:{var _account2=payload.account,miningPositions=payload.miningPositions;return _objectSpread(_objectSpread({},state),{},_defineProperty({},_account2,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:state[_account2]),{},_defineProperty({},MINING_POSITIONS_KEY,miningPositions))));}case UPDATE_USER_POSITION_HISTORY:{var _account3=payload.account,historyData=payload.historyData;return _objectSpread(_objectSpread({},state),{},_defineProperty({},_account3,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:state[_account3]),{},_defineProperty({},USER_SNAPSHOTS,historyData))));}case UPDATE_USER_PAIR_RETURNS:{var _state$_account;var _account4=payload.account,pairAddress=payload.pairAddress,data=payload.data;return _objectSpread(_objectSpread({},state),{},_defineProperty({},_account4,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:state[_account4]),{},_defineProperty({},USER_PAIR_RETURNS_KEY,_objectSpread(_objectSpread({},state===null||state===void 0?void 0:(_state$_account=state[_account4])===null||_state$_account===void 0?void 0:_state$_account[USER_PAIR_RETURNS_KEY]),{},_defineProperty({},pairAddress,data))))));}default:{throw Error(\"Unexpected action type in DataContext reducer: '\".concat(type,\"'.\"));}}}var INITIAL_STATE={};export default function Provider(_ref2){var children=_ref2.children;var _useReducer=useReducer(reducer,INITIAL_STATE),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var updateTransactions=useCallback(function(account,transactions){dispatch({type:UPDATE_TRANSACTIONS,payload:{account:account,transactions:transactions}});},[]);var updatePositions=useCallback(function(account,positions){dispatch({type:UPDATE_POSITIONS,payload:{account:account,positions:positions}});},[]);var updateMiningPositions=useCallback(function(account,miningPositions){dispatch({type:UPDATE_MINING_POSITIONS,payload:{account:account,miningPositions:miningPositions}});},[]);var updateUserSnapshots=useCallback(function(account,historyData){dispatch({type:UPDATE_USER_POSITION_HISTORY,payload:{account:account,historyData:historyData}});},[]);var updateUserPairReturns=useCallback(function(account,pairAddress,data){dispatch({type:UPDATE_USER_PAIR_RETURNS,payload:{account:account,pairAddress:pairAddress,data:data}});},[]);return/*#__PURE__*/React.createElement(UserContext.Provider,{value:useMemo(function(){return[state,{updateTransactions:updateTransactions,updatePositions:updatePositions,updateMiningPositions:updateMiningPositions,updateUserSnapshots:updateUserSnapshots,updateUserPairReturns:updateUserPairReturns}];},[state,updateTransactions,updatePositions,updateMiningPositions,updateUserSnapshots,updateUserPairReturns])},children);}export function useUserTransactions(account){var _state$account;var _useUserContext=useUserContext(),_useUserContext2=_slicedToArray(_useUserContext,2),state=_useUserContext2[0],updateTransactions=_useUserContext2[1].updateTransactions;var transactions=state===null||state===void 0?void 0:(_state$account=state[account])===null||_state$account===void 0?void 0:_state$account[TRANSACTIONS_KEY];useEffect(function(){function fetchData(_x){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return client.query({query:USER_TRANSACTIONS,variables:{user:account},fetchPolicy:'no-cache'});case 3:result=_context.sent;if(result===null||result===void 0?void 0:result.data){updateTransactions(account,result===null||result===void 0?void 0:result.data);}_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return _fetchData.apply(this,arguments);}if(!transactions&&account){fetchData(account);}},[account,transactions,updateTransactions]);return transactions||{};}/**\n * Store all the snapshots of liquidity activity for this account.\n * Each snapshot is a moment when an LP position was created or updated.\n * @param {*} account\n */export function useUserSnapshots(account){var _state$account2;var _useUserContext3=useUserContext(),_useUserContext4=_slicedToArray(_useUserContext3,2),state=_useUserContext4[0],updateUserSnapshots=_useUserContext4[1].updateUserSnapshots;var snapshots=state===null||state===void 0?void 0:(_state$account2=state[account])===null||_state$account2===void 0?void 0:_state$account2[USER_SNAPSHOTS];useEffect(function(){function fetchData(){return _fetchData2.apply(this,arguments);}function _fetchData2(){_fetchData2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var skip,allResults,found,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;skip=0;allResults=[];found=false;case 4:if(found){_context2.next=12;break;}_context2.next=7;return client.query({query:USER_HISTORY,variables:{skip:skip,user:account},fetchPolicy:'cache-first'});case 7:result=_context2.sent;allResults=allResults.concat(result.data.liquidityPositionSnapshots);if(result.data.liquidityPositionSnapshots.length<1000){found=true;}else{skip+=1000;}_context2.next=4;break;case 12:if(allResults){updateUserSnapshots(account,allResults);}_context2.next=18;break;case 15:_context2.prev=15;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[0,15]]);}));return _fetchData2.apply(this,arguments);}if(!snapshots&&account){fetchData();}},[account,snapshots,updateUserSnapshots]);return snapshots;}/**\n * For a given position (data about holding) and user, get the chart\n * data for the fees and liquidity over time\n * @param {*} position\n * @param {*} account\n */export function useUserPositionChart(position,account){var _position$pair,_state$account3,_state$account3$USER_;var pairAddress=position===null||position===void 0?void 0:(_position$pair=position.pair)===null||_position$pair===void 0?void 0:_position$pair.id;var _useUserContext5=useUserContext(),_useUserContext6=_slicedToArray(_useUserContext5,2),state=_useUserContext6[0],updateUserPairReturns=_useUserContext6[1].updateUserPairReturns;// get oldest date of data to fetch\nvar startDateTimestamp=useStartTimestamp();// get users adds and removes on this pair\nvar snapshots=useUserSnapshots(account);var pairSnapshots=snapshots&&position&&snapshots.filter(function(currentSnapshot){return currentSnapshot.pair.id===position.pair.id;});// get data needed for calculations\nvar currentPairData=usePairData(pairAddress);var _useEthPrice=useEthPrice(),_useEthPrice2=_slicedToArray(_useEthPrice,1),currentETHPrice=_useEthPrice2[0];// formatetd array to return for chart data\nvar formattedHistory=state===null||state===void 0?void 0:(_state$account3=state[account])===null||_state$account3===void 0?void 0:(_state$account3$USER_=_state$account3[USER_PAIR_RETURNS_KEY])===null||_state$account3$USER_===void 0?void 0:_state$account3$USER_[pairAddress];useEffect(function(){function fetchData(){return _fetchData3.apply(this,arguments);}function _fetchData3(){_fetchData3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var fetchedData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getHistoricalPairReturns(startDateTimestamp,currentPairData,pairSnapshots,currentETHPrice);case 2:fetchedData=_context3.sent;updateUserPairReturns(account,pairAddress,fetchedData);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return _fetchData3.apply(this,arguments);}if(account&&startDateTimestamp&&pairSnapshots&&!formattedHistory&&currentPairData&&Object.keys(currentPairData).length>0&&pairAddress&&currentETHPrice){fetchData();}},[account,startDateTimestamp,pairSnapshots,formattedHistory,pairAddress,currentPairData,currentETHPrice,updateUserPairReturns,position.pair.id]);return formattedHistory;}/**\n * For each day starting with min(first position timestamp, beginning of time window),\n * get total liquidity supplied by user in USD. Format in array with date timestamps\n * and usd liquidity value.\n */export function useUserLiquidityChart(account){var history=useUserSnapshots(account);// formatetd array to return for chart data\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),formattedHistory=_useState2[0],setFormattedHistory=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),startDateTimestamp=_useState4[0],setStartDateTimestamp=_useState4[1];var _useTimeframe=useTimeframe(),_useTimeframe2=_slicedToArray(_useTimeframe,1),activeWindow=_useTimeframe2[0];// monitor the old date fetched\nuseEffect(function(){var utcEndTime=dayjs.utc();// based on window, get starttime\nvar utcStartTime;switch(activeWindow){case timeframeOptions.WEEK:utcStartTime=utcEndTime.subtract(1,'week').startOf('day');break;case timeframeOptions.ALL_TIME:utcStartTime=utcEndTime.subtract(1,'year');break;default:utcStartTime=utcEndTime.subtract(1,'year').startOf('year');break;}var startTime=utcStartTime.unix()-1;if(activeWindow&&startTime<startDateTimestamp||!startDateTimestamp){setStartDateTimestamp(startTime);}},[activeWindow,startDateTimestamp]);useEffect(function(){function fetchData(){return _fetchData4.apply(this,arguments);}function _fetchData4(){_fetchData4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var dayIndex,currentDayIndex,sortedPositions,dayTimestamps,pairs,_yield$client$query,pairDayDatas,formattedHistory,ownershipPerPair,_loop,index;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:dayIndex=parseInt(startDateTimestamp/86400);// get unique day bucket unix\ncurrentDayIndex=parseInt(dayjs.utc().unix()/86400);// sort snapshots in order\nsortedPositions=history.sort(function(a,b){return parseInt(a.timestamp)>parseInt(b.timestamp)?1:-1;});// if UI start time is > first position time - bump start index to this time\nif(parseInt(sortedPositions[0].timestamp)>dayIndex){dayIndex=parseInt(parseInt(sortedPositions[0].timestamp)/86400);}dayTimestamps=[];// get date timestamps for all days in view\nwhile(dayIndex<currentDayIndex){dayTimestamps.push(parseInt(dayIndex)*86400);dayIndex=dayIndex+1;}pairs=history.reduce(function(pairList,position){return[].concat(_toConsumableArray(pairList),[position.pair.id]);},[]);// get all day datas where date is in this list, and pair is in pair list\n_context4.next=9;return client.query({query:PAIR_DAY_DATA_BULK(pairs,startDateTimestamp)});case 9:_yield$client$query=_context4.sent;pairDayDatas=_yield$client$query.data.pairDayDatas;formattedHistory=[];// map of current pair => ownership %\nownershipPerPair={};_loop=function _loop(index){var dayTimestamp=dayTimestamps[index];var timestampCeiling=dayTimestamp+86400;// cycle through relevant positions and update ownership for any that we need to\nvar relevantPositions=history.filter(function(snapshot){return snapshot.timestamp<timestampCeiling&&snapshot.timestamp>dayTimestamp;});for(var _index in relevantPositions){var position=relevantPositions[_index];// case where pair not added yet\nif(!ownershipPerPair[position.pair.id]){ownershipPerPair[position.pair.id]={lpTokenBalance:position.liquidityTokenBalance,timestamp:position.timestamp};}// case where more recent timestamp is found for pair\nif(ownershipPerPair[position.pair.id]&&ownershipPerPair[position.pair.id].timestamp<position.timestamp){ownershipPerPair[position.pair.id]={lpTokenBalance:position.liquidityTokenBalance,timestamp:position.timestamp};}}var relavantDayDatas=Object.keys(ownershipPerPair).map(function(pairAddress){// find last day data after timestamp update\nvar dayDatasForThisPair=pairDayDatas.filter(function(dayData){return dayData.pairAddress===pairAddress;});// find the most recent reference to pair liquidity data\nvar mostRecent=dayDatasForThisPair[0];for(var _index2 in dayDatasForThisPair){var dayData=dayDatasForThisPair[_index2];if(dayData.date<dayTimestamp&&dayData.date>mostRecent.date){mostRecent=dayData;}}return mostRecent;});// now cycle through pair day datas, for each one find usd value = ownership[address] * reserveUSD\nvar dailyUSD=relavantDayDatas.reduce(function(totalUSD,dayData){if(dayData){return totalUSD=totalUSD+(ownershipPerPair[dayData.pairAddress]?parseFloat(ownershipPerPair[dayData.pairAddress].lpTokenBalance)/parseFloat(dayData.totalSupply)*parseFloat(dayData.reserveUSD):0);}else{return totalUSD;}},0);formattedHistory.push({date:dayTimestamp,valueUSD:dailyUSD});};for(index in dayTimestamps){_loop(index);}setFormattedHistory(formattedHistory);case 16:case\"end\":return _context4.stop();}}},_callee4);}));return _fetchData4.apply(this,arguments);}if(history&&startDateTimestamp&&history.length>0){fetchData();}},[history,startDateTimestamp]);return formattedHistory;}export function useUserPositions(account){var _state$account4;var _useUserContext7=useUserContext(),_useUserContext8=_slicedToArray(_useUserContext7,2),state=_useUserContext8[0],updatePositions=_useUserContext8[1].updatePositions;var positions=state===null||state===void 0?void 0:(_state$account4=state[account])===null||_state$account4===void 0?void 0:_state$account4[POSITIONS_KEY];var snapshots=useUserSnapshots(account);var _useEthPrice3=useEthPrice(),_useEthPrice4=_slicedToArray(_useEthPrice3,1),ethPrice=_useEthPrice4[0];useEffect(function(){function fetchData(_x2){return _fetchData5.apply(this,arguments);}function _fetchData5(){_fetchData5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(account){var _result$data,result,_result$data2,formattedPositions;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.prev=0;_context6.next=3;return client.query({query:USER_POSITIONS,variables:{user:account},fetchPolicy:'no-cache'});case 3:result=_context6.sent;if(!(result===null||result===void 0?void 0:(_result$data=result.data)===null||_result$data===void 0?void 0:_result$data.liquidityPositions)){_context6.next=9;break;}_context6.next=7;return Promise.all(result===null||result===void 0?void 0:(_result$data2=result.data)===null||_result$data2===void 0?void 0:_result$data2.liquidityPositions.map(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(positionData){var returnData;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return getLPReturnsOnPair(account,positionData.pair,ethPrice,snapshots);case 2:returnData=_context5.sent;return _context5.abrupt(\"return\",_objectSpread(_objectSpread({},positionData),returnData));case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x3){return _ref3.apply(this,arguments);};}()));case 7:formattedPositions=_context6.sent;updatePositions(account,formattedPositions);case 9:_context6.next=14;break;case 11:_context6.prev=11;_context6.t0=_context6[\"catch\"](0);console.log(_context6.t0);case 14:case\"end\":return _context6.stop();}}},_callee6,null,[[0,11]]);}));return _fetchData5.apply(this,arguments);}if(!positions&&account&&ethPrice&&snapshots){fetchData(account);}},[account,positions,updatePositions,ethPrice,snapshots]);return positions;}export function useMiningPositions(account){var _state$account5;var _useUserContext9=useUserContext(),_useUserContext10=_slicedToArray(_useUserContext9,2),state=_useUserContext10[0],updateMiningPositions=_useUserContext10[1].updateMiningPositions;var allPairData=useAllPairData();var miningPositions=state===null||state===void 0?void 0:(_state$account5=state[account])===null||_state$account5===void 0?void 0:_state$account5[MINING_POSITIONS_KEY];var snapshots=useUserSnapshots(account);useEffect(function(){function fetchData(_x4){return _fetchData6.apply(this,arguments);}function _fetchData6(){_fetchData6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(account){var _result$data3,_result$data3$user,miningPositionData,result,_iterator,_step,miningPosition,pairAddress;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.prev=0;miningPositionData=[];_context7.next=4;return stakingClient.query({query:MINING_POSITIONS(account),fetchPolicy:'no-cache'});case 4:result=_context7.sent;if(result===null||result===void 0?void 0:(_result$data3=result.data)===null||_result$data3===void 0?void 0:(_result$data3$user=_result$data3.user)===null||_result$data3$user===void 0?void 0:_result$data3$user.miningPosition){_context7.next=7;break;}return _context7.abrupt(\"return\");case 7:miningPositionData=result.data.user.miningPosition;_iterator=_createForOfIteratorHelper(miningPositionData);try{for(_iterator.s();!(_step=_iterator.n()).done;){miningPosition=_step.value;pairAddress=miningPosition.miningPool.pair.id;miningPosition.pairData=allPairData[pairAddress];}}catch(err){_iterator.e(err);}finally{_iterator.f();}updateMiningPositions(account,miningPositionData);_context7.next=16;break;case 13:_context7.prev=13;_context7.t0=_context7[\"catch\"](0);console.log(_context7.t0);case 16:case\"end\":return _context7.stop();}}},_callee7,null,[[0,13]]);}));return _fetchData6.apply(this,arguments);}if(!miningPositions&&account&&snapshots){fetchData(account);}},[account,miningPositions,updateMiningPositions,snapshots,allPairData]);return miningPositions;}","map":{"version":3,"sources":["/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/contexts/User.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useState","useAllPairData","usePairData","client","stakingClient","USER_TRANSACTIONS","USER_POSITIONS","USER_HISTORY","PAIR_DAY_DATA_BULK","MINING_POSITIONS","useTimeframe","useStartTimestamp","dayjs","utc","useEthPrice","getLPReturnsOnPair","getHistoricalPairReturns","timeframeOptions","extend","UPDATE_TRANSACTIONS","UPDATE_POSITIONS","UPDATE_MINING_POSITIONS","UPDATE_USER_POSITION_HISTORY","UPDATE_USER_PAIR_RETURNS","TRANSACTIONS_KEY","POSITIONS_KEY","MINING_POSITIONS_KEY","USER_SNAPSHOTS","USER_PAIR_RETURNS_KEY","UserContext","useUserContext","reducer","state","type","payload","account","transactions","positions","miningPositions","historyData","pairAddress","data","Error","INITIAL_STATE","Provider","children","dispatch","updateTransactions","updatePositions","updateMiningPositions","updateUserSnapshots","updateUserPairReturns","useUserTransactions","fetchData","query","variables","user","fetchPolicy","result","console","log","useUserSnapshots","snapshots","skip","allResults","found","concat","liquidityPositionSnapshots","length","useUserPositionChart","position","pair","id","startDateTimestamp","pairSnapshots","filter","currentSnapshot","currentPairData","currentETHPrice","formattedHistory","fetchedData","Object","keys","useUserLiquidityChart","history","setFormattedHistory","setStartDateTimestamp","activeWindow","utcEndTime","utcStartTime","WEEK","subtract","startOf","ALL_TIME","startTime","unix","dayIndex","parseInt","currentDayIndex","sortedPositions","sort","a","b","timestamp","dayTimestamps","push","pairs","reduce","pairList","pairDayDatas","ownershipPerPair","index","dayTimestamp","timestampCeiling","relevantPositions","snapshot","lpTokenBalance","liquidityTokenBalance","relavantDayDatas","map","dayDatasForThisPair","dayData","mostRecent","date","dailyUSD","totalUSD","parseFloat","totalSupply","reserveUSD","valueUSD","useUserPositions","ethPrice","liquidityPositions","Promise","all","positionData","returnData","formattedPositions","useMiningPositions","allPairData","miningPositionData","miningPosition","miningPool","pairData"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\nimport { useAllPairData, usePairData } from './PairData'\nimport { client, stakingClient } from '../apollo/client'\nimport {\n  USER_TRANSACTIONS,\n  USER_POSITIONS,\n  USER_HISTORY,\n  PAIR_DAY_DATA_BULK,\n  MINING_POSITIONS,\n} from '../apollo/queries'\nimport { useTimeframe, useStartTimestamp } from './Application'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { useEthPrice } from './GlobalData'\nimport { getLPReturnsOnPair, getHistoricalPairReturns } from '../utils/returns'\nimport { timeframeOptions } from '../constants'\n\ndayjs.extend(utc)\n\nconst UPDATE_TRANSACTIONS = 'UPDATE_TRANSACTIONS'\nconst UPDATE_POSITIONS = 'UPDATE_POSITIONS '\nconst UPDATE_MINING_POSITIONS = 'UPDATE_MINING_POSITIONS'\nconst UPDATE_USER_POSITION_HISTORY = 'UPDATE_USER_POSITION_HISTORY'\nconst UPDATE_USER_PAIR_RETURNS = 'UPDATE_USER_PAIR_RETURNS'\n\nconst TRANSACTIONS_KEY = 'TRANSACTIONS_KEY'\nconst POSITIONS_KEY = 'POSITIONS_KEY'\nconst MINING_POSITIONS_KEY = 'MINING_POSITIONS_KEY'\nconst USER_SNAPSHOTS = 'USER_SNAPSHOTS'\nconst USER_PAIR_RETURNS_KEY = 'USER_PAIR_RETURNS_KEY'\n\nconst UserContext = createContext()\n\nfunction useUserContext() {\n  return useContext(UserContext)\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case UPDATE_TRANSACTIONS: {\n      const { account, transactions } = payload\n      return {\n        ...state,\n        [account]: {\n          ...state?.[account],\n          [TRANSACTIONS_KEY]: transactions,\n        },\n      }\n    }\n    case UPDATE_POSITIONS: {\n      const { account, positions } = payload\n      return {\n        ...state,\n        [account]: { ...state?.[account], [POSITIONS_KEY]: positions },\n      }\n    }\n    case UPDATE_MINING_POSITIONS: {\n      const { account, miningPositions } = payload\n      return {\n        ...state,\n        [account]: { ...state?.[account], [MINING_POSITIONS_KEY]: miningPositions },\n      }\n    }\n    case UPDATE_USER_POSITION_HISTORY: {\n      const { account, historyData } = payload\n      return {\n        ...state,\n        [account]: { ...state?.[account], [USER_SNAPSHOTS]: historyData },\n      }\n    }\n\n    case UPDATE_USER_PAIR_RETURNS: {\n      const { account, pairAddress, data } = payload\n      return {\n        ...state,\n        [account]: {\n          ...state?.[account],\n          [USER_PAIR_RETURNS_KEY]: {\n            ...state?.[account]?.[USER_PAIR_RETURNS_KEY],\n            [pairAddress]: data,\n          },\n        },\n      }\n    }\n\n    default: {\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\n    }\n  }\n}\n\nconst INITIAL_STATE = {}\n\nexport default function Provider({ children }) {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE)\n\n  const updateTransactions = useCallback((account, transactions) => {\n    dispatch({\n      type: UPDATE_TRANSACTIONS,\n      payload: {\n        account,\n        transactions,\n      },\n    })\n  }, [])\n\n  const updatePositions = useCallback((account, positions) => {\n    dispatch({\n      type: UPDATE_POSITIONS,\n      payload: {\n        account,\n        positions,\n      },\n    })\n  }, [])\n\n  const updateMiningPositions = useCallback((account, miningPositions) => {\n    dispatch({\n      type: UPDATE_MINING_POSITIONS,\n      payload: {\n        account,\n        miningPositions,\n      },\n    })\n  }, [])\n\n  const updateUserSnapshots = useCallback((account, historyData) => {\n    dispatch({\n      type: UPDATE_USER_POSITION_HISTORY,\n      payload: {\n        account,\n        historyData,\n      },\n    })\n  }, [])\n\n  const updateUserPairReturns = useCallback((account, pairAddress, data) => {\n    dispatch({\n      type: UPDATE_USER_PAIR_RETURNS,\n      payload: {\n        account,\n        pairAddress,\n        data,\n      },\n    })\n  }, [])\n\n  return (\n    <UserContext.Provider\n      value={useMemo(\n        () => [\n          state,\n          { updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns },\n        ],\n        [state, updateTransactions, updatePositions, updateMiningPositions, updateUserSnapshots, updateUserPairReturns]\n      )}\n    >\n      {children}\n    </UserContext.Provider>\n  )\n}\n\nexport function useUserTransactions(account) {\n  const [state, { updateTransactions }] = useUserContext()\n  const transactions = state?.[account]?.[TRANSACTIONS_KEY]\n  useEffect(() => {\n    async function fetchData(account) {\n      try {\n        let result = await client.query({\n          query: USER_TRANSACTIONS,\n          variables: {\n            user: account,\n          },\n          fetchPolicy: 'no-cache',\n        })\n        if (result?.data) {\n          updateTransactions(account, result?.data)\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    if (!transactions && account) {\n      fetchData(account)\n    }\n  }, [account, transactions, updateTransactions])\n\n  return transactions || {}\n}\n\n/**\n * Store all the snapshots of liquidity activity for this account.\n * Each snapshot is a moment when an LP position was created or updated.\n * @param {*} account\n */\nexport function useUserSnapshots(account) {\n  const [state, { updateUserSnapshots }] = useUserContext()\n  const snapshots = state?.[account]?.[USER_SNAPSHOTS]\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        let skip = 0\n        let allResults = []\n        let found = false\n        while (!found) {\n          let result = await client.query({\n            query: USER_HISTORY,\n            variables: {\n              skip: skip,\n              user: account,\n            },\n            fetchPolicy: 'cache-first',\n          })\n          allResults = allResults.concat(result.data.liquidityPositionSnapshots)\n          if (result.data.liquidityPositionSnapshots.length < 1000) {\n            found = true\n          } else {\n            skip += 1000\n          }\n        }\n        if (allResults) {\n          updateUserSnapshots(account, allResults)\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    if (!snapshots && account) {\n      fetchData()\n    }\n  }, [account, snapshots, updateUserSnapshots])\n\n  return snapshots\n}\n\n/**\n * For a given position (data about holding) and user, get the chart\n * data for the fees and liquidity over time\n * @param {*} position\n * @param {*} account\n */\nexport function useUserPositionChart(position, account) {\n  const pairAddress = position?.pair?.id\n  const [state, { updateUserPairReturns }] = useUserContext()\n\n  // get oldest date of data to fetch\n  const startDateTimestamp = useStartTimestamp()\n\n  // get users adds and removes on this pair\n  const snapshots = useUserSnapshots(account)\n  const pairSnapshots =\n    snapshots &&\n    position &&\n    snapshots.filter((currentSnapshot) => {\n      return currentSnapshot.pair.id === position.pair.id\n    })\n\n  // get data needed for calculations\n  const currentPairData = usePairData(pairAddress)\n  const [currentETHPrice] = useEthPrice()\n\n  // formatetd array to return for chart data\n  const formattedHistory = state?.[account]?.[USER_PAIR_RETURNS_KEY]?.[pairAddress]\n\n  useEffect(() => {\n    async function fetchData() {\n      let fetchedData = await getHistoricalPairReturns(\n        startDateTimestamp,\n        currentPairData,\n        pairSnapshots,\n        currentETHPrice\n      )\n      updateUserPairReturns(account, pairAddress, fetchedData)\n    }\n    if (\n      account &&\n      startDateTimestamp &&\n      pairSnapshots &&\n      !formattedHistory &&\n      currentPairData &&\n      Object.keys(currentPairData).length > 0 &&\n      pairAddress &&\n      currentETHPrice\n    ) {\n      fetchData()\n    }\n  }, [\n    account,\n    startDateTimestamp,\n    pairSnapshots,\n    formattedHistory,\n    pairAddress,\n    currentPairData,\n    currentETHPrice,\n    updateUserPairReturns,\n    position.pair.id,\n  ])\n\n  return formattedHistory\n}\n\n/**\n * For each day starting with min(first position timestamp, beginning of time window),\n * get total liquidity supplied by user in USD. Format in array with date timestamps\n * and usd liquidity value.\n */\nexport function useUserLiquidityChart(account) {\n  const history = useUserSnapshots(account)\n  // formatetd array to return for chart data\n  const [formattedHistory, setFormattedHistory] = useState()\n\n  const [startDateTimestamp, setStartDateTimestamp] = useState()\n  const [activeWindow] = useTimeframe()\n\n  // monitor the old date fetched\n  useEffect(() => {\n    const utcEndTime = dayjs.utc()\n    // based on window, get starttime\n    let utcStartTime\n    switch (activeWindow) {\n      case timeframeOptions.WEEK:\n        utcStartTime = utcEndTime.subtract(1, 'week').startOf('day')\n        break\n      case timeframeOptions.ALL_TIME:\n        utcStartTime = utcEndTime.subtract(1, 'year')\n        break\n      default:\n        utcStartTime = utcEndTime.subtract(1, 'year').startOf('year')\n        break\n    }\n    let startTime = utcStartTime.unix() - 1\n    if ((activeWindow && startTime < startDateTimestamp) || !startDateTimestamp) {\n      setStartDateTimestamp(startTime)\n    }\n  }, [activeWindow, startDateTimestamp])\n\n  useEffect(() => {\n    async function fetchData() {\n      let dayIndex = parseInt(startDateTimestamp / 86400) // get unique day bucket unix\n      const currentDayIndex = parseInt(dayjs.utc().unix() / 86400)\n\n      // sort snapshots in order\n      let sortedPositions = history.sort((a, b) => {\n        return parseInt(a.timestamp) > parseInt(b.timestamp) ? 1 : -1\n      })\n      // if UI start time is > first position time - bump start index to this time\n      if (parseInt(sortedPositions[0].timestamp) > dayIndex) {\n        dayIndex = parseInt(parseInt(sortedPositions[0].timestamp) / 86400)\n      }\n\n      const dayTimestamps = []\n      // get date timestamps for all days in view\n      while (dayIndex < currentDayIndex) {\n        dayTimestamps.push(parseInt(dayIndex) * 86400)\n        dayIndex = dayIndex + 1\n      }\n\n      const pairs = history.reduce((pairList, position) => {\n        return [...pairList, position.pair.id]\n      }, [])\n\n      // get all day datas where date is in this list, and pair is in pair list\n      let {\n        data: { pairDayDatas },\n      } = await client.query({\n        query: PAIR_DAY_DATA_BULK(pairs, startDateTimestamp),\n      })\n\n      const formattedHistory = []\n\n      // map of current pair => ownership %\n      const ownershipPerPair = {}\n      for (const index in dayTimestamps) {\n        const dayTimestamp = dayTimestamps[index]\n        const timestampCeiling = dayTimestamp + 86400\n\n        // cycle through relevant positions and update ownership for any that we need to\n        const relevantPositions = history.filter((snapshot) => {\n          return snapshot.timestamp < timestampCeiling && snapshot.timestamp > dayTimestamp\n        })\n        for (const index in relevantPositions) {\n          const position = relevantPositions[index]\n          // case where pair not added yet\n          if (!ownershipPerPair[position.pair.id]) {\n            ownershipPerPair[position.pair.id] = {\n              lpTokenBalance: position.liquidityTokenBalance,\n              timestamp: position.timestamp,\n            }\n          }\n          // case where more recent timestamp is found for pair\n          if (ownershipPerPair[position.pair.id] && ownershipPerPair[position.pair.id].timestamp < position.timestamp) {\n            ownershipPerPair[position.pair.id] = {\n              lpTokenBalance: position.liquidityTokenBalance,\n              timestamp: position.timestamp,\n            }\n          }\n        }\n\n        const relavantDayDatas = Object.keys(ownershipPerPair).map((pairAddress) => {\n          // find last day data after timestamp update\n          const dayDatasForThisPair = pairDayDatas.filter((dayData) => {\n            return dayData.pairAddress === pairAddress\n          })\n          // find the most recent reference to pair liquidity data\n          let mostRecent = dayDatasForThisPair[0]\n          for (const index in dayDatasForThisPair) {\n            const dayData = dayDatasForThisPair[index]\n            if (dayData.date < dayTimestamp && dayData.date > mostRecent.date) {\n              mostRecent = dayData\n            }\n          }\n          return mostRecent\n        })\n\n        // now cycle through pair day datas, for each one find usd value = ownership[address] * reserveUSD\n        const dailyUSD = relavantDayDatas.reduce((totalUSD, dayData) => {\n          if (dayData) {\n            return (totalUSD =\n              totalUSD +\n              (ownershipPerPair[dayData.pairAddress]\n                ? (parseFloat(ownershipPerPair[dayData.pairAddress].lpTokenBalance) / parseFloat(dayData.totalSupply)) *\n                  parseFloat(dayData.reserveUSD)\n                : 0))\n          } else {\n            return totalUSD\n          }\n        }, 0)\n\n        formattedHistory.push({\n          date: dayTimestamp,\n          valueUSD: dailyUSD,\n        })\n      }\n\n      setFormattedHistory(formattedHistory)\n    }\n    if (history && startDateTimestamp && history.length > 0) {\n      fetchData()\n    }\n  }, [history, startDateTimestamp])\n\n  return formattedHistory\n}\n\nexport function useUserPositions(account) {\n  const [state, { updatePositions }] = useUserContext()\n  const positions = state?.[account]?.[POSITIONS_KEY]\n\n  const snapshots = useUserSnapshots(account)\n  const [ethPrice] = useEthPrice()\n\n  useEffect(() => {\n    async function fetchData(account) {\n      try {\n        let result = await client.query({\n          query: USER_POSITIONS,\n          variables: {\n            user: account,\n          },\n          fetchPolicy: 'no-cache',\n        })\n        if (result?.data?.liquidityPositions) {\n          let formattedPositions = await Promise.all(\n            result?.data?.liquidityPositions.map(async (positionData) => {\n              const returnData = await getLPReturnsOnPair(account, positionData.pair, ethPrice, snapshots)\n              return {\n                ...positionData,\n                ...returnData,\n              }\n            })\n          )\n          updatePositions(account, formattedPositions)\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    if (!positions && account && ethPrice && snapshots) {\n      fetchData(account)\n    }\n  }, [account, positions, updatePositions, ethPrice, snapshots])\n\n  return positions\n}\n\nexport function useMiningPositions(account) {\n  const [state, { updateMiningPositions }] = useUserContext()\n  const allPairData = useAllPairData()\n  const miningPositions = state?.[account]?.[MINING_POSITIONS_KEY]\n\n  const snapshots = useUserSnapshots(account)\n\n  useEffect(() => {\n    async function fetchData(account) {\n      try {\n        let miningPositionData = []\n        let result = await stakingClient.query({\n          query: MINING_POSITIONS(account),\n          fetchPolicy: 'no-cache',\n        })\n        if (!result?.data?.user?.miningPosition) {\n          return\n        }\n        miningPositionData = result.data.user.miningPosition\n        for (const miningPosition of miningPositionData) {\n          const pairAddress = miningPosition.miningPool.pair.id\n          miningPosition.pairData = allPairData[pairAddress]\n        }\n        updateMiningPositions(account, miningPositionData)\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    if (!miningPositions && account && snapshots) {\n      fetchData(account)\n    }\n  }, [account, miningPositions, updateMiningPositions, snapshots, allPairData])\n  return miningPositions\n}\n"]},"metadata":{},"sourceType":"module"}