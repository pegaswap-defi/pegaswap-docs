{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject22(){var data=_taggedTemplateLiteral([\"\\n  query($allPairs: [Bytes]!) {\\n    mints(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      liquidity\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    burns(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      sender\\n      liquidity\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps(first: 30, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      id\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      amount0In\\n      amount0Out\\n      amount1In\\n      amount1Out\\n      amountUSD\\n      to\\n    }\\n  }\\n\"]);_templateObject22=function _templateObject22(){return data;};return data;}function _templateObject21(){var data=_taggedTemplateLiteral([\"\\n  \",\"\\n  query tokens {\\n    tokens(first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\\n      ...TokenFields\\n    }\\n  }\\n\"]);_templateObject21=function _templateObject21(){return data;};return data;}function _templateObject20(){var data=_taggedTemplateLiteral([\"\\n  query tokenDayDatas($tokenAddr: String!, $skip: Int!) {\\n    tokenDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { token: $tokenAddr }) {\\n      id\\n      date\\n      priceUSD\\n      totalLiquidityToken\\n      totalLiquidityUSD\\n      totalLiquidityETH\\n      dailyVolumeETH\\n      dailyVolumeToken\\n      dailyVolumeUSD\\n      mostLiquidPairs {\\n        id\\n        token0 {\\n          id\\n          derivedETH\\n        }\\n        token1 {\\n          id\\n          derivedETH\\n        }\\n      }\\n    }\\n  }\\n\"]);_templateObject20=function _templateObject20(){return data;};return data;}function _templateObject19(){var data=_taggedTemplateLiteral([\"\\n  \",\"\\n  query pairs($allPairs: [Bytes]!) {\\n    pairs(where: { id_in: $allPairs }, orderBy: trackedReserveETH, orderDirection: desc) {\\n      ...PairFields\\n    }\\n  }\\n\"]);_templateObject19=function _templateObject19(){return data;};return data;}function _templateObject18(){var data=_taggedTemplateLiteral([\"\\n  query pairs {\\n    pairs(first: 200, orderBy: trackedReserveETH, orderDirection: desc) {\\n      id\\n    }\\n  }\\n\"]);_templateObject18=function _templateObject18(){return data;};return data;}function _templateObject17(){var data=_taggedTemplateLiteral([\"\\n  query pairs($skip: Int!) {\\n    pairs(first: 500, skip: $skip, orderBy: trackedReserveETH, orderDirection: desc) {\\n      id\\n      token0 {\\n        id\\n        symbol\\n        name\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n      }\\n    }\\n  }\\n\"]);_templateObject17=function _templateObject17(){return data;};return data;}function _templateObject16(){var data=_taggedTemplateLiteral([\"\\n  query pairs($tokens: [Bytes]!, $id: String) {\\n    as0: pairs(where: { token0_in: $tokens }) {\\n      id\\n      token0 {\\n        id\\n        symbol\\n        name\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n      }\\n    }\\n    as1: pairs(where: { token1_in: $tokens }) {\\n      id\\n      token0 {\\n        id\\n        symbol\\n        name\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n      }\\n    }\\n    asAddress: pairs(where: { id: $id }) {\\n      id\\n      token0 {\\n        id\\n        symbol\\n        name\\n      }\\n      token1 {\\n        id\\n        symbol\\n        name\\n      }\\n    }\\n  }\\n\"]);_templateObject16=function _templateObject16(){return data;};return data;}function _templateObject15(){var data=_taggedTemplateLiteral([\"\\n  query tokens($value: String, $id: String) {\\n    asSymbol: tokens(where: { symbol_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\\n      id\\n      symbol\\n      name\\n      totalLiquidity\\n    }\\n    asName: tokens(where: { name_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\\n      id\\n      symbol\\n      name\\n      totalLiquidity\\n    }\\n    asAddress: tokens(where: { id: $id }, orderBy: totalLiquidity, orderDirection: desc) {\\n      id\\n      symbol\\n      name\\n      totalLiquidity\\n    }\\n  }\\n\"]);_templateObject15=function _templateObject15(){return data;};return data;}function _templateObject14(){var data=_taggedTemplateLiteral([\"\\n  query tokens($skip: Int!) {\\n    tokens(first: 500, skip: $skip) {\\n      id\\n      name\\n      symbol\\n      totalLiquidity\\n    }\\n  }\\n\"]);_templateObject14=function _templateObject14(){return data;};return data;}function _templateObject13(){var data=_taggedTemplateLiteral([\"\\n  query transactions {\\n    transactions(first: 100, orderBy: timestamp, orderDirection: desc) {\\n      mints(orderBy: timestamp, orderDirection: desc) {\\n        transaction {\\n          id\\n          timestamp\\n        }\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        to\\n        liquidity\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n      burns(orderBy: timestamp, orderDirection: desc) {\\n        transaction {\\n          id\\n          timestamp\\n        }\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        sender\\n        liquidity\\n        amount0\\n        amount1\\n        amountUSD\\n      }\\n      swaps(orderBy: timestamp, orderDirection: desc) {\\n        transaction {\\n          id\\n          timestamp\\n        }\\n        pair {\\n          token0 {\\n            id\\n            symbol\\n          }\\n          token1 {\\n            id\\n            symbol\\n          }\\n        }\\n        amount0In\\n        amount0Out\\n        amount1In\\n        amount1Out\\n        amountUSD\\n        to\\n      }\\n    }\\n  }\\n\"]);_templateObject13=function _templateObject13(){return data;};return data;}function _templateObject12(){var data=_taggedTemplateLiteral([\"\\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\\n    uniswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\\n      id\\n      date\\n      totalVolumeUSD\\n      dailyVolumeUSD\\n      dailyVolumeETH\\n      totalLiquidityUSD\\n      totalLiquidityETH\\n    }\\n  }\\n\"]);_templateObject12=function _templateObject12(){return data;};return data;}function _templateObject11(){var data=_taggedTemplateLiteral([\"\\n  query pairDayDatas($pairAddress: Bytes!, $date: Int!) {\\n    pairDayDatas(first: 1, orderBy: date, orderDirection: desc, where: { pairAddress: $pairAddress, date_lt: $date }) {\\n      id\\n      date\\n      dailyVolumeToken0\\n      dailyVolumeToken1\\n      dailyVolumeUSD\\n      totalSupply\\n      reserveUSD\\n    }\\n  }\\n\"]);_templateObject11=function _templateObject11(){return data;};return data;}function _templateObject10(){var data=_taggedTemplateLiteral([\"\\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!) {\\n    pairDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { pairAddress: $pairAddress }) {\\n      id\\n      date\\n      dailyVolumeToken0\\n      dailyVolumeToken1\\n      dailyVolumeUSD\\n      reserveUSD\\n    }\\n  }\\n\"]);_templateObject10=function _templateObject10(){return data;};return data;}function _templateObject9(){var data=_taggedTemplateLiteral([\"\\n  query transactions($user: Bytes!) {\\n    mints(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\\n      id\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      pair {\\n        id\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      liquidity\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    burns(orderBy: timestamp, orderDirection: desc, where: { sender: $user }) {\\n      id\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      pair {\\n        id\\n        token0 {\\n          symbol\\n        }\\n        token1 {\\n          symbol\\n        }\\n      }\\n      sender\\n      to\\n      liquidity\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\\n      id\\n      transaction {\\n        id\\n        timestamp\\n      }\\n      pair {\\n        token0 {\\n          symbol\\n        }\\n        token1 {\\n          symbol\\n        }\\n      }\\n      amount0In\\n      amount0Out\\n      amount1In\\n      amount1Out\\n      amountUSD\\n      to\\n    }\\n  }\\n\"]);_templateObject9=function _templateObject9(){return data;};return data;}function _templateObject8(){var data=_taggedTemplateLiteral([\"\\n  query liquidityPositions($user: Bytes!) {\\n    liquidityPositions(where: { user: $user }) {\\n      pair {\\n        id\\n        reserve0\\n        reserve1\\n        reserveUSD\\n        token0 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        token1 {\\n          id\\n          symbol\\n          derivedETH\\n        }\\n        totalSupply\\n      }\\n      liquidityTokenBalance\\n    }\\n  }\\n\"]);_templateObject8=function _templateObject8(){return data;};return data;}function _templateObject7(){var data=_taggedTemplateLiteral([\"\\n  query snapshots($user: Bytes!, $skip: Int!) {\\n    liquidityPositionSnapshots(first: 1000, skip: $skip, where: { user: $user }) {\\n      timestamp\\n      reserveUSD\\n      liquidityTokenBalance\\n      liquidityTokenTotalSupply\\n      reserve0\\n      reserve1\\n      token0PriceUSD\\n      token1PriceUSD\\n      pair {\\n        id\\n        reserve0\\n        reserve1\\n        reserveUSD\\n        token0 {\\n          id\\n        }\\n        token1 {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"]);_templateObject7=function _templateObject7(){return data;};return data;}function _templateObject6(){var data=_taggedTemplateLiteral([\"\\n  query snapshots($user: Bytes!) {\\n    liquidityPositionSnapshots(first: 1, where: { user: $user }, orderBy: timestamp, orderDirection: asc) {\\n      timestamp\\n    }\\n  }\\n\"]);_templateObject6=function _templateObject6(){return data;};return data;}function _templateObject5(){var data=_taggedTemplateLiteral([\"\\n  query events($user: Bytes!, $pair: Bytes!) {\\n    mints(where: { to: $user, pair: $pair }) {\\n      amountUSD\\n      amount0\\n      amount1\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n        }\\n        token1 {\\n          id\\n        }\\n      }\\n    }\\n    burns(where: { sender: $user, pair: $pair }) {\\n      amountUSD\\n      amount0\\n      amount1\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n        }\\n        token1 {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"]);_templateObject5=function _templateObject5(){return data;};return data;}function _templateObject4(){var data=_taggedTemplateLiteral([\"\\n  query lps($pair: Bytes!) {\\n    liquidityPositions(where: { pair: $pair }, orderBy: liquidityTokenBalance, orderDirection: desc, first: 10) {\\n      user {\\n        id\\n      }\\n      pair {\\n        id\\n      }\\n      liquidityTokenBalance\\n    }\\n  }\\n\"]);_templateObject4=function _templateObject4(){return data;};return data;}function _templateObject3(){var data=_taggedTemplateLiteral([\"\\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\\n    blocks(\\n      first: 1\\n      orderBy: timestamp\\n      orderDirection: asc\\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\\n    ) {\\n      id\\n      number\\n      timestamp\\n    }\\n  }\\n\"]);_templateObject3=function _templateObject3(){return data;};return data;}function _templateObject2(){var data=_taggedTemplateLiteral([\"\\n  query uniswap($date: Int!, $date2: Int!) {\\n    current: uniswap(id: \\\"1\\\") {\\n      totalVolumeUSD\\n      totalLiquidityUSD\\n      txCount\\n    }\\n    oneDay: uniswapHistoricalDatas(where: { timestamp_lt: $date }, first: 1, orderBy: timestamp, orderDirection: desc) {\\n      totalVolumeUSD\\n      totalLiquidityUSD\\n      txCount\\n    }\\n    twoDay: uniswapHistoricalDatas(\\n      where: { timestamp_lt: $date2 }\\n      first: 1\\n      orderBy: timestamp\\n      orderDirection: desc\\n    ) {\\n      totalVolumeUSD\\n      totalLiquidityUSD\\n      txCount\\n    }\\n    exchanges(first: 200, orderBy: ethBalance, orderDirection: desc) {\\n      ethBalance\\n    }\\n  }\\n\"]);_templateObject2=function _templateObject2(){return data;};return data;}function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  query health {\\n    indexingStatusForCurrentVersion(subgraphName: \\\"uniswap/uniswap-v2\\\") {\\n      synced\\n      health\\n      chains {\\n        chainHeadBlock {\\n          number\\n        }\\n        latestBlock {\\n          number\\n        }\\n      }\\n    }\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import gql from'graphql-tag';import{FACTORY_ADDRESS,BUNDLE_ID}from'../constants';export var SUBGRAPH_HEALTH=gql(_templateObject());export var V1_DATA_QUERY=gql(_templateObject2());export var GET_BLOCK=gql(_templateObject3());export var GET_BLOCKS=function GET_BLOCKS(timestamps){var queryString='query blocks {';queryString+=timestamps.map(function(timestamp){return\"t\".concat(timestamp,\":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp,\", timestamp_lt: \").concat(timestamp+600,\" }) {\\n      number\\n    }\");});queryString+='}';return gql(queryString);};export var POSITIONS_BY_BLOCK=function POSITIONS_BY_BLOCK(account,blocks){var queryString='query blocks {';queryString+=blocks.map(function(block){return\"\\n      t\".concat(block.timestamp,\":liquidityPositions(where: {user: \\\"\").concat(account,\"\\\"}, block: { number: \").concat(block.number,\" }) { \\n        liquidityTokenBalance\\n        pair  {\\n          id\\n          totalSupply\\n          reserveUSD\\n        }\\n      }\\n    \");});queryString+='}';return gql(queryString);};export var PRICES_BY_BLOCK=function PRICES_BY_BLOCK(tokenAddress,blocks){var queryString='query blocks {';queryString+=blocks.map(function(block){return\"\\n      t\".concat(block.timestamp,\":token(id:\\\"\").concat(tokenAddress,\"\\\", block: { number: \").concat(block.number,\" }) { \\n        derivedETH\\n      }\\n    \");});queryString+=',';queryString+=blocks.map(function(block){return\"\\n      b\".concat(block.timestamp,\": bundle(id:\\\"1\\\", block: { number: \").concat(block.number,\" }) { \\n        ethPrice\\n      }\\n    \");});queryString+='}';return gql(queryString);};export var TOP_LPS_PER_PAIRS=gql(_templateObject4());export var HOURLY_PAIR_RATES=function HOURLY_PAIR_RATES(pairAddress,blocks){var queryString='query blocks {';queryString+=blocks.map(function(block){return\"\\n      t\".concat(block.timestamp,\": pair(id:\\\"\").concat(pairAddress,\"\\\", block: { number: \").concat(block.number,\" }) { \\n        token0Price\\n        token1Price\\n      }\\n    \");});queryString+='}';return gql(queryString);};export var SHARE_VALUE=function SHARE_VALUE(pairAddress,blocks){var queryString='query blocks {';queryString+=blocks.map(function(block){return\"\\n      t\".concat(block.timestamp,\":pair(id:\\\"\").concat(pairAddress,\"\\\", block: { number: \").concat(block.number,\" }) { \\n        reserve0\\n        reserve1\\n        reserveUSD\\n        totalSupply \\n        token0{\\n          derivedETH\\n        }\\n        token1{\\n          derivedETH\\n        }\\n      }\\n    \");});queryString+=',';queryString+=blocks.map(function(block){return\"\\n      b\".concat(block.timestamp,\": bundle(id:\\\"1\\\", block: { number: \").concat(block.number,\" }) { \\n        ethPrice\\n      }\\n    \");});queryString+='}';return gql(queryString);};export var ETH_PRICE=function ETH_PRICE(block){var queryString=block?\"\\n    query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID,\" } block: {number: \").concat(block,\"}) {\\n        id\\n        ethPrice\\n      }\\n    }\\n  \"):\" query bundles {\\n      bundles(where: { id: \".concat(BUNDLE_ID,\" }) {\\n        id\\n        ethPrice\\n      }\\n    }\\n  \");return gql(queryString);};export var USER=function USER(block,account){var queryString=\"\\n    query users {\\n      user(id: \\\"\".concat(account,\"\\\", block: {number: \").concat(block,\"}) {\\n        liquidityPositions\\n      }\\n    }\\n\");return gql(queryString);};export var USER_MINTS_BUNRS_PER_PAIR=gql(_templateObject5());export var FIRST_SNAPSHOT=gql(_templateObject6());export var USER_HISTORY=gql(_templateObject7());export var USER_POSITIONS=gql(_templateObject8());export var USER_TRANSACTIONS=gql(_templateObject9());export var PAIR_CHART=gql(_templateObject10());export var PAIR_DAY_DATA=gql(_templateObject11());export var PAIR_DAY_DATA_BULK=function PAIR_DAY_DATA_BULK(pairs,startTimestamp){var pairsString=\"[\";pairs.map(function(pair){return pairsString+=\"\\\"\".concat(pair,\"\\\"\");});pairsString+=']';var queryString=\"\\n    query days {\\n      pairDayDatas(first: 1000, orderBy: date, orderDirection: asc, where: { pairAddress_in: \".concat(pairsString,\", date_gt: \").concat(startTimestamp,\" }) {\\n        id\\n        pairAddress\\n        date\\n        dailyVolumeToken0\\n        dailyVolumeToken1\\n        dailyVolumeUSD\\n        totalSupply\\n        reserveUSD\\n      }\\n    } \\n\");return gql(queryString);};export var GLOBAL_CHART=gql(_templateObject12());export var GLOBAL_DATA=function GLOBAL_DATA(block){var queryString=\" query uniswapFactories {\\n      uniswapFactories(\\n       \".concat(block?\"block: { number: \".concat(block,\"}\"):\"\",\" \\n       where: { id: \\\"\").concat(FACTORY_ADDRESS,\"\\\" }) {\\n        id\\n        totalVolumeUSD\\n        totalVolumeETH\\n        untrackedVolumeUSD\\n        totalLiquidityUSD\\n        totalLiquidityETH\\n        txCount\\n        pairCount\\n      }\\n    }\");return gql(queryString);};export var GLOBAL_TXNS=gql(_templateObject13());export var ALL_TOKENS=gql(_templateObject14());export var TOKEN_SEARCH=gql(_templateObject15());export var PAIR_SEARCH=gql(_templateObject16());export var ALL_PAIRS=gql(_templateObject17());var PairFields=\"\\n  fragment PairFields on Pair {\\n    id\\n    txCount\\n    token0 {\\n      id\\n      symbol\\n      name\\n      totalLiquidity\\n      derivedETH\\n    }\\n    token1 {\\n      id\\n      symbol\\n      name\\n      totalLiquidity\\n      derivedETH\\n    }\\n    reserve0\\n    reserve1\\n    reserveUSD\\n    totalSupply\\n    trackedReserveETH\\n    reserveETH\\n    volumeUSD\\n    untrackedVolumeUSD\\n    token0Price\\n    token1Price\\n    createdAtTimestamp\\n  }\\n\";export var PAIRS_CURRENT=gql(_templateObject18());export var PAIR_DATA=function PAIR_DATA(pairAddress,block){var queryString=\"\\n    \".concat(PairFields,\"\\n    query pairs {\\n      pairs(\").concat(block?\"block: {number: \".concat(block,\"}\"):\"\",\" where: { id: \\\"\").concat(pairAddress,\"\\\"} ) {\\n        ...PairFields\\n      }\\n    }\");return gql(queryString);};export var MINING_POSITIONS=function MINING_POSITIONS(account){var queryString=\"\\n    query users {\\n      user(id: \\\"\".concat(account,\"\\\") {\\n        miningPosition {\\n          id\\n          user {\\n            id\\n          }\\n          miningPool {\\n              pair {\\n                id\\n                token0\\n                token1\\n              }\\n          }\\n          balance\\n        }\\n      }\\n    }\\n\");return gql(queryString);};export var PAIRS_BULK=gql(_templateObject19(),PairFields);export var PAIRS_HISTORICAL_BULK=function PAIRS_HISTORICAL_BULK(block,pairs){var pairsString=\"[\";pairs.map(function(pair){return pairsString+=\"\\\"\".concat(pair,\"\\\"\");});pairsString+=']';var queryString=\"\\n  query pairs {\\n    pairs(first: 200, where: {id_in: \".concat(pairsString,\"}, block: {number: \").concat(block,\"}, orderBy: trackedReserveETH, orderDirection: desc) {\\n      id\\n      reserveUSD\\n      trackedReserveETH\\n      volumeUSD\\n      untrackedVolumeUSD\\n    }\\n  }\\n  \");return gql(queryString);};export var TOKEN_CHART=gql(_templateObject20());var TokenFields=\"\\n  fragment TokenFields on Token {\\n    id\\n    name\\n    symbol\\n    derivedETH\\n    tradeVolume\\n    tradeVolumeUSD\\n    untrackedVolumeUSD\\n    totalLiquidity\\n    txCount\\n  }\\n\";export var TOKENS_CURRENT=gql(_templateObject21(),TokenFields);export var TOKENS_DYNAMIC=function TOKENS_DYNAMIC(block){var queryString=\"\\n    \".concat(TokenFields,\"\\n    query tokens {\\n      tokens(block: {number: \").concat(block,\"} first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\\n        ...TokenFields\\n      }\\n    }\\n  \");return gql(queryString);};export var TOKEN_DATA=function TOKEN_DATA(tokenAddress,block){var queryString=\"\\n    \".concat(TokenFields,\"\\n    query tokens {\\n      tokens(\").concat(block?\"block : {number: \".concat(block,\"}\"):\"\",\" where: {id:\\\"\").concat(tokenAddress,\"\\\"}) {\\n        ...TokenFields\\n      }\\n      pairs0: pairs(where: {token0: \\\"\").concat(tokenAddress,\"\\\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\\n        id\\n      }\\n      pairs1: pairs(where: {token1: \\\"\").concat(tokenAddress,\"\\\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\\n        id\\n      }\\n    }\\n  \");return gql(queryString);};export var FILTERED_TRANSACTIONS=gql(_templateObject22());","map":{"version":3,"sources":["/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/apollo/queries.js"],"names":["gql","FACTORY_ADDRESS","BUNDLE_ID","SUBGRAPH_HEALTH","V1_DATA_QUERY","GET_BLOCK","GET_BLOCKS","timestamps","queryString","map","timestamp","POSITIONS_BY_BLOCK","account","blocks","block","number","PRICES_BY_BLOCK","tokenAddress","TOP_LPS_PER_PAIRS","HOURLY_PAIR_RATES","pairAddress","SHARE_VALUE","ETH_PRICE","USER","USER_MINTS_BUNRS_PER_PAIR","FIRST_SNAPSHOT","USER_HISTORY","USER_POSITIONS","USER_TRANSACTIONS","PAIR_CHART","PAIR_DAY_DATA","PAIR_DAY_DATA_BULK","pairs","startTimestamp","pairsString","pair","GLOBAL_CHART","GLOBAL_DATA","GLOBAL_TXNS","ALL_TOKENS","TOKEN_SEARCH","PAIR_SEARCH","ALL_PAIRS","PairFields","PAIRS_CURRENT","PAIR_DATA","MINING_POSITIONS","PAIRS_BULK","PAIRS_HISTORICAL_BULK","TOKEN_CHART","TokenFields","TOKENS_CURRENT","TOKENS_DYNAMIC","TOKEN_DATA","FILTERED_TRANSACTIONS"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag'\nimport { FACTORY_ADDRESS, BUNDLE_ID } from '../constants'\n\nexport const SUBGRAPH_HEALTH = gql`\n  query health {\n    indexingStatusForCurrentVersion(subgraphName: \"uniswap/uniswap-v2\") {\n      synced\n      health\n      chains {\n        chainHeadBlock {\n          number\n        }\n        latestBlock {\n          number\n        }\n      }\n    }\n  }\n`\n\nexport const V1_DATA_QUERY = gql`\n  query uniswap($date: Int!, $date2: Int!) {\n    current: uniswap(id: \"1\") {\n      totalVolumeUSD\n      totalLiquidityUSD\n      txCount\n    }\n    oneDay: uniswapHistoricalDatas(where: { timestamp_lt: $date }, first: 1, orderBy: timestamp, orderDirection: desc) {\n      totalVolumeUSD\n      totalLiquidityUSD\n      txCount\n    }\n    twoDay: uniswapHistoricalDatas(\n      where: { timestamp_lt: $date2 }\n      first: 1\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      totalVolumeUSD\n      totalLiquidityUSD\n      txCount\n    }\n    exchanges(first: 200, orderBy: ethBalance, orderDirection: desc) {\n      ethBalance\n    }\n  }\n`\n\nexport const GET_BLOCK = gql`\n  query blocks($timestampFrom: Int!, $timestampTo: Int!) {\n    blocks(\n      first: 1\n      orderBy: timestamp\n      orderDirection: asc\n      where: { timestamp_gt: $timestampFrom, timestamp_lt: $timestampTo }\n    ) {\n      id\n      number\n      timestamp\n    }\n  }\n`\n\nexport const GET_BLOCKS = (timestamps) => {\n  let queryString = 'query blocks {'\n  queryString += timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n      number\n    }`\n  })\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const POSITIONS_BY_BLOCK = (account, blocks) => {\n  let queryString = 'query blocks {'\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}:liquidityPositions(where: {user: \"${account}\"}, block: { number: ${block.number} }) { \n        liquidityTokenBalance\n        pair  {\n          id\n          totalSupply\n          reserveUSD\n        }\n      }\n    `\n  )\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const PRICES_BY_BLOCK = (tokenAddress, blocks) => {\n  let queryString = 'query blocks {'\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}:token(id:\"${tokenAddress}\", block: { number: ${block.number} }) { \n        derivedETH\n      }\n    `\n  )\n  queryString += ','\n  queryString += blocks.map(\n    (block) => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `\n  )\n\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const TOP_LPS_PER_PAIRS = gql`\n  query lps($pair: Bytes!) {\n    liquidityPositions(where: { pair: $pair }, orderBy: liquidityTokenBalance, orderDirection: desc, first: 10) {\n      user {\n        id\n      }\n      pair {\n        id\n      }\n      liquidityTokenBalance\n    }\n  }\n`\n\nexport const HOURLY_PAIR_RATES = (pairAddress, blocks) => {\n  let queryString = 'query blocks {'\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}: pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        token0Price\n        token1Price\n      }\n    `\n  )\n\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const SHARE_VALUE = (pairAddress, blocks) => {\n  let queryString = 'query blocks {'\n  queryString += blocks.map(\n    (block) => `\n      t${block.timestamp}:pair(id:\"${pairAddress}\", block: { number: ${block.number} }) { \n        reserve0\n        reserve1\n        reserveUSD\n        totalSupply \n        token0{\n          derivedETH\n        }\n        token1{\n          derivedETH\n        }\n      }\n    `\n  )\n  queryString += ','\n  queryString += blocks.map(\n    (block) => `\n      b${block.timestamp}: bundle(id:\"1\", block: { number: ${block.number} }) { \n        ethPrice\n      }\n    `\n  )\n\n  queryString += '}'\n  return gql(queryString)\n}\n\nexport const ETH_PRICE = (block) => {\n  const queryString = block\n    ? `\n    query bundles {\n      bundles(where: { id: ${BUNDLE_ID} } block: {number: ${block}}) {\n        id\n        ethPrice\n      }\n    }\n  `\n    : ` query bundles {\n      bundles(where: { id: ${BUNDLE_ID} }) {\n        id\n        ethPrice\n      }\n    }\n  `\n  return gql(queryString)\n}\n\nexport const USER = (block, account) => {\n  const queryString = `\n    query users {\n      user(id: \"${account}\", block: {number: ${block}}) {\n        liquidityPositions\n      }\n    }\n`\n  return gql(queryString)\n}\n\nexport const USER_MINTS_BUNRS_PER_PAIR = gql`\n  query events($user: Bytes!, $pair: Bytes!) {\n    mints(where: { to: $user, pair: $pair }) {\n      amountUSD\n      amount0\n      amount1\n      timestamp\n      pair {\n        token0 {\n          id\n        }\n        token1 {\n          id\n        }\n      }\n    }\n    burns(where: { sender: $user, pair: $pair }) {\n      amountUSD\n      amount0\n      amount1\n      timestamp\n      pair {\n        token0 {\n          id\n        }\n        token1 {\n          id\n        }\n      }\n    }\n  }\n`\n\nexport const FIRST_SNAPSHOT = gql`\n  query snapshots($user: Bytes!) {\n    liquidityPositionSnapshots(first: 1, where: { user: $user }, orderBy: timestamp, orderDirection: asc) {\n      timestamp\n    }\n  }\n`\n\nexport const USER_HISTORY = gql`\n  query snapshots($user: Bytes!, $skip: Int!) {\n    liquidityPositionSnapshots(first: 1000, skip: $skip, where: { user: $user }) {\n      timestamp\n      reserveUSD\n      liquidityTokenBalance\n      liquidityTokenTotalSupply\n      reserve0\n      reserve1\n      token0PriceUSD\n      token1PriceUSD\n      pair {\n        id\n        reserve0\n        reserve1\n        reserveUSD\n        token0 {\n          id\n        }\n        token1 {\n          id\n        }\n      }\n    }\n  }\n`\n\nexport const USER_POSITIONS = gql`\n  query liquidityPositions($user: Bytes!) {\n    liquidityPositions(where: { user: $user }) {\n      pair {\n        id\n        reserve0\n        reserve1\n        reserveUSD\n        token0 {\n          id\n          symbol\n          derivedETH\n        }\n        token1 {\n          id\n          symbol\n          derivedETH\n        }\n        totalSupply\n      }\n      liquidityTokenBalance\n    }\n  }\n`\n\nexport const USER_TRANSACTIONS = gql`\n  query transactions($user: Bytes!) {\n    mints(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        id\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(orderBy: timestamp, orderDirection: desc, where: { sender: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        id\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      sender\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(orderBy: timestamp, orderDirection: desc, where: { to: $user }) {\n      id\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          symbol\n        }\n        token1 {\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`\n\nexport const PAIR_CHART = gql`\n  query pairDayDatas($pairAddress: Bytes!, $skip: Int!) {\n    pairDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { pairAddress: $pairAddress }) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      reserveUSD\n    }\n  }\n`\n\nexport const PAIR_DAY_DATA = gql`\n  query pairDayDatas($pairAddress: Bytes!, $date: Int!) {\n    pairDayDatas(first: 1, orderBy: date, orderDirection: desc, where: { pairAddress: $pairAddress, date_lt: $date }) {\n      id\n      date\n      dailyVolumeToken0\n      dailyVolumeToken1\n      dailyVolumeUSD\n      totalSupply\n      reserveUSD\n    }\n  }\n`\n\nexport const PAIR_DAY_DATA_BULK = (pairs, startTimestamp) => {\n  let pairsString = `[`\n  pairs.map((pair) => {\n    return (pairsString += `\"${pair}\"`)\n  })\n  pairsString += ']'\n  const queryString = `\n    query days {\n      pairDayDatas(first: 1000, orderBy: date, orderDirection: asc, where: { pairAddress_in: ${pairsString}, date_gt: ${startTimestamp} }) {\n        id\n        pairAddress\n        date\n        dailyVolumeToken0\n        dailyVolumeToken1\n        dailyVolumeUSD\n        totalSupply\n        reserveUSD\n      }\n    } \n`\n  return gql(queryString)\n}\n\nexport const GLOBAL_CHART = gql`\n  query uniswapDayDatas($startTime: Int!, $skip: Int!) {\n    uniswapDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      id\n      date\n      totalVolumeUSD\n      dailyVolumeUSD\n      dailyVolumeETH\n      totalLiquidityUSD\n      totalLiquidityETH\n    }\n  }\n`\n\nexport const GLOBAL_DATA = (block) => {\n  const queryString = ` query uniswapFactories {\n      uniswapFactories(\n       ${block ? `block: { number: ${block}}` : ``} \n       where: { id: \"${FACTORY_ADDRESS}\" }) {\n        id\n        totalVolumeUSD\n        totalVolumeETH\n        untrackedVolumeUSD\n        totalLiquidityUSD\n        totalLiquidityETH\n        txCount\n        pairCount\n      }\n    }`\n  return gql(queryString)\n}\n\nexport const GLOBAL_TXNS = gql`\n  query transactions {\n    transactions(first: 100, orderBy: timestamp, orderDirection: desc) {\n      mints(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        to\n        liquidity\n        amount0\n        amount1\n        amountUSD\n      }\n      burns(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        sender\n        liquidity\n        amount0\n        amount1\n        amountUSD\n      }\n      swaps(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          id\n          timestamp\n        }\n        pair {\n          token0 {\n            id\n            symbol\n          }\n          token1 {\n            id\n            symbol\n          }\n        }\n        amount0In\n        amount0Out\n        amount1In\n        amount1Out\n        amountUSD\n        to\n      }\n    }\n  }\n`\n\nexport const ALL_TOKENS = gql`\n  query tokens($skip: Int!) {\n    tokens(first: 500, skip: $skip) {\n      id\n      name\n      symbol\n      totalLiquidity\n    }\n  }\n`\n\nexport const TOKEN_SEARCH = gql`\n  query tokens($value: String, $id: String) {\n    asSymbol: tokens(where: { symbol_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n    asName: tokens(where: { name_contains: $value }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n    asAddress: tokens(where: { id: $id }, orderBy: totalLiquidity, orderDirection: desc) {\n      id\n      symbol\n      name\n      totalLiquidity\n    }\n  }\n`\n\nexport const PAIR_SEARCH = gql`\n  query pairs($tokens: [Bytes]!, $id: String) {\n    as0: pairs(where: { token0_in: $tokens }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n    as1: pairs(where: { token1_in: $tokens }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n    asAddress: pairs(where: { id: $id }) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n  }\n`\n\nexport const ALL_PAIRS = gql`\n  query pairs($skip: Int!) {\n    pairs(first: 500, skip: $skip, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n      token0 {\n        id\n        symbol\n        name\n      }\n      token1 {\n        id\n        symbol\n        name\n      }\n    }\n  }\n`\n\nconst PairFields = `\n  fragment PairFields on Pair {\n    id\n    txCount\n    token0 {\n      id\n      symbol\n      name\n      totalLiquidity\n      derivedETH\n    }\n    token1 {\n      id\n      symbol\n      name\n      totalLiquidity\n      derivedETH\n    }\n    reserve0\n    reserve1\n    reserveUSD\n    totalSupply\n    trackedReserveETH\n    reserveETH\n    volumeUSD\n    untrackedVolumeUSD\n    token0Price\n    token1Price\n    createdAtTimestamp\n  }\n`\n\nexport const PAIRS_CURRENT = gql`\n  query pairs {\n    pairs(first: 200, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n    }\n  }\n`\n\nexport const PAIR_DATA = (pairAddress, block) => {\n  const queryString = `\n    ${PairFields}\n    query pairs {\n      pairs(${block ? `block: {number: ${block}}` : ``} where: { id: \"${pairAddress}\"} ) {\n        ...PairFields\n      }\n    }`\n  return gql(queryString)\n}\n\nexport const MINING_POSITIONS = (account) => {\n  const queryString = `\n    query users {\n      user(id: \"${account}\") {\n        miningPosition {\n          id\n          user {\n            id\n          }\n          miningPool {\n              pair {\n                id\n                token0\n                token1\n              }\n          }\n          balance\n        }\n      }\n    }\n`\n  return gql(queryString)\n}\n\nexport const PAIRS_BULK = gql`\n  ${PairFields}\n  query pairs($allPairs: [Bytes]!) {\n    pairs(where: { id_in: $allPairs }, orderBy: trackedReserveETH, orderDirection: desc) {\n      ...PairFields\n    }\n  }\n`\n\nexport const PAIRS_HISTORICAL_BULK = (block, pairs) => {\n  let pairsString = `[`\n  pairs.map((pair) => {\n    return (pairsString += `\"${pair}\"`)\n  })\n  pairsString += ']'\n  let queryString = `\n  query pairs {\n    pairs(first: 200, where: {id_in: ${pairsString}}, block: {number: ${block}}, orderBy: trackedReserveETH, orderDirection: desc) {\n      id\n      reserveUSD\n      trackedReserveETH\n      volumeUSD\n      untrackedVolumeUSD\n    }\n  }\n  `\n  return gql(queryString)\n}\n\nexport const TOKEN_CHART = gql`\n  query tokenDayDatas($tokenAddr: String!, $skip: Int!) {\n    tokenDayDatas(first: 1000, skip: $skip, orderBy: date, orderDirection: asc, where: { token: $tokenAddr }) {\n      id\n      date\n      priceUSD\n      totalLiquidityToken\n      totalLiquidityUSD\n      totalLiquidityETH\n      dailyVolumeETH\n      dailyVolumeToken\n      dailyVolumeUSD\n      mostLiquidPairs {\n        id\n        token0 {\n          id\n          derivedETH\n        }\n        token1 {\n          id\n          derivedETH\n        }\n      }\n    }\n  }\n`\n\nconst TokenFields = `\n  fragment TokenFields on Token {\n    id\n    name\n    symbol\n    derivedETH\n    tradeVolume\n    tradeVolumeUSD\n    untrackedVolumeUSD\n    totalLiquidity\n    txCount\n  }\n`\n\nexport const TOKENS_CURRENT = gql`\n  ${TokenFields}\n  query tokens {\n    tokens(first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\n      ...TokenFields\n    }\n  }\n`\n\nexport const TOKENS_DYNAMIC = (block) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(block: {number: ${block}} first: 200, orderBy: tradeVolumeUSD, orderDirection: desc) {\n        ...TokenFields\n      }\n    }\n  `\n  return gql(queryString)\n}\n\nexport const TOKEN_DATA = (tokenAddress, block) => {\n  const queryString = `\n    ${TokenFields}\n    query tokens {\n      tokens(${block ? `block : {number: ${block}}` : ``} where: {id:\"${tokenAddress}\"}) {\n        ...TokenFields\n      }\n      pairs0: pairs(where: {token0: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n      pairs1: pairs(where: {token1: \"${tokenAddress}\"}, first: 50, orderBy: reserveUSD, orderDirection: desc){\n        id\n      }\n    }\n  `\n  return gql(queryString)\n}\n\nexport const FILTERED_TRANSACTIONS = gql`\n  query($allPairs: [Bytes]!) {\n    mints(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(first: 20, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      liquidity\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 30, where: { pair_in: $allPairs }, orderBy: timestamp, orderDirection: desc) {\n      transaction {\n        id\n        timestamp\n      }\n      id\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n      amountUSD\n      to\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}