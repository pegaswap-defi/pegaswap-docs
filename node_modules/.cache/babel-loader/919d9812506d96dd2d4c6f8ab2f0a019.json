{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/contexts/GlobalData.js\";\nimport React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react';\nimport { client } from '../apollo/client';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useTimeframe } from './Application';\nimport { getPercentChange, getBlockFromTimestamp, getBlocksFromTimestamps, get2DayPercentChange, getTimeframe } from '../utils';\nimport { GLOBAL_DATA, GLOBAL_TXNS, GLOBAL_CHART, ETH_PRICE, ALL_PAIRS, ALL_TOKENS, TOP_LPS_PER_PAIRS } from '../apollo/queries';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport { useAllPairData } from './PairData';\nconst UPDATE = 'UPDATE';\nconst UPDATE_TXNS = 'UPDATE_TXNS';\nconst UPDATE_CHART = 'UPDATE_CHART';\nconst UPDATE_ETH_PRICE = 'UPDATE_ETH_PRICE';\nconst ETH_PRICE_KEY = 'ETH_PRICE_KEY';\nconst UPDATE_ALL_PAIRS_IN_UNISWAP = 'UPDAUPDATE_ALL_PAIRS_IN_UNISWAPTE_TOP_PAIRS';\nconst UPDATE_ALL_TOKENS_IN_UNISWAP = 'UPDATE_ALL_TOKENS_IN_UNISWAP';\nconst UPDATE_TOP_LPS = 'UPDATE_TOP_LPS'; // format dayjs with the libraries that we need\n\ndayjs.extend(utc);\ndayjs.extend(weekOfYear);\nconst GlobalDataContext = createContext();\n\nfunction useGlobalDataContext() {\n  return useContext(GlobalDataContext);\n}\n\nfunction reducer(state, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case UPDATE:\n      {\n        const {\n          data\n        } = payload;\n        return { ...state,\n          globalData: data\n        };\n      }\n\n    case UPDATE_TXNS:\n      {\n        const {\n          transactions\n        } = payload;\n        return { ...state,\n          transactions\n        };\n      }\n\n    case UPDATE_CHART:\n      {\n        const {\n          daily,\n          weekly\n        } = payload;\n        return { ...state,\n          chartData: {\n            daily,\n            weekly\n          }\n        };\n      }\n\n    case UPDATE_ETH_PRICE:\n      {\n        const {\n          ethPrice,\n          oneDayPrice,\n          ethPriceChange\n        } = payload;\n        return {\n          [ETH_PRICE_KEY]: ethPrice,\n          oneDayPrice,\n          ethPriceChange\n        };\n      }\n\n    case UPDATE_ALL_PAIRS_IN_UNISWAP:\n      {\n        const {\n          allPairs\n        } = payload;\n        return { ...state,\n          allPairs\n        };\n      }\n\n    case UPDATE_ALL_TOKENS_IN_UNISWAP:\n      {\n        const {\n          allTokens\n        } = payload;\n        return { ...state,\n          allTokens\n        };\n      }\n\n    case UPDATE_TOP_LPS:\n      {\n        const {\n          topLps\n        } = payload;\n        return { ...state,\n          topLps\n        };\n      }\n\n    default:\n      {\n        throw Error(`Unexpected action type in DataContext reducer: '${type}'.`);\n      }\n  }\n}\n\nexport default function Provider({\n  children\n}) {\n  const [state, dispatch] = useReducer(reducer, {});\n  const update = useCallback(data => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        data\n      }\n    });\n  }, []);\n  const updateTransactions = useCallback(transactions => {\n    dispatch({\n      type: UPDATE_TXNS,\n      payload: {\n        transactions\n      }\n    });\n  }, []);\n  const updateChart = useCallback((daily, weekly) => {\n    dispatch({\n      type: UPDATE_CHART,\n      payload: {\n        daily,\n        weekly\n      }\n    });\n  }, []);\n  const updateEthPrice = useCallback((ethPrice, oneDayPrice, ethPriceChange) => {\n    dispatch({\n      type: UPDATE_ETH_PRICE,\n      payload: {\n        ethPrice,\n        oneDayPrice,\n        ethPriceChange\n      }\n    });\n  }, []);\n  const updateAllPairsInUniswap = useCallback(allPairs => {\n    dispatch({\n      type: UPDATE_ALL_PAIRS_IN_UNISWAP,\n      payload: {\n        allPairs\n      }\n    });\n  }, []);\n  const updateAllTokensInUniswap = useCallback(allTokens => {\n    dispatch({\n      type: UPDATE_ALL_TOKENS_IN_UNISWAP,\n      payload: {\n        allTokens\n      }\n    });\n  }, []);\n  const updateTopLps = useCallback(topLps => {\n    dispatch({\n      type: UPDATE_TOP_LPS,\n      payload: {\n        topLps\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(GlobalDataContext.Provider, {\n    value: useMemo(() => [state, {\n      update,\n      updateTransactions,\n      updateChart,\n      updateEthPrice,\n      updateTopLps,\n      updateAllPairsInUniswap,\n      updateAllTokensInUniswap\n    }], [state, update, updateTransactions, updateTopLps, updateChart, updateEthPrice, updateAllPairsInUniswap, updateAllTokensInUniswap]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, children);\n}\n/**\n * Gets all the global data for the overview page.\n * Needs current eth price and the old eth price to get\n * 24 hour USD changes.\n * @param {*} ethPrice\n * @param {*} oldEthPrice\n */\n\nasync function getGlobalData(ethPrice, oldEthPrice) {\n  // data for each day , historic data used for % changes\n  let data = {};\n  let oneDayData = {};\n  let twoDayData = {};\n\n  try {\n    // get timestamps for the days\n    const utcCurrentTime = dayjs();\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix();\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix();\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix();\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix(); // get the blocks needed for time travel queries\n\n    let [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([utcOneDayBack, utcTwoDaysBack, utcOneWeekBack, utcTwoWeeksBack]); // fetch the global data\n\n    let result = await client.query({\n      query: GLOBAL_DATA(),\n      fetchPolicy: 'cache-first'\n    });\n    data = result.data.uniswapFactories[0]; // fetch the historical data\n\n    let oneDayResult = await client.query({\n      query: GLOBAL_DATA(oneDayBlock === null || oneDayBlock === void 0 ? void 0 : oneDayBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    oneDayData = oneDayResult.data.uniswapFactories[0];\n    let twoDayResult = await client.query({\n      query: GLOBAL_DATA(twoDayBlock === null || twoDayBlock === void 0 ? void 0 : twoDayBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    twoDayData = twoDayResult.data.uniswapFactories[0];\n    let oneWeekResult = await client.query({\n      query: GLOBAL_DATA(oneWeekBlock === null || oneWeekBlock === void 0 ? void 0 : oneWeekBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    const oneWeekData = oneWeekResult.data.uniswapFactories[0];\n    let twoWeekResult = await client.query({\n      query: GLOBAL_DATA(twoWeekBlock === null || twoWeekBlock === void 0 ? void 0 : twoWeekBlock.number),\n      fetchPolicy: 'cache-first'\n    });\n    const twoWeekData = twoWeekResult.data.uniswapFactories[0];\n\n    if (data && oneDayData && twoDayData && twoWeekData) {\n      let [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(data.totalVolumeUSD, oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0, twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0);\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(data.totalVolumeUSD, oneWeekData.totalVolumeUSD, twoWeekData.totalVolumeUSD);\n      const [oneDayTxns, txnChange] = get2DayPercentChange(data.txCount, oneDayData.txCount ? oneDayData.txCount : 0, twoDayData.txCount ? twoDayData.txCount : 0); // format the total liquidity in USD\n\n      data.totalLiquidityUSD = data.totalLiquidityETH * ethPrice;\n      const liquidityChangeUSD = getPercentChange(data.totalLiquidityETH * ethPrice, oneDayData.totalLiquidityETH * oldEthPrice); // add relevant fields with the calculated amounts\n\n      data.oneDayVolumeUSD = oneDayVolumeUSD;\n      data.oneWeekVolume = oneWeekVolume;\n      data.weeklyVolumeChange = weeklyVolumeChange;\n      data.volumeChangeUSD = volumeChangeUSD;\n      data.liquidityChangeUSD = liquidityChangeUSD;\n      data.oneDayTxns = oneDayTxns;\n      data.txnChange = txnChange;\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  return data;\n}\n/**\n * Get historical data for volume and liquidity used in global charts\n * on main page\n * @param {*} oldestDateToFetch // start of window to fetch from\n */\n\n\nconst getChartData = async oldestDateToFetch => {\n  let data = [];\n  let weeklyData = [];\n  const utcEndTime = dayjs.utc();\n  let skip = 0;\n  let allFound = false;\n\n  try {\n    while (!allFound) {\n      let result = await client.query({\n        query: GLOBAL_CHART,\n        variables: {\n          startTime: oldestDateToFetch,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skip += 1000;\n      data = data.concat(result.data.uniswapDayDatas);\n\n      if (result.data.uniswapDayDatas.length < 1000) {\n        allFound = true;\n      }\n    }\n\n    if (data) {\n      let dayIndexSet = new Set();\n      let dayIndexArray = [];\n      const oneDay = 24 * 60 * 60; // for each day, parse the daily volume and format for chart array\n\n      data.forEach((dayData, i) => {\n        // add the day index to the set of days\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0));\n        dayIndexArray.push(data[i]);\n        dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD);\n      }); // fill in empty days ( there will be no day datas if no trades made that day )\n\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch;\n      let latestLiquidityUSD = data[0].totalLiquidityUSD;\n      let latestDayDats = data[0].mostLiquidTokens;\n      let index = 1;\n\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay;\n        let currentDayIndex = (nextDay / oneDay).toFixed(0);\n\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dailyVolumeUSD: 0,\n            totalLiquidityUSD: latestLiquidityUSD,\n            mostLiquidTokens: latestDayDats\n          });\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD;\n          latestDayDats = dayIndexArray[index].mostLiquidTokens;\n          index = index + 1;\n        }\n\n        timestamp = nextDay;\n      }\n    } // format weekly data for weekly sized chunks\n\n\n    data = data.sort((a, b) => parseInt(a.date) > parseInt(b.date) ? 1 : -1);\n    let startIndexWeekly = -1;\n    let currentWeek = -1;\n    data.forEach((entry, i) => {\n      var _weeklyData$startInde;\n\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week();\n\n      if (week !== currentWeek) {\n        currentWeek = week;\n        startIndexWeekly++;\n      }\n\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {};\n      weeklyData[startIndexWeekly].date = data[i].date;\n      weeklyData[startIndexWeekly].weeklyVolumeUSD = ((_weeklyData$startInde = weeklyData[startIndexWeekly].weeklyVolumeUSD) !== null && _weeklyData$startInde !== void 0 ? _weeklyData$startInde : 0) + data[i].dailyVolumeUSD;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [data, weeklyData];\n};\n/**\n * Get and format transactions for global page\n */\n\n\nconst getGlobalTransactions = async () => {\n  let transactions = {};\n\n  try {\n    var _result$data;\n\n    let result = await client.query({\n      query: GLOBAL_TXNS,\n      fetchPolicy: 'cache-first'\n    });\n    transactions.mints = [];\n    transactions.burns = [];\n    transactions.swaps = [];\n    (result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.transactions) && result.data.transactions.map(transaction => {\n      if (transaction.mints.length > 0) {\n        transaction.mints.map(mint => {\n          return transactions.mints.push(mint);\n        });\n      }\n\n      if (transaction.burns.length > 0) {\n        transaction.burns.map(burn => {\n          return transactions.burns.push(burn);\n        });\n      }\n\n      if (transaction.swaps.length > 0) {\n        transaction.swaps.map(swap => {\n          return transactions.swaps.push(swap);\n        });\n      }\n\n      return true;\n    });\n  } catch (e) {\n    console.log(e);\n  }\n\n  return transactions;\n};\n/**\n * Gets the current price  of ETH, 24 hour price, and % change between them\n */\n\n\nconst getEthPrice = async () => {\n  const utcCurrentTime = dayjs();\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  let ethPrice = 0;\n  let ethPriceOneDay = 0;\n  let priceChangeETH = 0;\n\n  try {\n    var _result$data2, _result$data2$bundles, _resultOneDay$data, _resultOneDay$data$bu;\n\n    let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack);\n    let result = await client.query({\n      query: ETH_PRICE(),\n      fetchPolicy: 'cache-first'\n    });\n    let resultOneDay = await client.query({\n      query: ETH_PRICE(oneDayBlock),\n      fetchPolicy: 'cache-first'\n    });\n    const currentPrice = result === null || result === void 0 ? void 0 : (_result$data2 = result.data) === null || _result$data2 === void 0 ? void 0 : (_result$data2$bundles = _result$data2.bundles[0]) === null || _result$data2$bundles === void 0 ? void 0 : _result$data2$bundles.ethPrice;\n    const oneDayBackPrice = resultOneDay === null || resultOneDay === void 0 ? void 0 : (_resultOneDay$data = resultOneDay.data) === null || _resultOneDay$data === void 0 ? void 0 : (_resultOneDay$data$bu = _resultOneDay$data.bundles[0]) === null || _resultOneDay$data$bu === void 0 ? void 0 : _resultOneDay$data$bu.ethPrice;\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice);\n    ethPrice = currentPrice;\n    ethPriceOneDay = oneDayBackPrice;\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [ethPrice, ethPriceOneDay, priceChangeETH];\n};\n\nconst PAIRS_TO_FETCH = 500;\nconst TOKENS_TO_FETCH = 500;\n/**\n * Loop through every pair on uniswap, used for search\n */\n\nasync function getAllPairsOnUniswap() {\n  try {\n    let allFound = false;\n    let pairs = [];\n    let skipCount = 0;\n\n    while (!allFound) {\n      var _result$data3, _result$data4;\n\n      let result = await client.query({\n        query: ALL_PAIRS,\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'cache-first'\n      });\n      skipCount = skipCount + PAIRS_TO_FETCH;\n      pairs = pairs.concat(result === null || result === void 0 ? void 0 : (_result$data3 = result.data) === null || _result$data3 === void 0 ? void 0 : _result$data3.pairs);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data4 = result.data) === null || _result$data4 === void 0 ? void 0 : _result$data4.pairs.length) < PAIRS_TO_FETCH || pairs.length > PAIRS_TO_FETCH) {\n        allFound = true;\n      }\n    }\n\n    return pairs;\n  } catch (e) {\n    console.log(e);\n  }\n}\n/**\n * Loop through every token on uniswap, used for search\n */\n\n\nasync function getAllTokensOnUniswap() {\n  try {\n    let allFound = false;\n    let skipCount = 0;\n    let tokens = [];\n\n    while (!allFound) {\n      var _result$data5, _result$data6, _result$data6$tokens;\n\n      let result = await client.query({\n        query: ALL_TOKENS,\n        variables: {\n          skip: skipCount\n        },\n        fetchPolicy: 'cache-first'\n      });\n      tokens = tokens.concat(result === null || result === void 0 ? void 0 : (_result$data5 = result.data) === null || _result$data5 === void 0 ? void 0 : _result$data5.tokens);\n\n      if ((result === null || result === void 0 ? void 0 : (_result$data6 = result.data) === null || _result$data6 === void 0 ? void 0 : (_result$data6$tokens = _result$data6.tokens) === null || _result$data6$tokens === void 0 ? void 0 : _result$data6$tokens.length) < TOKENS_TO_FETCH || tokens.length > TOKENS_TO_FETCH) {\n        allFound = true;\n      }\n\n      skipCount = skipCount += TOKENS_TO_FETCH;\n    }\n\n    return tokens;\n  } catch (e) {\n    console.log(e);\n  }\n}\n/**\n * Hook that fetches overview data, plus all tokens and pairs for search\n */\n\n\nexport function useGlobalData() {\n  const [state, {\n    update,\n    updateAllPairsInUniswap,\n    updateAllTokensInUniswap\n  }] = useGlobalDataContext();\n  const [ethPrice, oldEthPrice] = useEthPrice();\n  const data = state === null || state === void 0 ? void 0 : state.globalData;\n  useEffect(() => {\n    async function fetchData() {\n      let globalData = await getGlobalData(ethPrice, oldEthPrice);\n      globalData && update(globalData);\n      let allPairs = await getAllPairsOnUniswap();\n      updateAllPairsInUniswap(allPairs);\n      let allTokens = await getAllTokensOnUniswap();\n      updateAllTokensInUniswap(allTokens);\n    }\n\n    if (!data && ethPrice && oldEthPrice) {\n      fetchData();\n    }\n  }, [ethPrice, oldEthPrice, update, data, updateAllPairsInUniswap, updateAllTokensInUniswap]);\n  return data || {};\n}\nexport function useGlobalChartData() {\n  var _state$chartData, _state$chartData2;\n\n  const [state, {\n    updateChart\n  }] = useGlobalDataContext();\n  const [oldestDateFetch, setOldestDateFetched] = useState();\n  const [activeWindow] = useTimeframe();\n  const chartDataDaily = state === null || state === void 0 ? void 0 : (_state$chartData = state.chartData) === null || _state$chartData === void 0 ? void 0 : _state$chartData.daily;\n  const chartDataWeekly = state === null || state === void 0 ? void 0 : (_state$chartData2 = state.chartData) === null || _state$chartData2 === void 0 ? void 0 : _state$chartData2.weekly;\n  /**\n   * Keep track of oldest date fetched. Used to\n   * limit data fetched until its actually needed.\n   * (dont fetch year long stuff unless year option selected)\n   */\n\n  useEffect(() => {\n    // based on window, get starttime\n    let startTime = getTimeframe(activeWindow);\n\n    if (activeWindow && startTime < oldestDateFetch || !oldestDateFetch) {\n      setOldestDateFetched(startTime);\n    }\n  }, [activeWindow, oldestDateFetch]);\n  /**\n   * Fetch data if none fetched or older data is needed\n   */\n\n  useEffect(() => {\n    async function fetchData() {\n      // historical stuff for chart\n      let [newChartData, newWeeklyData] = await getChartData(oldestDateFetch);\n      updateChart(newChartData, newWeeklyData);\n    }\n\n    if (oldestDateFetch && !(chartDataDaily && chartDataWeekly)) {\n      fetchData();\n    }\n  }, [chartDataDaily, chartDataWeekly, oldestDateFetch, updateChart]);\n  return [chartDataDaily, chartDataWeekly];\n}\nexport function useGlobalTransactions() {\n  const [state, {\n    updateTransactions\n  }] = useGlobalDataContext();\n  const transactions = state === null || state === void 0 ? void 0 : state.transactions;\n  useEffect(() => {\n    async function fetchData() {\n      if (!transactions) {\n        let txns = await getGlobalTransactions();\n        updateTransactions(txns);\n      }\n    }\n\n    fetchData();\n  }, [updateTransactions, transactions]);\n  return transactions;\n}\nexport function useEthPrice() {\n  const [state, {\n    updateEthPrice\n  }] = useGlobalDataContext();\n  const ethPrice = state === null || state === void 0 ? void 0 : state[ETH_PRICE_KEY];\n  const ethPriceOld = state === null || state === void 0 ? void 0 : state['oneDayPrice'];\n  useEffect(() => {\n    async function checkForEthPrice() {\n      if (!ethPrice) {\n        let [newPrice, oneDayPrice, priceChange] = await getEthPrice();\n        updateEthPrice(newPrice, oneDayPrice, priceChange);\n      }\n    }\n\n    checkForEthPrice();\n  }, [ethPrice, updateEthPrice]);\n  return [ethPrice, ethPriceOld];\n}\nexport function useAllPairsInUniswap() {\n  const [state] = useGlobalDataContext();\n  let allPairs = state === null || state === void 0 ? void 0 : state.allPairs;\n  return allPairs || [];\n}\nexport function useAllTokensInUniswap() {\n  const [state] = useGlobalDataContext();\n  let allTokens = state === null || state === void 0 ? void 0 : state.allTokens;\n  return allTokens || [];\n}\n/**\n * Get the top liquidity positions based on USD size\n * @TODO Not a perfect lookup needs improvement\n */\n\nexport function useTopLps() {\n  const [state, {\n    updateTopLps\n  }] = useGlobalDataContext();\n  let topLps = state === null || state === void 0 ? void 0 : state.topLps;\n  const allPairs = useAllPairData();\n  useEffect(() => {\n    async function fetchData() {\n      var _Object$keys, _Object$keys$sort;\n\n      // get top 20 by reserves\n      let topPairs = (_Object$keys = Object.keys(allPairs)) === null || _Object$keys === void 0 ? void 0 : (_Object$keys$sort = _Object$keys.sort((a, b) => parseFloat(allPairs[a].reserveUSD > allPairs[b].reserveUSD ? -1 : 1))) === null || _Object$keys$sort === void 0 ? void 0 : _Object$keys$sort.slice(0, 99).map(pair => pair);\n      let topLpLists = await Promise.all(topPairs.map(async pair => {\n        // for each one, fetch top LPs\n        try {\n          const {\n            data: results\n          } = await client.query({\n            query: TOP_LPS_PER_PAIRS,\n            variables: {\n              pair: pair.toString()\n            },\n            fetchPolicy: 'cache-first'\n          });\n\n          if (results) {\n            return results.liquidityPositions;\n          }\n        } catch (e) {}\n      })); // get the top lps from the results formatted\n\n      const topLps = [];\n      topLpLists.filter(i => !!i) // check for ones not fetched correctly\n      .map(list => {\n        return list.map(entry => {\n          const pairData = allPairs[entry.pair.id];\n          return topLps.push({\n            user: entry.user,\n            pairName: pairData.token0.symbol + '-' + pairData.token1.symbol,\n            pairAddress: entry.pair.id,\n            token0: pairData.token0.id,\n            token1: pairData.token1.id,\n            usd: parseFloat(entry.liquidityTokenBalance) / parseFloat(pairData.totalSupply) * parseFloat(pairData.reserveUSD)\n          });\n        });\n      });\n      const sorted = topLps.sort((a, b) => a.usd > b.usd ? -1 : 1);\n      const shorter = sorted.splice(0, 100);\n      updateTopLps(shorter);\n    }\n\n    if (!topLps && allPairs && Object.keys(allPairs).length > 0) {\n      fetchData();\n    }\n  });\n  return topLps;\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/contexts/GlobalData.js"],"names":["React","createContext","useContext","useReducer","useMemo","useCallback","useEffect","useState","client","dayjs","utc","useTimeframe","getPercentChange","getBlockFromTimestamp","getBlocksFromTimestamps","get2DayPercentChange","getTimeframe","GLOBAL_DATA","GLOBAL_TXNS","GLOBAL_CHART","ETH_PRICE","ALL_PAIRS","ALL_TOKENS","TOP_LPS_PER_PAIRS","weekOfYear","useAllPairData","UPDATE","UPDATE_TXNS","UPDATE_CHART","UPDATE_ETH_PRICE","ETH_PRICE_KEY","UPDATE_ALL_PAIRS_IN_UNISWAP","UPDATE_ALL_TOKENS_IN_UNISWAP","UPDATE_TOP_LPS","extend","GlobalDataContext","useGlobalDataContext","reducer","state","type","payload","data","globalData","transactions","daily","weekly","chartData","ethPrice","oneDayPrice","ethPriceChange","allPairs","allTokens","topLps","Error","Provider","children","dispatch","update","updateTransactions","updateChart","updateEthPrice","updateAllPairsInUniswap","updateAllTokensInUniswap","updateTopLps","getGlobalData","oldEthPrice","oneDayData","twoDayData","utcCurrentTime","utcOneDayBack","subtract","unix","utcTwoDaysBack","utcOneWeekBack","utcTwoWeeksBack","oneDayBlock","twoDayBlock","oneWeekBlock","twoWeekBlock","result","query","fetchPolicy","uniswapFactories","oneDayResult","number","twoDayResult","oneWeekResult","oneWeekData","twoWeekResult","twoWeekData","oneDayVolumeUSD","volumeChangeUSD","totalVolumeUSD","oneWeekVolume","weeklyVolumeChange","oneDayTxns","txnChange","txCount","totalLiquidityUSD","totalLiquidityETH","liquidityChangeUSD","e","console","log","getChartData","oldestDateToFetch","weeklyData","utcEndTime","skip","allFound","variables","startTime","concat","uniswapDayDatas","length","dayIndexSet","Set","dayIndexArray","oneDay","forEach","dayData","i","add","date","toFixed","push","dailyVolumeUSD","parseFloat","timestamp","latestLiquidityUSD","latestDayDats","mostLiquidTokens","index","nextDay","currentDayIndex","has","sort","a","b","parseInt","startIndexWeekly","currentWeek","entry","week","weeklyVolumeUSD","getGlobalTransactions","mints","burns","swaps","map","transaction","mint","burn","swap","getEthPrice","startOf","ethPriceOneDay","priceChangeETH","resultOneDay","currentPrice","bundles","oneDayBackPrice","PAIRS_TO_FETCH","TOKENS_TO_FETCH","getAllPairsOnUniswap","pairs","skipCount","getAllTokensOnUniswap","tokens","useGlobalData","useEthPrice","fetchData","useGlobalChartData","oldestDateFetch","setOldestDateFetched","activeWindow","chartDataDaily","chartDataWeekly","newChartData","newWeeklyData","useGlobalTransactions","txns","ethPriceOld","checkForEthPrice","newPrice","priceChange","useAllPairsInUniswap","useAllTokensInUniswap","useTopLps","topPairs","Object","keys","reserveUSD","slice","pair","topLpLists","Promise","all","results","toString","liquidityPositions","filter","list","pairData","id","user","pairName","token0","symbol","token1","pairAddress","usd","liquidityTokenBalance","totalSupply","sorted","shorter","splice"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useReducer, useMemo, useCallback, useEffect, useState } from 'react'\nimport { client } from '../apollo/client'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport { useTimeframe } from './Application'\nimport {\n  getPercentChange,\n  getBlockFromTimestamp,\n  getBlocksFromTimestamps,\n  get2DayPercentChange,\n  getTimeframe,\n} from '../utils'\nimport {\n  GLOBAL_DATA,\n  GLOBAL_TXNS,\n  GLOBAL_CHART,\n  ETH_PRICE,\n  ALL_PAIRS,\n  ALL_TOKENS,\n  TOP_LPS_PER_PAIRS,\n} from '../apollo/queries'\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\nimport { useAllPairData } from './PairData'\nconst UPDATE = 'UPDATE'\nconst UPDATE_TXNS = 'UPDATE_TXNS'\nconst UPDATE_CHART = 'UPDATE_CHART'\nconst UPDATE_ETH_PRICE = 'UPDATE_ETH_PRICE'\nconst ETH_PRICE_KEY = 'ETH_PRICE_KEY'\nconst UPDATE_ALL_PAIRS_IN_UNISWAP = 'UPDAUPDATE_ALL_PAIRS_IN_UNISWAPTE_TOP_PAIRS'\nconst UPDATE_ALL_TOKENS_IN_UNISWAP = 'UPDATE_ALL_TOKENS_IN_UNISWAP'\nconst UPDATE_TOP_LPS = 'UPDATE_TOP_LPS'\n\n// format dayjs with the libraries that we need\ndayjs.extend(utc)\ndayjs.extend(weekOfYear)\n\nconst GlobalDataContext = createContext()\n\nfunction useGlobalDataContext() {\n  return useContext(GlobalDataContext)\n}\n\nfunction reducer(state, { type, payload }) {\n  switch (type) {\n    case UPDATE: {\n      const { data } = payload\n      return {\n        ...state,\n        globalData: data,\n      }\n    }\n    case UPDATE_TXNS: {\n      const { transactions } = payload\n      return {\n        ...state,\n        transactions,\n      }\n    }\n    case UPDATE_CHART: {\n      const { daily, weekly } = payload\n      return {\n        ...state,\n        chartData: {\n          daily,\n          weekly,\n        },\n      }\n    }\n    case UPDATE_ETH_PRICE: {\n      const { ethPrice, oneDayPrice, ethPriceChange } = payload\n      return {\n        [ETH_PRICE_KEY]: ethPrice,\n        oneDayPrice,\n        ethPriceChange,\n      }\n    }\n\n    case UPDATE_ALL_PAIRS_IN_UNISWAP: {\n      const { allPairs } = payload\n      return {\n        ...state,\n        allPairs,\n      }\n    }\n\n    case UPDATE_ALL_TOKENS_IN_UNISWAP: {\n      const { allTokens } = payload\n      return {\n        ...state,\n        allTokens,\n      }\n    }\n\n    case UPDATE_TOP_LPS: {\n      const { topLps } = payload\n      return {\n        ...state,\n        topLps,\n      }\n    }\n    default: {\n      throw Error(`Unexpected action type in DataContext reducer: '${type}'.`)\n    }\n  }\n}\n\nexport default function Provider({ children }) {\n  const [state, dispatch] = useReducer(reducer, {})\n  const update = useCallback((data) => {\n    dispatch({\n      type: UPDATE,\n      payload: {\n        data,\n      },\n    })\n  }, [])\n\n  const updateTransactions = useCallback((transactions) => {\n    dispatch({\n      type: UPDATE_TXNS,\n      payload: {\n        transactions,\n      },\n    })\n  }, [])\n\n  const updateChart = useCallback((daily, weekly) => {\n    dispatch({\n      type: UPDATE_CHART,\n      payload: {\n        daily,\n        weekly,\n      },\n    })\n  }, [])\n\n  const updateEthPrice = useCallback((ethPrice, oneDayPrice, ethPriceChange) => {\n    dispatch({\n      type: UPDATE_ETH_PRICE,\n      payload: {\n        ethPrice,\n        oneDayPrice,\n        ethPriceChange,\n      },\n    })\n  }, [])\n\n  const updateAllPairsInUniswap = useCallback((allPairs) => {\n    dispatch({\n      type: UPDATE_ALL_PAIRS_IN_UNISWAP,\n      payload: {\n        allPairs,\n      },\n    })\n  }, [])\n\n  const updateAllTokensInUniswap = useCallback((allTokens) => {\n    dispatch({\n      type: UPDATE_ALL_TOKENS_IN_UNISWAP,\n      payload: {\n        allTokens,\n      },\n    })\n  }, [])\n\n  const updateTopLps = useCallback((topLps) => {\n    dispatch({\n      type: UPDATE_TOP_LPS,\n      payload: {\n        topLps,\n      },\n    })\n  }, [])\n  return (\n    <GlobalDataContext.Provider\n      value={useMemo(\n        () => [\n          state,\n          {\n            update,\n            updateTransactions,\n            updateChart,\n            updateEthPrice,\n            updateTopLps,\n            updateAllPairsInUniswap,\n            updateAllTokensInUniswap,\n          },\n        ],\n        [\n          state,\n          update,\n          updateTransactions,\n          updateTopLps,\n          updateChart,\n          updateEthPrice,\n          updateAllPairsInUniswap,\n          updateAllTokensInUniswap,\n        ]\n      )}\n    >\n      {children}\n    </GlobalDataContext.Provider>\n  )\n}\n\n/**\n * Gets all the global data for the overview page.\n * Needs current eth price and the old eth price to get\n * 24 hour USD changes.\n * @param {*} ethPrice\n * @param {*} oldEthPrice\n */\nasync function getGlobalData(ethPrice, oldEthPrice) {\n  // data for each day , historic data used for % changes\n  let data = {}\n  let oneDayData = {}\n  let twoDayData = {}\n\n  try {\n    // get timestamps for the days\n    const utcCurrentTime = dayjs()\n    const utcOneDayBack = utcCurrentTime.subtract(1, 'day').unix()\n    const utcTwoDaysBack = utcCurrentTime.subtract(2, 'day').unix()\n    const utcOneWeekBack = utcCurrentTime.subtract(1, 'week').unix()\n    const utcTwoWeeksBack = utcCurrentTime.subtract(2, 'week').unix()\n\n    // get the blocks needed for time travel queries\n    let [oneDayBlock, twoDayBlock, oneWeekBlock, twoWeekBlock] = await getBlocksFromTimestamps([\n      utcOneDayBack,\n      utcTwoDaysBack,\n      utcOneWeekBack,\n      utcTwoWeeksBack,\n    ])\n\n    // fetch the global data\n    let result = await client.query({\n      query: GLOBAL_DATA(),\n      fetchPolicy: 'cache-first',\n    })\n    data = result.data.uniswapFactories[0]\n\n    // fetch the historical data\n    let oneDayResult = await client.query({\n      query: GLOBAL_DATA(oneDayBlock?.number),\n      fetchPolicy: 'cache-first',\n    })\n    oneDayData = oneDayResult.data.uniswapFactories[0]\n\n    let twoDayResult = await client.query({\n      query: GLOBAL_DATA(twoDayBlock?.number),\n      fetchPolicy: 'cache-first',\n    })\n    twoDayData = twoDayResult.data.uniswapFactories[0]\n\n    let oneWeekResult = await client.query({\n      query: GLOBAL_DATA(oneWeekBlock?.number),\n      fetchPolicy: 'cache-first',\n    })\n    const oneWeekData = oneWeekResult.data.uniswapFactories[0]\n\n    let twoWeekResult = await client.query({\n      query: GLOBAL_DATA(twoWeekBlock?.number),\n      fetchPolicy: 'cache-first',\n    })\n    const twoWeekData = twoWeekResult.data.uniswapFactories[0]\n\n    if (data && oneDayData && twoDayData && twoWeekData) {\n      let [oneDayVolumeUSD, volumeChangeUSD] = get2DayPercentChange(\n        data.totalVolumeUSD,\n        oneDayData.totalVolumeUSD ? oneDayData.totalVolumeUSD : 0,\n        twoDayData.totalVolumeUSD ? twoDayData.totalVolumeUSD : 0\n      )\n\n      const [oneWeekVolume, weeklyVolumeChange] = get2DayPercentChange(\n        data.totalVolumeUSD,\n        oneWeekData.totalVolumeUSD,\n        twoWeekData.totalVolumeUSD\n      )\n\n      const [oneDayTxns, txnChange] = get2DayPercentChange(\n        data.txCount,\n        oneDayData.txCount ? oneDayData.txCount : 0,\n        twoDayData.txCount ? twoDayData.txCount : 0\n      )\n\n      // format the total liquidity in USD\n      data.totalLiquidityUSD = data.totalLiquidityETH * ethPrice\n      const liquidityChangeUSD = getPercentChange(\n        data.totalLiquidityETH * ethPrice,\n        oneDayData.totalLiquidityETH * oldEthPrice\n      )\n\n      // add relevant fields with the calculated amounts\n      data.oneDayVolumeUSD = oneDayVolumeUSD\n      data.oneWeekVolume = oneWeekVolume\n      data.weeklyVolumeChange = weeklyVolumeChange\n      data.volumeChangeUSD = volumeChangeUSD\n      data.liquidityChangeUSD = liquidityChangeUSD\n      data.oneDayTxns = oneDayTxns\n      data.txnChange = txnChange\n    }\n  } catch (e) {\n    console.log(e)\n  }\n\n  return data\n}\n\n/**\n * Get historical data for volume and liquidity used in global charts\n * on main page\n * @param {*} oldestDateToFetch // start of window to fetch from\n */\nconst getChartData = async (oldestDateToFetch) => {\n  let data = []\n  let weeklyData = []\n  const utcEndTime = dayjs.utc()\n  let skip = 0\n  let allFound = false\n\n  try {\n    while (!allFound) {\n      let result = await client.query({\n        query: GLOBAL_CHART,\n        variables: {\n          startTime: oldestDateToFetch,\n          skip,\n        },\n        fetchPolicy: 'cache-first',\n      })\n      skip += 1000\n      data = data.concat(result.data.uniswapDayDatas)\n      if (result.data.uniswapDayDatas.length < 1000) {\n        allFound = true\n      }\n    }\n\n    if (data) {\n      let dayIndexSet = new Set()\n      let dayIndexArray = []\n      const oneDay = 24 * 60 * 60\n\n      // for each day, parse the daily volume and format for chart array\n      data.forEach((dayData, i) => {\n        // add the day index to the set of days\n        dayIndexSet.add((data[i].date / oneDay).toFixed(0))\n        dayIndexArray.push(data[i])\n        dayData.dailyVolumeUSD = parseFloat(dayData.dailyVolumeUSD)\n      })\n\n      // fill in empty days ( there will be no day datas if no trades made that day )\n      let timestamp = data[0].date ? data[0].date : oldestDateToFetch\n      let latestLiquidityUSD = data[0].totalLiquidityUSD\n      let latestDayDats = data[0].mostLiquidTokens\n      let index = 1\n      while (timestamp < utcEndTime.unix() - oneDay) {\n        const nextDay = timestamp + oneDay\n        let currentDayIndex = (nextDay / oneDay).toFixed(0)\n        if (!dayIndexSet.has(currentDayIndex)) {\n          data.push({\n            date: nextDay,\n            dailyVolumeUSD: 0,\n            totalLiquidityUSD: latestLiquidityUSD,\n            mostLiquidTokens: latestDayDats,\n          })\n        } else {\n          latestLiquidityUSD = dayIndexArray[index].totalLiquidityUSD\n          latestDayDats = dayIndexArray[index].mostLiquidTokens\n          index = index + 1\n        }\n        timestamp = nextDay\n      }\n    }\n\n    // format weekly data for weekly sized chunks\n    data = data.sort((a, b) => (parseInt(a.date) > parseInt(b.date) ? 1 : -1))\n    let startIndexWeekly = -1\n    let currentWeek = -1\n    data.forEach((entry, i) => {\n      const week = dayjs.utc(dayjs.unix(data[i].date)).week()\n      if (week !== currentWeek) {\n        currentWeek = week\n        startIndexWeekly++\n      }\n      weeklyData[startIndexWeekly] = weeklyData[startIndexWeekly] || {}\n      weeklyData[startIndexWeekly].date = data[i].date\n      weeklyData[startIndexWeekly].weeklyVolumeUSD =\n        (weeklyData[startIndexWeekly].weeklyVolumeUSD ?? 0) + data[i].dailyVolumeUSD\n    })\n  } catch (e) {\n    console.log(e)\n  }\n  return [data, weeklyData]\n}\n\n/**\n * Get and format transactions for global page\n */\nconst getGlobalTransactions = async () => {\n  let transactions = {}\n\n  try {\n    let result = await client.query({\n      query: GLOBAL_TXNS,\n      fetchPolicy: 'cache-first',\n    })\n    transactions.mints = []\n    transactions.burns = []\n    transactions.swaps = []\n    result?.data?.transactions &&\n      result.data.transactions.map((transaction) => {\n        if (transaction.mints.length > 0) {\n          transaction.mints.map((mint) => {\n            return transactions.mints.push(mint)\n          })\n        }\n        if (transaction.burns.length > 0) {\n          transaction.burns.map((burn) => {\n            return transactions.burns.push(burn)\n          })\n        }\n        if (transaction.swaps.length > 0) {\n          transaction.swaps.map((swap) => {\n            return transactions.swaps.push(swap)\n          })\n        }\n        return true\n      })\n  } catch (e) {\n    console.log(e)\n  }\n\n  return transactions\n}\n\n/**\n * Gets the current price  of ETH, 24 hour price, and % change between them\n */\nconst getEthPrice = async () => {\n  const utcCurrentTime = dayjs()\n  const utcOneDayBack = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\n\n  let ethPrice = 0\n  let ethPriceOneDay = 0\n  let priceChangeETH = 0\n\n  try {\n    let oneDayBlock = await getBlockFromTimestamp(utcOneDayBack)\n    let result = await client.query({\n      query: ETH_PRICE(),\n      fetchPolicy: 'cache-first',\n    })\n    let resultOneDay = await client.query({\n      query: ETH_PRICE(oneDayBlock),\n      fetchPolicy: 'cache-first',\n    })\n    const currentPrice = result?.data?.bundles[0]?.ethPrice\n    const oneDayBackPrice = resultOneDay?.data?.bundles[0]?.ethPrice\n    priceChangeETH = getPercentChange(currentPrice, oneDayBackPrice)\n    ethPrice = currentPrice\n    ethPriceOneDay = oneDayBackPrice\n  } catch (e) {\n    console.log(e)\n  }\n\n  return [ethPrice, ethPriceOneDay, priceChangeETH]\n}\n\nconst PAIRS_TO_FETCH = 500\nconst TOKENS_TO_FETCH = 500\n\n/**\n * Loop through every pair on uniswap, used for search\n */\nasync function getAllPairsOnUniswap() {\n  try {\n    let allFound = false\n    let pairs = []\n    let skipCount = 0\n    while (!allFound) {\n      let result = await client.query({\n        query: ALL_PAIRS,\n        variables: {\n          skip: skipCount,\n        },\n        fetchPolicy: 'cache-first',\n      })\n      skipCount = skipCount + PAIRS_TO_FETCH\n      pairs = pairs.concat(result?.data?.pairs)\n      if (result?.data?.pairs.length < PAIRS_TO_FETCH || pairs.length > PAIRS_TO_FETCH) {\n        allFound = true\n      }\n    }\n    return pairs\n  } catch (e) {\n    console.log(e)\n  }\n}\n\n/**\n * Loop through every token on uniswap, used for search\n */\nasync function getAllTokensOnUniswap() {\n  try {\n    let allFound = false\n    let skipCount = 0\n    let tokens = []\n    while (!allFound) {\n      let result = await client.query({\n        query: ALL_TOKENS,\n        variables: {\n          skip: skipCount,\n        },\n        fetchPolicy: 'cache-first',\n      })\n      tokens = tokens.concat(result?.data?.tokens)\n      if (result?.data?.tokens?.length < TOKENS_TO_FETCH || tokens.length > TOKENS_TO_FETCH) {\n        allFound = true\n      }\n      skipCount = skipCount += TOKENS_TO_FETCH\n    }\n    return tokens\n  } catch (e) {\n    console.log(e)\n  }\n}\n\n/**\n * Hook that fetches overview data, plus all tokens and pairs for search\n */\nexport function useGlobalData() {\n  const [state, { update, updateAllPairsInUniswap, updateAllTokensInUniswap }] = useGlobalDataContext()\n  const [ethPrice, oldEthPrice] = useEthPrice()\n\n  const data = state?.globalData\n\n  useEffect(() => {\n    async function fetchData() {\n      let globalData = await getGlobalData(ethPrice, oldEthPrice)\n      globalData && update(globalData)\n\n      let allPairs = await getAllPairsOnUniswap()\n      updateAllPairsInUniswap(allPairs)\n\n      let allTokens = await getAllTokensOnUniswap()\n      updateAllTokensInUniswap(allTokens)\n    }\n    if (!data && ethPrice && oldEthPrice) {\n      fetchData()\n    }\n  }, [ethPrice, oldEthPrice, update, data, updateAllPairsInUniswap, updateAllTokensInUniswap])\n\n  return data || {}\n}\n\nexport function useGlobalChartData() {\n  const [state, { updateChart }] = useGlobalDataContext()\n  const [oldestDateFetch, setOldestDateFetched] = useState()\n  const [activeWindow] = useTimeframe()\n\n  const chartDataDaily = state?.chartData?.daily\n  const chartDataWeekly = state?.chartData?.weekly\n\n  /**\n   * Keep track of oldest date fetched. Used to\n   * limit data fetched until its actually needed.\n   * (dont fetch year long stuff unless year option selected)\n   */\n  useEffect(() => {\n    // based on window, get starttime\n    let startTime = getTimeframe(activeWindow)\n\n    if ((activeWindow && startTime < oldestDateFetch) || !oldestDateFetch) {\n      setOldestDateFetched(startTime)\n    }\n  }, [activeWindow, oldestDateFetch])\n\n  /**\n   * Fetch data if none fetched or older data is needed\n   */\n  useEffect(() => {\n    async function fetchData() {\n      // historical stuff for chart\n      let [newChartData, newWeeklyData] = await getChartData(oldestDateFetch)\n      updateChart(newChartData, newWeeklyData)\n    }\n    if (oldestDateFetch && !(chartDataDaily && chartDataWeekly)) {\n      fetchData()\n    }\n  }, [chartDataDaily, chartDataWeekly, oldestDateFetch, updateChart])\n\n  return [chartDataDaily, chartDataWeekly]\n}\n\nexport function useGlobalTransactions() {\n  const [state, { updateTransactions }] = useGlobalDataContext()\n  const transactions = state?.transactions\n  useEffect(() => {\n    async function fetchData() {\n      if (!transactions) {\n        let txns = await getGlobalTransactions()\n        updateTransactions(txns)\n      }\n    }\n    fetchData()\n  }, [updateTransactions, transactions])\n  return transactions\n}\n\nexport function useEthPrice() {\n  const [state, { updateEthPrice }] = useGlobalDataContext()\n  const ethPrice = state?.[ETH_PRICE_KEY]\n  const ethPriceOld = state?.['oneDayPrice']\n  useEffect(() => {\n    async function checkForEthPrice() {\n      if (!ethPrice) {\n        let [newPrice, oneDayPrice, priceChange] = await getEthPrice()\n        updateEthPrice(newPrice, oneDayPrice, priceChange)\n      }\n    }\n    checkForEthPrice()\n  }, [ethPrice, updateEthPrice])\n\n  return [ethPrice, ethPriceOld]\n}\n\nexport function useAllPairsInUniswap() {\n  const [state] = useGlobalDataContext()\n  let allPairs = state?.allPairs\n\n  return allPairs || []\n}\n\nexport function useAllTokensInUniswap() {\n  const [state] = useGlobalDataContext()\n  let allTokens = state?.allTokens\n\n  return allTokens || []\n}\n\n/**\n * Get the top liquidity positions based on USD size\n * @TODO Not a perfect lookup needs improvement\n */\nexport function useTopLps() {\n  const [state, { updateTopLps }] = useGlobalDataContext()\n  let topLps = state?.topLps\n\n  const allPairs = useAllPairData()\n\n  useEffect(() => {\n    async function fetchData() {\n      // get top 20 by reserves\n      let topPairs = Object.keys(allPairs)\n        ?.sort((a, b) => parseFloat(allPairs[a].reserveUSD > allPairs[b].reserveUSD ? -1 : 1))\n        ?.slice(0, 99)\n        .map((pair) => pair)\n\n      let topLpLists = await Promise.all(\n        topPairs.map(async (pair) => {\n          // for each one, fetch top LPs\n          try {\n            const { data: results } = await client.query({\n              query: TOP_LPS_PER_PAIRS,\n              variables: {\n                pair: pair.toString(),\n              },\n              fetchPolicy: 'cache-first',\n            })\n            if (results) {\n              return results.liquidityPositions\n            }\n          } catch (e) {}\n        })\n      )\n\n      // get the top lps from the results formatted\n      const topLps = []\n      topLpLists\n        .filter((i) => !!i) // check for ones not fetched correctly\n        .map((list) => {\n          return list.map((entry) => {\n            const pairData = allPairs[entry.pair.id]\n            return topLps.push({\n              user: entry.user,\n              pairName: pairData.token0.symbol + '-' + pairData.token1.symbol,\n              pairAddress: entry.pair.id,\n              token0: pairData.token0.id,\n              token1: pairData.token1.id,\n              usd:\n                (parseFloat(entry.liquidityTokenBalance) / parseFloat(pairData.totalSupply)) *\n                parseFloat(pairData.reserveUSD),\n            })\n          })\n        })\n\n      const sorted = topLps.sort((a, b) => (a.usd > b.usd ? -1 : 1))\n      const shorter = sorted.splice(0, 100)\n      updateTopLps(shorter)\n    }\n\n    if (!topLps && allPairs && Object.keys(allPairs).length > 0) {\n      fetchData()\n    }\n  })\n\n  return topLps\n}\n"]},"metadata":{},"sourceType":"module"}