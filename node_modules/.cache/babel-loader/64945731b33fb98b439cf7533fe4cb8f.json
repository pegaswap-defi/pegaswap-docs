{"ast":null,"code":"import _regeneratorRuntime from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/macbook/Desktop/juiceswap/juiceswap-docs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import schema from'@uniswap/token-lists/src/tokenlist.schema.json';import Ajv from'ajv';/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */function uriToHttp(uri){var _uri$match,_uri$match2;var protocol=uri.split(':')[0].toLowerCase();switch(protocol){case'https':return[uri];case'http':return['https'+uri.substr(4),uri];case'ipfs':var hash=(_uri$match=uri.match(/^ipfs:(\\/\\/)?(.*)$/i))===null||_uri$match===void 0?void 0:_uri$match[2];return[\"https://cloudflare-ipfs.com/ipfs/\".concat(hash,\"/\"),\"https://ipfs.io/ipfs/\".concat(hash,\"/\")];case'ipns':var name=(_uri$match2=uri.match(/^ipns:(\\/\\/)?(.*)$/i))===null||_uri$match2===void 0?void 0:_uri$match2[2];return[\"https://cloudflare-ipfs.com/ipns/\".concat(name,\"/\"),\"https://ipfs.io/ipns/\".concat(name,\"/\")];default:return[];}}var tokenListValidator=new Ajv({allErrors:true}).compile(schema);/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n */export default function getTokenList(_x){return _getTokenList.apply(this,arguments);}function _getTokenList(){_getTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl){var urls,i,url,isLast,response,json,_tokenListValidator$e,_tokenListValidator$e2,validationErrors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:urls=uriToHttp(listUrl);i=0;case 2:if(!(i<urls.length)){_context.next=32;break;}url=urls[i];isLast=i===urls.length-1;response=void 0;_context.prev=6;_context.next=9;return fetch(url);case 9:response=_context.sent;_context.next=18;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](6);console.debug('Failed to fetch list',listUrl,_context.t0);if(!isLast){_context.next=17;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 17:return _context.abrupt(\"continue\",29);case 18:if(response.ok){_context.next=22;break;}if(!isLast){_context.next=21;break;}throw new Error(\"Failed to download list \".concat(listUrl));case 21:return _context.abrupt(\"continue\",29);case 22:_context.next=24;return response.json();case 24:json=_context.sent;if(tokenListValidator(json)){_context.next=28;break;}validationErrors=(_tokenListValidator$e=(_tokenListValidator$e2=tokenListValidator.errors)===null||_tokenListValidator$e2===void 0?void 0:_tokenListValidator$e2.reduce(function(memo,error){var _error$message;var add=\"\".concat(error.dataPath,\" \").concat((_error$message=error.message)!==null&&_error$message!==void 0?_error$message:'');return memo.length>0?\"\".concat(memo,\"; \").concat(add):\"\".concat(add);},''))!==null&&_tokenListValidator$e!==void 0?_tokenListValidator$e:'unknown error';throw new Error(\"Token list failed validation: \".concat(validationErrors));case 28:return _context.abrupt(\"return\",json);case 29:i++;_context.next=2;break;case 32:throw new Error('Unrecognized list URL protocol.');case 33:case\"end\":return _context.stop();}}},_callee,null,[[6,12]]);}));return _getTokenList.apply(this,arguments);}","map":{"version":3,"sources":["/Users/macbook/Desktop/juiceswap/juiceswap-docs/src/utils/tokenLists.ts"],"names":["schema","Ajv","uriToHttp","uri","protocol","split","toLowerCase","substr","hash","match","name","tokenListValidator","allErrors","compile","getTokenList","listUrl","urls","i","length","url","isLast","response","fetch","console","debug","Error","ok","json","validationErrors","errors","reduce","memo","error","add","dataPath","message"],"mappings":"yUACA,MAAOA,CAAAA,MAAP,KAAmB,gDAAnB,CACA,MAAOC,CAAAA,GAAP,KAAgB,KAAhB,CAEA;AACA;AACA;AACA,GACA,QAASC,CAAAA,SAAT,CAAmBC,GAAnB,CAA0C,4BACxC,GAAMC,CAAAA,QAAQ,CAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBC,WAAlB,EAAjB,CACA,OAAQF,QAAR,EACE,IAAK,OAAL,CACE,MAAO,CAACD,GAAD,CAAP,CACF,IAAK,MAAL,CACE,MAAO,CAAC,QAAUA,GAAG,CAACI,MAAJ,CAAW,CAAX,CAAX,CAA0BJ,GAA1B,CAAP,CACF,IAAK,MAAL,CACE,GAAMK,CAAAA,IAAI,aAAGL,GAAG,CAACM,KAAJ,CAAU,qBAAV,CAAH,qCAAG,WAAmC,CAAnC,CAAb,CACA,MAAO,4CAAqCD,IAArC,qCAAsEA,IAAtE,MAAP,CACF,IAAK,MAAL,CACE,GAAME,CAAAA,IAAI,cAAGP,GAAG,CAACM,KAAJ,CAAU,qBAAV,CAAH,sCAAG,YAAmC,CAAnC,CAAb,CACA,MAAO,4CAAqCC,IAArC,qCAAsEA,IAAtE,MAAP,CACF,QACE,MAAO,EAAP,CAZJ,CAcD,CAED,GAAMC,CAAAA,kBAAkB,CAAG,GAAIV,CAAAA,GAAJ,CAAQ,CAAEW,SAAS,CAAE,IAAb,CAAR,EAA6BC,OAA7B,CAAqCb,MAArC,CAA3B,CAEA;AACA;AACA;AACA,GACA,uBAA8Bc,CAAAA,YAA9B,iD,+FAAe,iBAA4BC,OAA5B,oNACPC,IADO,CACAd,SAAS,CAACa,OAAD,CADT,CAEJE,CAFI,CAEA,CAFA,aAEGA,CAAC,CAAGD,IAAI,CAACE,MAFZ,2BAGLC,GAHK,CAGCH,IAAI,CAACC,CAAD,CAHL,CAILG,MAJK,CAIIH,CAAC,GAAKD,IAAI,CAACE,MAAL,CAAc,CAJxB,CAKPG,QALO,8CAOQC,CAAAA,KAAK,CAACH,GAAD,CAPb,QAOTE,QAPS,gGASTE,OAAO,CAACC,KAAR,CAAc,sBAAd,CAAsCT,OAAtC,cATS,IAULK,MAVK,+BAUS,IAAIK,CAAAA,KAAJ,mCAAqCV,OAArC,EAVT,0DAcNM,QAAQ,CAACK,EAdH,8BAeLN,MAfK,+BAeS,IAAIK,CAAAA,KAAJ,mCAAqCV,OAArC,EAfT,8EAmBQM,CAAAA,QAAQ,CAACM,IAAT,EAnBR,SAmBLA,IAnBK,kBAoBNhB,kBAAkB,CAACgB,IAAD,CApBZ,0BAqBHC,gBArBG,gDAsBPjB,kBAAkB,CAACkB,MAtBZ,iDAsBP,uBAA2BC,MAA3B,CAA0C,SAACC,IAAD,CAAOC,KAAP,CAAiB,oBACzD,GAAMC,CAAAA,GAAG,WAAMD,KAAK,CAACE,QAAZ,6BAAwBF,KAAK,CAACG,OAA9B,iDAAyC,EAAzC,CAAT,CACA,MAAOJ,CAAAA,IAAI,CAACb,MAAL,CAAc,CAAd,WAAqBa,IAArB,cAA8BE,GAA9B,YAAyCA,GAAzC,CAAP,CACD,CAHD,CAGG,EAHH,CAtBO,+DAyBG,eAzBH,MA0BH,IAAIR,CAAAA,KAAJ,yCAA2CG,gBAA3C,EA1BG,yCA4BJD,IA5BI,UAEoBV,CAAC,EAFrB,oCA8BP,IAAIQ,CAAAA,KAAJ,CAAU,iCAAV,CA9BO,sE","sourcesContent":["import { TokenList } from '@uniswap/token-lists'\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\nimport Ajv from 'ajv'\n\n/**\n * Given a URI that may be ipfs, ipns, http, or https protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nfunction uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'https':\n      return [uri]\n    case 'http':\n      return ['https' + uri.substr(4), uri]\n    case 'ipfs':\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    case 'ipns':\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    default:\n      return []\n  }\n}\n\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\n\n/**\n * Contains the logic for resolving a list URL to a validated token list\n * @param listUrl list url\n */\nexport default async function getTokenList(listUrl: string): Promise<TokenList> {\n  const urls = uriToHttp(listUrl)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url)\n    } catch (error) {\n      console.debug('Failed to fetch list', listUrl, error)\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\n      continue\n    }\n\n    const json = await response.json()\n    if (!tokenListValidator(json)) {\n      const validationErrors: string =\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\n          const add = `${error.dataPath} ${error.message ?? ''}`\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\n        }, '') ?? 'unknown error'\n      throw new Error(`Token list failed validation: ${validationErrors}`)\n    }\n    return json\n  }\n  throw new Error('Unrecognized list URL protocol.')\n}\n"]},"metadata":{},"sourceType":"module"}